
final_project_rbversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046cc  080046cc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046cc  080046cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08004744  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004744  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d728  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002404  00000000  00000000  0002d7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0002fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  000309a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037ef  00000000  00000000  00031678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f72c  00000000  00000000  00034e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b17d  00000000  00000000  00044593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b48  00000000  00000000  000cf764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080045a4 	.word	0x080045a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080045a4 	.word	0x080045a4

0800014c <setTimer1>:
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void setTimer1( int duration)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a08      	ldr	r2, [pc, #32]	; (8000178 <setTimer1+0x2c>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	4a06      	ldr	r2, [pc, #24]	; (800017c <setTimer1+0x30>)
 8000164:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000166:	4b06      	ldr	r3, [pc, #24]	; (8000180 <setTimer1+0x34>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	66666667 	.word	0x66666667
 800017c:	20000090 	.word	0x20000090
 8000180:	2000008c 	.word	0x2000008c

08000184 <setTimer2>:

void setTimer2( int duration)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <setTimer2+0x2c>)
 8000190:	fb82 1203 	smull	r1, r2, r2, r3
 8000194:	1092      	asrs	r2, r2, #2
 8000196:	17db      	asrs	r3, r3, #31
 8000198:	1ad3      	subs	r3, r2, r3
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <setTimer2+0x30>)
 800019c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <setTimer2+0x34>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	66666667 	.word	0x66666667
 80001b4:	20000098 	.word	0x20000098
 80001b8:	20000094 	.word	0x20000094

080001bc <setTimer3>:
void setTimer3( int duration)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <setTimer3+0x2c>)
 80001c8:	fb82 1203 	smull	r1, r2, r2, r3
 80001cc:	1092      	asrs	r2, r2, #2
 80001ce:	17db      	asrs	r3, r3, #31
 80001d0:	1ad3      	subs	r3, r2, r3
 80001d2:	4a06      	ldr	r2, [pc, #24]	; (80001ec <setTimer3+0x30>)
 80001d4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <setTimer3+0x34>)
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	66666667 	.word	0x66666667
 80001ec:	200000a0 	.word	0x200000a0
 80001f0:	2000009c 	.word	0x2000009c

080001f4 <setTimer4>:
void setTimer4( int duration)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a08      	ldr	r2, [pc, #32]	; (8000220 <setTimer4+0x2c>)
 8000200:	fb82 1203 	smull	r1, r2, r2, r3
 8000204:	1092      	asrs	r2, r2, #2
 8000206:	17db      	asrs	r3, r3, #31
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	4a06      	ldr	r2, [pc, #24]	; (8000224 <setTimer4+0x30>)
 800020c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <setTimer4+0x34>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	66666667 	.word	0x66666667
 8000224:	200000a8 	.word	0x200000a8
 8000228:	200000a4 	.word	0x200000a4

0800022c <timerRun>:
int getTimer4()
{
	return timer4_counter*TIMER_CYCLE;
}
void timerRun()
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <timerRun+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	dd0b      	ble.n	8000250 <timerRun+0x24>
	{
		timer1_counter--;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <timerRun+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3b01      	subs	r3, #1
 800023e:	4a1e      	ldr	r2, [pc, #120]	; (80002b8 <timerRun+0x8c>)
 8000240:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <timerRun+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	dc02      	bgt.n	8000250 <timerRun+0x24>
		{
			timer1_flag = 1;
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <timerRun+0x90>)
 800024c:	2201      	movs	r2, #1
 800024e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <timerRun+0x94>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	dd0b      	ble.n	8000270 <timerRun+0x44>
	{
		timer2_counter--;
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <timerRun+0x94>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	3b01      	subs	r3, #1
 800025e:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <timerRun+0x94>)
 8000260:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <timerRun+0x94>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dc02      	bgt.n	8000270 <timerRun+0x44>
		{
			timer2_flag = 1;
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <timerRun+0x98>)
 800026c:	2201      	movs	r2, #1
 800026e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <timerRun+0x9c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	dd0b      	ble.n	8000290 <timerRun+0x64>
	{
			timer3_counter--;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <timerRun+0x9c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3b01      	subs	r3, #1
 800027e:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <timerRun+0x9c>)
 8000280:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0)
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <timerRun+0x9c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dc02      	bgt.n	8000290 <timerRun+0x64>
			{
				timer3_flag = 1;
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <timerRun+0xa0>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer4_counter > 0)
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <timerRun+0xa4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	dd0b      	ble.n	80002b0 <timerRun+0x84>
	{
			timer4_counter--;
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <timerRun+0xa4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <timerRun+0xa4>)
 80002a0:	6013      	str	r3, [r2, #0]
			if(timer4_counter <= 0)
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <timerRun+0xa4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dc02      	bgt.n	80002b0 <timerRun+0x84>
			{
				timer4_flag = 1;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <timerRun+0xa8>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
			}
	}
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	20000090 	.word	0x20000090
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	20000098 	.word	0x20000098
 80002c4:	20000094 	.word	0x20000094
 80002c8:	200000a0 	.word	0x200000a0
 80002cc:	2000009c 	.word	0x2000009c
 80002d0:	200000a8 	.word	0x200000a8
 80002d4:	200000a4 	.word	0x200000a4

080002d8 <new_task>:
#include "advanced_scheduler.h"

adv_SCH_list S;

advTasks* new_task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
	advTasks *temp = malloc(sizeof(advTasks));
 80002e4:	2018      	movs	r0, #24
 80002e6:	f003 fd0b 	bl	8003d00 <malloc>
 80002ea:	4603      	mov	r3, r0
 80002ec:	617b      	str	r3, [r7, #20]
	temp->pTask = pFunction;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	601a      	str	r2, [r3, #0]
	temp->Delay = DELAY/ADV_TIMER_CYCLE;
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <new_task+0x54>)
 80002f8:	fba2 2303 	umull	r2, r3, r2, r3
 80002fc:	08da      	lsrs	r2, r3, #3
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	605a      	str	r2, [r3, #4]
	temp->Period = PERIOD/ADV_TIMER_CYCLE;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <new_task+0x54>)
 8000306:	fba2 2303 	umull	r2, r3, r2, r3
 800030a:	08da      	lsrs	r2, r3, #3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	609a      	str	r2, [r3, #8]
	temp->RunMe = 0;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	2200      	movs	r2, #0
 8000314:	731a      	strb	r2, [r3, #12]
	temp->next = NULL;
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
	temp->ID   = DELAY;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	611a      	str	r2, [r3, #16]
	return temp;
 8000322:	697b      	ldr	r3, [r7, #20]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	cccccccd 	.word	0xcccccccd

08000330 <adv_SCH_Init>:

void adv_SCH_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	S.head = NULL;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <adv_SCH_Init+0x18>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
	S.size = 0;
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <adv_SCH_Init+0x18>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	20000100 	.word	0x20000100

0800034c <adv_SCH_push>:

void adv_SCH_push(advTasks *task)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	if(S.size == ADV_SCH_MAX_TASKS) return;
 8000354:	4b35      	ldr	r3, [pc, #212]	; (800042c <adv_SCH_push+0xe0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b28      	cmp	r3, #40	; 0x28
 800035a:	d061      	beq.n	8000420 <adv_SCH_push+0xd4>
	//if this is the first task to add
	if(S.head == NULL)
 800035c:	4b33      	ldr	r3, [pc, #204]	; (800042c <adv_SCH_push+0xe0>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d108      	bne.n	8000376 <adv_SCH_push+0x2a>
	{
		S.head = task;
 8000364:	4a31      	ldr	r2, [pc, #196]	; (800042c <adv_SCH_push+0xe0>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6053      	str	r3, [r2, #4]
		S.size++;
 800036a:	4b30      	ldr	r3, [pc, #192]	; (800042c <adv_SCH_push+0xe0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	4a2e      	ldr	r2, [pc, #184]	; (800042c <adv_SCH_push+0xe0>)
 8000372:	6013      	str	r3, [r2, #0]
		return;
 8000374:	e055      	b.n	8000422 <adv_SCH_push+0xd6>
	}
	//if this task is neither the first task or have to add to the head of list
	//we search for it positoin
	advTasks *temp = S.head;
 8000376:	4b2d      	ldr	r3, [pc, #180]	; (800042c <adv_SCH_push+0xe0>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	60fb      	str	r3, [r7, #12]
	advTasks *prev = NULL;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]

	while(temp != NULL)
 8000380:	e011      	b.n	80003a6 <adv_SCH_push+0x5a>
	{
		//output_error(temp->Delay);
		if(task->Delay >= temp->Delay)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	429a      	cmp	r2, r3
 800038c:	d30f      	bcc.n	80003ae <adv_SCH_push+0x62>
		{
			task->Delay -= temp->Delay;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	1ad2      	subs	r2, r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	605a      	str	r2, [r3, #4]
		}
		else
			break;
		prev = temp;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	60bb      	str	r3, [r7, #8]
		temp = temp->next;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	60fb      	str	r3, [r7, #12]
	while(temp != NULL)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1ea      	bne.n	8000382 <adv_SCH_push+0x36>
 80003ac:	e000      	b.n	80003b0 <adv_SCH_push+0x64>
			break;
 80003ae:	bf00      	nop
	}

	if(prev == NULL)//The first task at head is bigger
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d115      	bne.n	80003e2 <adv_SCH_push+0x96>
	{
		S.head->Delay -= task->Delay;
 80003b6:	4b1d      	ldr	r3, [pc, #116]	; (800042c <adv_SCH_push+0xe0>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	6859      	ldr	r1, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	4b1a      	ldr	r3, [pc, #104]	; (800042c <adv_SCH_push+0xe0>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	605a      	str	r2, [r3, #4]
		task->next = S.head;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <adv_SCH_push+0xe0>)
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	615a      	str	r2, [r3, #20]
		S.head = task;
 80003d0:	4a16      	ldr	r2, [pc, #88]	; (800042c <adv_SCH_push+0xe0>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6053      	str	r3, [r2, #4]
		S.size++;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <adv_SCH_push+0xe0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3301      	adds	r3, #1
 80003dc:	4a13      	ldr	r2, [pc, #76]	; (800042c <adv_SCH_push+0xe0>)
 80003de:	6013      	str	r3, [r2, #0]
		task->next = temp;
		temp->Delay -= task->Delay;
		prev->next = task;
		S.size++;
	}
	return;
 80003e0:	e01f      	b.n	8000422 <adv_SCH_push+0xd6>
	else if(temp == NULL)//Even the last task is smaller
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d108      	bne.n	80003fa <adv_SCH_push+0xae>
		prev->next = task;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	615a      	str	r2, [r3, #20]
		S.size++;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <adv_SCH_push+0xe0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <adv_SCH_push+0xe0>)
 80003f6:	6013      	str	r3, [r2, #0]
	return;
 80003f8:	e013      	b.n	8000422 <adv_SCH_push+0xd6>
		task->next = temp;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	615a      	str	r2, [r3, #20]
		temp->Delay -= task->Delay;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	605a      	str	r2, [r3, #4]
		prev->next = task;
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	615a      	str	r2, [r3, #20]
		S.size++;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <adv_SCH_push+0xe0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <adv_SCH_push+0xe0>)
 800041c:	6013      	str	r3, [r2, #0]
	return;
 800041e:	e000      	b.n	8000422 <adv_SCH_push+0xd6>
	if(S.size == ADV_SCH_MAX_TASKS) return;
 8000420:	bf00      	nop
}
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000100 	.word	0x20000100

08000430 <adv_SCH_pop>:

advTasks* adv_SCH_pop()
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
	if(S.head != NULL)
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <adv_SCH_pop+0x40>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d011      	beq.n	8000462 <adv_SCH_pop+0x32>
	{
		advTasks* temp = S.head;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <adv_SCH_pop+0x40>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	607b      	str	r3, [r7, #4]
		S.head = S.head->next;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <adv_SCH_pop+0x40>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <adv_SCH_pop+0x40>)
 800044c:	6053      	str	r3, [r2, #4]
		temp->next = NULL;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
		S.size--;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <adv_SCH_pop+0x40>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <adv_SCH_pop+0x40>)
 800045c:	6013      	str	r3, [r2, #0]
		return temp;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	e000      	b.n	8000464 <adv_SCH_pop+0x34>
	}
	return NULL;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000100 	.word	0x20000100

08000474 <adv_SCH_Add_Task>:

void adv_SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
	if(S.size == ADV_SCH_MAX_TASKS) return;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <adv_SCH_Add_Task+0x30>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b28      	cmp	r3, #40	; 0x28
 8000486:	d009      	beq.n	800049c <adv_SCH_Add_Task+0x28>

	//if this is the first task to add
	advTasks *temp = new_task(pFunction, DELAY, PERIOD);
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	68f8      	ldr	r0, [r7, #12]
 800048e:	f7ff ff23 	bl	80002d8 <new_task>
 8000492:	6178      	str	r0, [r7, #20]
	adv_SCH_push(temp);
 8000494:	6978      	ldr	r0, [r7, #20]
 8000496:	f7ff ff59 	bl	800034c <adv_SCH_push>
 800049a:	e000      	b.n	800049e <adv_SCH_Add_Task+0x2a>
	if(S.size == ADV_SCH_MAX_TASKS) return;
 800049c:	bf00      	nop
}
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000100 	.word	0x20000100

080004a8 <adv_SCH_Update>:


void adv_SCH_Update(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	if(S.head != NULL)
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <adv_SCH_Update+0x40>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d014      	beq.n	80004de <adv_SCH_Update+0x36>
	{
		if(S.head->Delay > 0)
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <adv_SCH_Update+0x40>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d004      	beq.n	80004c8 <adv_SCH_Update+0x20>
		{
			S.head->Delay--;
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <adv_SCH_Update+0x40>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	685a      	ldr	r2, [r3, #4]
 80004c4:	3a01      	subs	r2, #1
 80004c6:	605a      	str	r2, [r3, #4]
		}
		if(S.head->Delay == 0)
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <adv_SCH_Update+0x40>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d105      	bne.n	80004de <adv_SCH_Update+0x36>
		{
			S.head->RunMe++;
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <adv_SCH_Update+0x40>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	7b1a      	ldrb	r2, [r3, #12]
 80004d8:	3201      	adds	r2, #1
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000100 	.word	0x20000100

080004ec <adv_SCH_Dispatch_Tasks>:

void adv_SCH_Dispatch_Tasks(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	if(S.head->RunMe > 0)
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	7b1b      	ldrb	r3, [r3, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d026      	beq.n	800054a <adv_SCH_Dispatch_Tasks+0x5e>
	{
		(*S.head->pTask)();
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4798      	blx	r3
		S.head->RunMe--;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	7b1a      	ldrb	r2, [r3, #12]
 800050a:	3a01      	subs	r2, #1
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	731a      	strb	r2, [r3, #12]
		advTasks* currTask = adv_SCH_pop();
 8000510:	f7ff ff8e 	bl	8000430 <adv_SCH_pop>
 8000514:	6078      	str	r0, [r7, #4]
		if(currTask->Period)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d012      	beq.n	8000544 <adv_SCH_Dispatch_Tasks+0x58>
		{
			currTask->Delay = currTask->Period;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	605a      	str	r2, [r3, #4]
			adv_SCH_push(currTask);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff10 	bl	800034c <adv_SCH_push>
			if(S.head->Delay == 0)
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d109      	bne.n	800054a <adv_SCH_Dispatch_Tasks+0x5e>
			{
				S.head->RunMe++;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	7b1a      	ldrb	r2, [r3, #12]
 800053c:	3201      	adds	r2, #1
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	731a      	strb	r2, [r3, #12]
		else
		{
			adv_SCH_Delete_Task(currTask);
		}
	}
}
 8000542:	e002      	b.n	800054a <adv_SCH_Dispatch_Tasks+0x5e>
			adv_SCH_Delete_Task(currTask);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f807 	bl	8000558 <adv_SCH_Delete_Task>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000100 	.word	0x20000100

08000558 <adv_SCH_Delete_Task>:

void adv_SCH_Delete_Task(advTasks *task)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if(task != NULL)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <adv_SCH_Delete_Task+0x14>
		free(task);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f003 fbd2 	bl	8003d10 <free>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <Red_On>:
 */
#include "display_control.h"
#include "main.h"
//First road leds' functions--------------------------------------------------------------------------------------------------------
void Red_On()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <Red_On+0x20>)
 8000580:	f001 fe4b 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <Red_On+0x24>)
 800058a:	f001 fe46 	bl	800221a <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010800 	.word	0x40010800
 8000598:	40010c00 	.word	0x40010c00

0800059c <Green_On>:

void Green_On()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <Green_On+0x20>)
 80005a8:	f001 fe37 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2108      	movs	r1, #8
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <Green_On+0x24>)
 80005b2:	f001 fe32 	bl	800221a <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <Yellow_On>:

void Yellow_On()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <Yellow_On+0x20>)
 80005d0:	f001 fe23 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2108      	movs	r1, #8
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <Yellow_On+0x24>)
 80005da:	f001 fe1e 	bl	800221a <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40010c00 	.word	0x40010c00

080005ec <Red1_On>:

//Second road leds functions--------------------------------------------------------------------------------------------------------
void Red1_On()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_3_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2120      	movs	r1, #32
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <Red1_On+0x1c>)
 80005f6:	f001 fe10 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2110      	movs	r1, #16
 80005fe:	4802      	ldr	r0, [pc, #8]	; (8000608 <Red1_On+0x1c>)
 8000600:	f001 fe0b 	bl	800221a <HAL_GPIO_WritePin>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010c00 	.word	0x40010c00

0800060c <Green1_On>:

void Green1_On()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_3_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <Green1_On+0x1c>)
 8000616:	f001 fe00 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <Green1_On+0x1c>)
 8000620:	f001 fdfb 	bl	800221a <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40010c00 	.word	0x40010c00

0800062c <Yellow1_On>:

void Yellow1_On()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_3_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2120      	movs	r1, #32
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <Yellow1_On+0x1c>)
 8000636:	f001 fdf0 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2110      	movs	r1, #16
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <Yellow1_On+0x1c>)
 8000640:	f001 fdeb 	bl	800221a <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40010c00 	.word	0x40010c00

0800064c <Redp_On>:

//Leds function for crossing road--------------------------------------------------------------------------------------------------------
void Redp_On()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_p_1_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <Redp_On+0x20>)
 8000658:	f001 fddf 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_p_2_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <Redp_On+0x24>)
 8000664:	f001 fdd9 	bl	800221a <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010c00 	.word	0x40010c00
 8000670:	40010800 	.word	0x40010800

08000674 <Greenp_On>:
void Greenp_On()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_p_1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <Greenp_On+0x20>)
 8000680:	f001 fdcb 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_p_2_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4803      	ldr	r0, [pc, #12]	; (8000698 <Greenp_On+0x24>)
 800068c:	f001 fdc5 	bl	800221a <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40010800 	.word	0x40010800

0800069c <Reset>:

//Led reset functions---------------------------------------------------------------------------------------------------------------
void Reset()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <Reset+0x34>)
 80006a8:	f001 fdb7 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2108      	movs	r1, #8
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <Reset+0x38>)
 80006b2:	f001 fdb2 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_3_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Reset+0x34>)
 80006bc:	f001 fdad 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2110      	movs	r1, #16
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <Reset+0x38>)
 80006c6:	f001 fda8 	bl	800221a <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <Reset_p>:

void Reset_p()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_p_1_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <Reset_p+0x20>)
 80006e4:	f001 fd99 	bl	800221a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_p_2_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <Reset_p+0x24>)
 80006f0:	f001 fd93 	bl	800221a <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	40010800 	.word	0x40010800

08000700 <fsm_automatic_run>:
#include "SOFTWARE_TIMER.h"
#include "main.h"
#include "input_reading.h"

void fsm_automatic_run()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	switch(status1)
 8000704:	4b9f      	ldr	r3, [pc, #636]	; (8000984 <fsm_automatic_run+0x284>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b04      	cmp	r3, #4
 800070a:	f200 81ad 	bhi.w	8000a68 <fsm_automatic_run+0x368>
 800070e:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <fsm_automatic_run+0x14>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	08000729 	.word	0x08000729
 8000718:	0800075d 	.word	0x0800075d
 800071c:	08000811 	.word	0x08000811
 8000720:	080008cb 	.word	0x080008cb
 8000724:	080009b1 	.word	0x080009b1
	{
	case INIT:
		status1 = AUTO_RED_GREEN;
 8000728:	4b96      	ldr	r3, [pc, #600]	; (8000984 <fsm_automatic_run+0x284>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
		set_road1_time(red_time);
 800072e:	4b96      	ldr	r3, [pc, #600]	; (8000988 <fsm_automatic_run+0x288>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fcee 	bl	8001114 <set_road1_time>
		set_road2_time(green_time);
 8000738:	4b94      	ldr	r3, [pc, #592]	; (800098c <fsm_automatic_run+0x28c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fcff 	bl	8001140 <set_road2_time>
		setTimer1(green_time);
 8000742:	4b92      	ldr	r3, [pc, #584]	; (800098c <fsm_automatic_run+0x28c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd00 	bl	800014c <setTimer1>
		setTimer2(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f7ff fd19 	bl	8000184 <setTimer2>
	    status2 = WAITING;
 8000752:	4b8f      	ldr	r3, [pc, #572]	; (8000990 <fsm_automatic_run+0x290>)
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	601a      	str	r2, [r3, #0]
		break;
 800075a:	e18e      	b.n	8000a7a <fsm_automatic_run+0x37a>
	case AUTO_RED_GREEN:
		Red_On();
 800075c:	f7ff ff0a 	bl	8000574 <Red_On>
		Green1_On();
 8000760:	f7ff ff54 	bl	800060c <Green1_On>
		if(timer2_flag == 1)
 8000764:	4b8b      	ldr	r3, [pc, #556]	; (8000994 <fsm_automatic_run+0x294>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d105      	bne.n	8000778 <fsm_automatic_run+0x78>
		{
			count_down_show();
 800076c:	f000 fcfe 	bl	800116c <count_down_show>
			setTimer2(CYCLE);
 8000770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000774:	f7ff fd06 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 8000778:	4b87      	ldr	r3, [pc, #540]	; (8000998 <fsm_automatic_run+0x298>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d111      	bne.n	80007a4 <fsm_automatic_run+0xa4>
		{
			status1 = AUTO_RED_YELLOW;
 8000780:	4b80      	ldr	r3, [pc, #512]	; (8000984 <fsm_automatic_run+0x284>)
 8000782:	2202      	movs	r2, #2
 8000784:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 8000786:	4b85      	ldr	r3, [pc, #532]	; (800099c <fsm_automatic_run+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fcc2 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 8000790:	4b82      	ldr	r3, [pc, #520]	; (800099c <fsm_automatic_run+0x29c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fcd3 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 800079a:	4b80      	ldr	r3, [pc, #512]	; (800099c <fsm_automatic_run+0x29c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fcd4 	bl	800014c <setTimer1>
		}
		if(button_flag[1] == 1)
 80007a4:	4b7e      	ldr	r3, [pc, #504]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d10d      	bne.n	80007c8 <fsm_automatic_run+0xc8>
		{
			change_mode(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 fe1f 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 80007b2:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
			status1 = MAN_RED_GREEN;
 80007b8:	4b72      	ldr	r3, [pc, #456]	; (8000984 <fsm_automatic_run+0x284>)
 80007ba:	220b      	movs	r2, #11
 80007bc:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 80007be:	4b79      	ldr	r3, [pc, #484]	; (80009a4 <fsm_automatic_run+0x2a4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fcc2 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 80007c8:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d108      	bne.n	80007e2 <fsm_automatic_run+0xe2>
			button_flag[0]=0;
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
			change_mode(2);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f000 fe0a 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 80007dc:	4b69      	ldr	r3, [pc, #420]	; (8000984 <fsm_automatic_run+0x284>)
 80007de:	220f      	movs	r2, #15
 80007e0:	601a      	str	r2, [r3, #0]
		}
		if(button_flag[3] == 1)
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	f040 8140 	bne.w	8000a6c <fsm_automatic_run+0x36c>
		{
			status2 = AUTO_RED_GREEN;
 80007ec:	4b68      	ldr	r3, [pc, #416]	; (8000990 <fsm_automatic_run+0x290>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 80007f2:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <fsm_automatic_run+0x2a8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fce0 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 80007fc:	4b68      	ldr	r3, [pc, #416]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
			checking = 1;
 8000802:	4b6a      	ldr	r3, [pc, #424]	; (80009ac <fsm_automatic_run+0x2ac>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 8000808:	2014      	movs	r0, #20
 800080a:	f7ff fcf3 	bl	80001f4 <setTimer4>
		}
		break;
 800080e:	e12d      	b.n	8000a6c <fsm_automatic_run+0x36c>
	case AUTO_RED_YELLOW:
		Red_On();
 8000810:	f7ff feb0 	bl	8000574 <Red_On>
		Yellow1_On();
 8000814:	f7ff ff0a 	bl	800062c <Yellow1_On>
		if(timer2_flag == 1)
 8000818:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <fsm_automatic_run+0x294>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d105      	bne.n	800082c <fsm_automatic_run+0x12c>
		{
			count_down_show();
 8000820:	f000 fca4 	bl	800116c <count_down_show>

			setTimer2(CYCLE);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000828:	f7ff fcac 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 800082c:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <fsm_automatic_run+0x298>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d111      	bne.n	8000858 <fsm_automatic_run+0x158>
		{
			status1 = AUTO_GREEN_RED;
 8000834:	4b53      	ldr	r3, [pc, #332]	; (8000984 <fsm_automatic_run+0x284>)
 8000836:	2203      	movs	r2, #3
 8000838:	601a      	str	r2, [r3, #0]
			set_road1_time(green_time);
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <fsm_automatic_run+0x28c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc68 	bl	8001114 <set_road1_time>
			set_road2_time(red_time);
 8000844:	4b50      	ldr	r3, [pc, #320]	; (8000988 <fsm_automatic_run+0x288>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fc79 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 800084e:	4b4f      	ldr	r3, [pc, #316]	; (800098c <fsm_automatic_run+0x28c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fc7a 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 8000858:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d108      	bne.n	8000872 <fsm_automatic_run+0x172>
			button_flag[0]=0;
 8000860:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
			change_mode(2);
 8000866:	2002      	movs	r0, #2
 8000868:	f000 fdc2 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 800086c:	4b45      	ldr	r3, [pc, #276]	; (8000984 <fsm_automatic_run+0x284>)
 800086e:	220f      	movs	r2, #15
 8000870:	601a      	str	r2, [r3, #0]
		}
		if(button_flag[1] == 1)
 8000872:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d110      	bne.n	800089c <fsm_automatic_run+0x19c>
		{
			change_mode(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fdb8 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 8000880:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
			status1 = MAN_RED_YELLOW;
 8000886:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <fsm_automatic_run+0x284>)
 8000888:	220c      	movs	r2, #12
 800088a:	601a      	str	r2, [r3, #0]
			status2 = MAN_RED_YELLOW;
 800088c:	4b40      	ldr	r3, [pc, #256]	; (8000990 <fsm_automatic_run+0x290>)
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <fsm_automatic_run+0x2a4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fc58 	bl	800014c <setTimer1>
		}
		if(button_flag[3] == 1)
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	f040 80e5 	bne.w	8000a70 <fsm_automatic_run+0x370>
		{
			status2 = AUTO_RED_YELLOW;
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <fsm_automatic_run+0x290>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 80008ac:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <fsm_automatic_run+0x2a8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc83 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
			checking = 1;
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <fsm_automatic_run+0x2ac>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 80008c2:	2014      	movs	r0, #20
 80008c4:	f7ff fc96 	bl	80001f4 <setTimer4>
		}
		break;
 80008c8:	e0d2      	b.n	8000a70 <fsm_automatic_run+0x370>
	case AUTO_GREEN_RED:
		Red1_On();
 80008ca:	f7ff fe8f 	bl	80005ec <Red1_On>
		Green_On();
 80008ce:	f7ff fe65 	bl	800059c <Green_On>
		if(timer2_flag == 1)
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <fsm_automatic_run+0x294>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <fsm_automatic_run+0x1e6>
		{
			count_down_show();
 80008da:	f000 fc47 	bl	800116c <count_down_show>

			setTimer2(CYCLE);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f7ff fc4f 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <fsm_automatic_run+0x298>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d111      	bne.n	8000912 <fsm_automatic_run+0x212>
		{
			status1 = AUTO_YELLOW_RED;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <fsm_automatic_run+0x284>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <fsm_automatic_run+0x29c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fc0b 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <fsm_automatic_run+0x29c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fc1c 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <fsm_automatic_run+0x29c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc1d 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d108      	bne.n	800092c <fsm_automatic_run+0x22c>
			button_flag[0]=0;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
			change_mode(2);
 8000920:	2002      	movs	r0, #2
 8000922:	f000 fd65 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <fsm_automatic_run+0x284>)
 8000928:	220f      	movs	r2, #15
 800092a:	601a      	str	r2, [r3, #0]
				}
		if(button_flag[1] == 1)
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d110      	bne.n	8000956 <fsm_automatic_run+0x256>
		{
			change_mode(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fd5b 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
			status1 = MAN_GREEN_RED;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <fsm_automatic_run+0x284>)
 8000942:	220d      	movs	r2, #13
 8000944:	601a      	str	r2, [r3, #0]
			status2 = MAN_GREEN_RED;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <fsm_automatic_run+0x290>)
 8000948:	220d      	movs	r2, #13
 800094a:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <fsm_automatic_run+0x2a4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fbfb 	bl	800014c <setTimer1>
		}
		if(button_flag[3] == 1)
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	2b01      	cmp	r3, #1
 800095c:	f040 808a 	bne.w	8000a74 <fsm_automatic_run+0x374>
		{
			status2 = AUTO_GREEN_RED;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <fsm_automatic_run+0x290>)
 8000962:	2203      	movs	r2, #3
 8000964:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <fsm_automatic_run+0x2a8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc26 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
			checking = 1;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <fsm_automatic_run+0x2ac>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 800097c:	2014      	movs	r0, #20
 800097e:	f7ff fc39 	bl	80001f4 <setTimer4>
		}
		break;
 8000982:	e077      	b.n	8000a74 <fsm_automatic_run+0x374>
 8000984:	200000b4 	.word	0x200000b4
 8000988:	200000c4 	.word	0x200000c4
 800098c:	200000bc 	.word	0x200000bc
 8000990:	200000b8 	.word	0x200000b8
 8000994:	20000094 	.word	0x20000094
 8000998:	2000008c 	.word	0x2000008c
 800099c:	200000c0 	.word	0x200000c0
 80009a0:	20000108 	.word	0x20000108
 80009a4:	200000c8 	.word	0x200000c8
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	200000d8 	.word	0x200000d8
	case AUTO_YELLOW_RED:
		Red1_On();
 80009b0:	f7ff fe1c 	bl	80005ec <Red1_On>
		Yellow_On();
 80009b4:	f7ff fe06 	bl	80005c4 <Yellow_On>
		if(timer2_flag == 1)
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <fsm_automatic_run+0x380>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <fsm_automatic_run+0x2cc>
		{
			count_down_show();
 80009c0:	f000 fbd4 	bl	800116c <count_down_show>

			setTimer2(CYCLE);
 80009c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c8:	f7ff fbdc 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 80009cc:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <fsm_automatic_run+0x384>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d111      	bne.n	80009f8 <fsm_automatic_run+0x2f8>
		{
			status1 = AUTO_RED_GREEN;
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <fsm_automatic_run+0x388>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
			set_road1_time(red_time);
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <fsm_automatic_run+0x38c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fb98 	bl	8001114 <set_road1_time>
			set_road2_time(green_time);
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <fsm_automatic_run+0x390>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 fba9 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <fsm_automatic_run+0x390>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fbaa 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <fsm_automatic_run+0x394>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <fsm_automatic_run+0x312>
			button_flag[0]=0;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
			change_mode(2);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 fcf2 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <fsm_automatic_run+0x388>)
 8000a0e:	220f      	movs	r2, #15
 8000a10:	601a      	str	r2, [r3, #0]
				}
		if(button_flag[1] == 1)
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d110      	bne.n	8000a3c <fsm_automatic_run+0x33c>
		{
			change_mode(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fce8 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
			status1 = MAN_YELLOW_RED;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <fsm_automatic_run+0x388>)
 8000a28:	220e      	movs	r2, #14
 8000a2a:	601a      	str	r2, [r3, #0]
			status2 = MAN_YELLOW_RED;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <fsm_automatic_run+0x398>)
 8000a2e:	220e      	movs	r2, #14
 8000a30:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <fsm_automatic_run+0x39c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fb88 	bl	800014c <setTimer1>
		}
		if(button_flag[3] == 1)
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d119      	bne.n	8000a78 <fsm_automatic_run+0x378>
		{
			status2 = AUTO_YELLOW_RED;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <fsm_automatic_run+0x398>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <fsm_automatic_run+0x3a0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbb4 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
			checking = 1;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <fsm_automatic_run+0x3a4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 8000a60:	2014      	movs	r0, #20
 8000a62:	f7ff fbc7 	bl	80001f4 <setTimer4>
		}
		break;
 8000a66:	e007      	b.n	8000a78 <fsm_automatic_run+0x378>
	default:
		break;
 8000a68:	bf00      	nop
 8000a6a:	e006      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e004      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a70:	bf00      	nop
 8000a72:	e002      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a74:	bf00      	nop
 8000a76:	e000      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a78:	bf00      	nop
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000094 	.word	0x20000094
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	200000b4 	.word	0x200000b4
 8000a8c:	200000c4 	.word	0x200000c4
 8000a90:	200000bc 	.word	0x200000bc
 8000a94:	20000108 	.word	0x20000108
 8000a98:	200000b8 	.word	0x200000b8
 8000a9c:	200000c8 	.word	0x200000c8
 8000aa0:	200000cc 	.word	0x200000cc
 8000aa4:	200000d8 	.word	0x200000d8

08000aa8 <fsm_manual_run>:
#include "fsm_manual.h"
#include "input_reading.h"
#include "display_control.h"

void fsm_manual_run()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	switch(status1)
 8000aac:	4b78      	ldr	r3, [pc, #480]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3b0b      	subs	r3, #11
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	f200 80e0 	bhi.w	8000c78 <fsm_manual_run+0x1d0>
 8000ab8:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <fsm_manual_run+0x18>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad1 	.word	0x08000ad1
 8000ac4:	08000b39 	.word	0x08000b39
 8000ac8:	08000ba5 	.word	0x08000ba5
 8000acc:	08000c0f 	.word	0x08000c0f
	{
	case MAN_RED_GREEN:
		Green1_On();
 8000ad0:	f7ff fd9c 	bl	800060c <Green1_On>
		if(timer1_flag == 1)
 8000ad4:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d114      	bne.n	8000b06 <fsm_manual_run+0x5e>
		{
			change_mode(0);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fc87 	bl	80013f0 <change_mode>
			status1 = AUTO_RED_GREEN;
 8000ae2:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
			set_road1_time(red_time);
 8000ae8:	4b6b      	ldr	r3, [pc, #428]	; (8000c98 <fsm_manual_run+0x1f0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fb11 	bl	8001114 <set_road1_time>
			set_road2_time(green_time);
 8000af2:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fb22 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 8000afc:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb23 	bl	800014c <setTimer1>
		}
		if(button_flag[1] == 1)
 8000b06:	4b66      	ldr	r3, [pc, #408]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	f040 80b6 	bne.w	8000c7c <fsm_manual_run+0x1d4>
		{
			button_flag[1]=0;
 8000b10:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
			status1 = MAN_RED_YELLOW;
 8000b16:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000b18:	220c      	movs	r2, #12
 8000b1a:	601a      	str	r2, [r3, #0]
			status2 = MAN_RED_YELLOW;
 8000b1c:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000b22:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb48 	bl	80001bc <setTimer3>
			//Set timer1 here to exit manual mode when time out
			setTimer1(timeout_duration);
 8000b2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb0b 	bl	800014c <setTimer1>
		}
		break;
 8000b36:	e0a1      	b.n	8000c7c <fsm_manual_run+0x1d4>
	case MAN_RED_YELLOW:
		Red_On();
 8000b38:	f7ff fd1c 	bl	8000574 <Red_On>
		Yellow1_On();
 8000b3c:	f7ff fd76 	bl	800062c <Yellow1_On>
		if(timer1_flag == 1)
 8000b40:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d114      	bne.n	8000b72 <fsm_manual_run+0xca>
		{
			change_mode(0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fc51 	bl	80013f0 <change_mode>
			status1 = AUTO_RED_YELLOW;
 8000b4e:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 8000b54:	4b55      	ldr	r3, [pc, #340]	; (8000cac <fsm_manual_run+0x204>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fadb 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <fsm_manual_run+0x204>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 faec 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 8000b68:	4b50      	ldr	r3, [pc, #320]	; (8000cac <fsm_manual_run+0x204>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff faed 	bl	800014c <setTimer1>
		}
		if(button_flag[1]  == 1)
 8000b72:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	f040 8082 	bne.w	8000c80 <fsm_manual_run+0x1d8>
		{
			button_flag[1]=0;
 8000b7c:	4b48      	ldr	r3, [pc, #288]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
			status1=MAN_GREEN_RED;
 8000b82:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000b84:	220d      	movs	r2, #13
 8000b86:	601a      	str	r2, [r3, #0]
			status2=MAN_GREEN_RED;
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000b8a:	220d      	movs	r2, #13
 8000b8c:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fb12 	bl	80001bc <setTimer3>
			setTimer1(timeout_duration);
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fad5 	bl	800014c <setTimer1>
		}
		break;
 8000ba2:	e06d      	b.n	8000c80 <fsm_manual_run+0x1d8>
	case MAN_GREEN_RED:
		Red1_On();
 8000ba4:	f7ff fd22 	bl	80005ec <Red1_On>
		Green_On();
 8000ba8:	f7ff fcf8 	bl	800059c <Green_On>
		if(timer1_flag == 1)
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d114      	bne.n	8000bde <fsm_manual_run+0x136>
		{
			change_mode(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fc1b 	bl	80013f0 <change_mode>
			status1=AUTO_GREEN_RED;
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	601a      	str	r2, [r3, #0]
			set_road1_time(green_time);
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 faa5 	bl	8001114 <set_road1_time>
			set_road2_time(red_time);
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <fsm_manual_run+0x1f0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fab6 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fab7 	bl	800014c <setTimer1>
		}
		if(button_flag[1] == 1)
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d14e      	bne.n	8000c84 <fsm_manual_run+0x1dc>
		{
			button_flag[1]=0;
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
			status1=MAN_YELLOW_RED;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000bee:	220e      	movs	r2, #14
 8000bf0:	601a      	str	r2, [r3, #0]
			status2=MAN_YELLOW_RED;
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000bf4:	220e      	movs	r2, #14
 8000bf6:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <fsm_manual_run+0x200>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fadd 	bl	80001bc <setTimer3>
			setTimer1(timeout_duration);
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <fsm_manual_run+0x200>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faa0 	bl	800014c <setTimer1>
		}
		break;
 8000c0c:	e03a      	b.n	8000c84 <fsm_manual_run+0x1dc>
	case MAN_YELLOW_RED:
		Red1_On();
 8000c0e:	f7ff fced 	bl	80005ec <Red1_On>
		Yellow_On();
 8000c12:	f7ff fcd7 	bl	80005c4 <Yellow_On>
		if(timer1_flag == 1)
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d114      	bne.n	8000c48 <fsm_manual_run+0x1a0>
		{
			change_mode(0);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fbe6 	bl	80013f0 <change_mode>
			status1=AUTO_YELLOW_RED;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <fsm_manual_run+0x204>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fa70 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <fsm_manual_run+0x204>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fa81 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <fsm_manual_run+0x204>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fa82 	bl	800014c <setTimer1>
		}
		if(button_flag[1]  == 1)
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d11b      	bne.n	8000c88 <fsm_manual_run+0x1e0>
		{
			button_flag[1]=0;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
			status1=MAN_RED_GREEN;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000c58:	220b      	movs	r2, #11
 8000c5a:	601a      	str	r2, [r3, #0]
			status2=MAN_RED_GREEN;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000c5e:	220b      	movs	r2, #11
 8000c60:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <fsm_manual_run+0x200>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff faa8 	bl	80001bc <setTimer3>
			setTimer1(timeout_duration);
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <fsm_manual_run+0x200>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fa6b 	bl	800014c <setTimer1>
		}
		break;
 8000c76:	e007      	b.n	8000c88 <fsm_manual_run+0x1e0>
	default:
		break;
 8000c78:	bf00      	nop
 8000c7a:	e006      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c7c:	bf00      	nop
 8000c7e:	e004      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c80:	bf00      	nop
 8000c82:	e002      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c84:	bf00      	nop
 8000c86:	e000      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000b4 	.word	0x200000b4
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	200000c4 	.word	0x200000c4
 8000c9c:	200000bc 	.word	0x200000bc
 8000ca0:	20000108 	.word	0x20000108
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	200000c8 	.word	0x200000c8
 8000cac:	200000c0 	.word	0x200000c0

08000cb0 <fsm_pedestrian>:
#include "fsm_pedestrian.h"
#include "display_control.h"
int buzz_state = 0;

void fsm_pedestrian()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	if(checking == 1)
 8000cb4:	4b98      	ldr	r3, [pc, #608]	; (8000f18 <fsm_pedestrian+0x268>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d10c      	bne.n	8000cd6 <fsm_pedestrian+0x26>
	{
		if(status2 != status1)
 8000cbc:	4b97      	ldr	r3, [pc, #604]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b97      	ldr	r3, [pc, #604]	; (8000f20 <fsm_pedestrian+0x270>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d002      	beq.n	8000cce <fsm_pedestrian+0x1e>
		{
			sound_loud(OFF);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fbe3 	bl	8001494 <sound_loud>
		}
		status2 = status1;
 8000cce:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <fsm_pedestrian+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a92      	ldr	r2, [pc, #584]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000cd4:	6013      	str	r3, [r2, #0]
	}
	switch(status2)
 8000cd6:	4b91      	ldr	r3, [pc, #580]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2b0d      	cmp	r3, #13
 8000cde:	f200 8110 	bhi.w	8000f02 <fsm_pedestrian+0x252>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <fsm_pedestrian+0x38>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d21 	.word	0x08000d21
 8000cec:	08000d4f 	.word	0x08000d4f
 8000cf0:	08000d77 	.word	0x08000d77
 8000cf4:	08000deb 	.word	0x08000deb
 8000cf8:	08000f03 	.word	0x08000f03
 8000cfc:	08000f03 	.word	0x08000f03
 8000d00:	08000f03 	.word	0x08000f03
 8000d04:	08000f03 	.word	0x08000f03
 8000d08:	08000f03 	.word	0x08000f03
 8000d0c:	08000f03 	.word	0x08000f03
 8000d10:	08000e5f 	.word	0x08000e5f
 8000d14:	08000e85 	.word	0x08000e85
 8000d18:	08000eb1 	.word	0x08000eb1
 8000d1c:	08000ed7 	.word	0x08000ed7
	{
	case AUTO_RED_GREEN :
		if(timer3_flag == 1)
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <fsm_pedestrian+0x274>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10f      	bne.n	8000d48 <fsm_pedestrian+0x98>
		{
			sound_loud(OFF);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 fbb3 	bl	8001494 <sound_loud>
			Reset_p();
 8000d2e:	f7ff fcd3 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000d32:	4b7a      	ldr	r3, [pc, #488]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000d3a:	4b77      	ldr	r3, [pc, #476]	; (8000f18 <fsm_pedestrian+0x268>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fa57 	bl	80001f4 <setTimer4>
		}
		else Redp_On();
		break;
 8000d46:	e0e5      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Redp_On();
 8000d48:	f7ff fc80 	bl	800064c <Redp_On>
		break;
 8000d4c:	e0e2      	b.n	8000f14 <fsm_pedestrian+0x264>
	case AUTO_RED_YELLOW:
		if(timer3_flag == 1)
 8000d4e:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <fsm_pedestrian+0x274>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10c      	bne.n	8000d70 <fsm_pedestrian+0xc0>
		{
			sound_loud(OFF);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fb9c 	bl	8001494 <sound_loud>
			Reset_p();
 8000d5c:	f7ff fcbc 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000d60:	4b6e      	ldr	r3, [pc, #440]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fa43 	bl	80001f4 <setTimer4>
		}
		else Redp_On();
		break;
 8000d6e:	e0d1      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Redp_On();
 8000d70:	f7ff fc6c 	bl	800064c <Redp_On>
		break;
 8000d74:	e0ce      	b.n	8000f14 <fsm_pedestrian+0x264>
	case AUTO_GREEN_RED:
		if(count2 <= 5 && timer4_flag == 1)
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <fsm_pedestrian+0x278>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	dc1e      	bgt.n	8000dbc <fsm_pedestrian+0x10c>
 8000d7e:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <fsm_pedestrian+0x27c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11a      	bne.n	8000dbc <fsm_pedestrian+0x10c>
		{
				if(buzz_state == 1)
 8000d86:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <fsm_pedestrian+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d107      	bne.n	8000d9e <fsm_pedestrian+0xee>
				{
					sound_loud(ON);
 8000d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d92:	f000 fb7f 	bl	8001494 <sound_loud>
					buzz_state = 0;
 8000d96:	4b66      	ldr	r3, [pc, #408]	; (8000f30 <fsm_pedestrian+0x280>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e005      	b.n	8000daa <fsm_pedestrian+0xfa>
				}
				else
				{
					sound_loud(OFF);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 fb78 	bl	8001494 <sound_loud>
					buzz_state = 1;
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <fsm_pedestrian+0x280>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
				}
				setTimer4(count2*50 + 10);
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <fsm_pedestrian+0x278>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2232      	movs	r2, #50	; 0x32
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	330a      	adds	r3, #10
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fa1c 	bl	80001f4 <setTimer4>
		}
		if(timer3_flag == 1)
 8000dbc:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <fsm_pedestrian+0x274>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10f      	bne.n	8000de4 <fsm_pedestrian+0x134>
		{
			sound_loud(OFF);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fb65 	bl	8001494 <sound_loud>
			Reset_p();
 8000dca:	f7ff fc85 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000dd6:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <fsm_pedestrian+0x268>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fa09 	bl	80001f4 <setTimer4>
		}
		else Greenp_On();
		break;
 8000de2:	e097      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Greenp_On();
 8000de4:	f7ff fc46 	bl	8000674 <Greenp_On>
		break;
 8000de8:	e094      	b.n	8000f14 <fsm_pedestrian+0x264>
	case AUTO_YELLOW_RED:
		if(count2<= 5 && timer4_flag == 1)
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <fsm_pedestrian+0x278>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	dc1e      	bgt.n	8000e30 <fsm_pedestrian+0x180>
 8000df2:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <fsm_pedestrian+0x27c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d11a      	bne.n	8000e30 <fsm_pedestrian+0x180>
		{
				if(buzz_state == 1)
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <fsm_pedestrian+0x280>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d107      	bne.n	8000e12 <fsm_pedestrian+0x162>
				{
					sound_loud(ON);
 8000e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e06:	f000 fb45 	bl	8001494 <sound_loud>
					buzz_state = 0;
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <fsm_pedestrian+0x280>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e005      	b.n	8000e1e <fsm_pedestrian+0x16e>
				}
				else
				{
					sound_loud(OFF);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 fb3e 	bl	8001494 <sound_loud>
					buzz_state = 1;
 8000e18:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <fsm_pedestrian+0x280>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
				}
				setTimer4(count2*50 + 10);
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <fsm_pedestrian+0x278>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2232      	movs	r2, #50	; 0x32
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	330a      	adds	r3, #10
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff f9e2 	bl	80001f4 <setTimer4>
		}
		if(timer3_flag == 1)
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <fsm_pedestrian+0x274>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10f      	bne.n	8000e58 <fsm_pedestrian+0x1a8>
		{
			sound_loud(OFF);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 fb2b 	bl	8001494 <sound_loud>
			Reset_p();
 8000e3e:	f7ff fc4b 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <fsm_pedestrian+0x268>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff f9cf 	bl	80001f4 <setTimer4>
		}
		else Greenp_On();
		break;
 8000e56:	e05d      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Greenp_On();
 8000e58:	f7ff fc0c 	bl	8000674 <Greenp_On>
		break;
 8000e5c:	e05a      	b.n	8000f14 <fsm_pedestrian+0x264>
	case MAN_RED_GREEN:
		Redp_On();
 8000e5e:	f7ff fbf5 	bl	800064c <Redp_On>
		if(timer3_flag == 1)
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <fsm_pedestrian+0x274>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d14d      	bne.n	8000f06 <fsm_pedestrian+0x256>
		{
			sound_loud(OFF);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fb12 	bl	8001494 <sound_loud>
			Reset_p();
 8000e70:	f7ff fc32 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff f9b9 	bl	80001f4 <setTimer4>
		}
		break;
 8000e82:	e040      	b.n	8000f06 <fsm_pedestrian+0x256>
	case MAN_RED_YELLOW:
		Redp_On();
 8000e84:	f7ff fbe2 	bl	800064c <Redp_On>
		if(timer3_flag == 1)
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <fsm_pedestrian+0x274>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d13c      	bne.n	8000f0a <fsm_pedestrian+0x25a>
		{
			sound_loud(OFF);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 faff 	bl	8001494 <sound_loud>
			Reset_p();
 8000e96:	f7ff fc1f 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <fsm_pedestrian+0x268>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff f9a3 	bl	80001f4 <setTimer4>
		}
		break;
 8000eae:	e02c      	b.n	8000f0a <fsm_pedestrian+0x25a>
	case MAN_GREEN_RED:
		Greenp_On();
 8000eb0:	f7ff fbe0 	bl	8000674 <Greenp_On>
		if(timer3_flag == 1)
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <fsm_pedestrian+0x274>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d128      	bne.n	8000f0e <fsm_pedestrian+0x25e>
		{
			sound_loud(OFF);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fae9 	bl	8001494 <sound_loud>
			Reset_p();
 8000ec2:	f7ff fc09 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff f990 	bl	80001f4 <setTimer4>
		}
		break;
 8000ed4:	e01b      	b.n	8000f0e <fsm_pedestrian+0x25e>
	case MAN_YELLOW_RED:
		Greenp_On();
 8000ed6:	f7ff fbcd 	bl	8000674 <Greenp_On>
		if(timer3_flag == 1)
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <fsm_pedestrian+0x274>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d117      	bne.n	8000f12 <fsm_pedestrian+0x262>
		{
			sound_loud(OFF);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fad6 	bl	8001494 <sound_loud>
			Reset_p();
 8000ee8:	f7ff fbf6 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000eee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef2:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <fsm_pedestrian+0x268>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff f97a 	bl	80001f4 <setTimer4>
		}
		break;
 8000f00:	e007      	b.n	8000f12 <fsm_pedestrian+0x262>

	default: break;
 8000f02:	bf00      	nop
 8000f04:	e006      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f06:	bf00      	nop
 8000f08:	e004      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f0a:	bf00      	nop
 8000f0c:	e002      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f0e:	bf00      	nop
 8000f10:	e000      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f12:	bf00      	nop
}
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000d8 	.word	0x200000d8
 8000f1c:	200000b8 	.word	0x200000b8
 8000f20:	200000b4 	.word	0x200000b4
 8000f24:	2000009c 	.word	0x2000009c
 8000f28:	200000d4 	.word	0x200000d4
 8000f2c:	200000a4 	.word	0x200000a4
 8000f30:	200000ac 	.word	0x200000ac

08000f34 <fsm_tunning_run>:
#include "input_reading.h"
#include "fsm_tunning.h"
#include "display_control.h"


void fsm_tunning_run(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	switch (status1){
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <fsm_tunning_run+0x130>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d002      	beq.n	8000f46 <fsm_tunning_run+0x12>
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d043      	beq.n	8000fcc <fsm_tunning_run+0x98>

		}
		break;

	}
}
 8000f44:	e08b      	b.n	800105e <fsm_tunning_run+0x12a>
		Green_On();
 8000f46:	f7ff fb29 	bl	800059c <Green_On>
		Green1_On();
 8000f4a:	f7ff fb5f 	bl	800060c <Green1_On>
		if(button_flag[0]==1)
 8000f4e:	4b46      	ldr	r3, [pc, #280]	; (8001068 <fsm_tunning_run+0x134>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <fsm_tunning_run+0x2e>
			button_flag[0]=0;
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <fsm_tunning_run+0x134>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
			status1=TUNNING_YELLOW;
 8000f5c:	4b41      	ldr	r3, [pc, #260]	; (8001064 <fsm_tunning_run+0x130>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	601a      	str	r2, [r3, #0]
		if(button_flag[1]==1)
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <fsm_tunning_run+0x134>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d111      	bne.n	8000f8e <fsm_tunning_run+0x5a>
			button_flag[1]=0;
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <fsm_tunning_run+0x134>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
			output_time(0,green_time+1000);
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <fsm_tunning_run+0x138>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f9fc 	bl	8001378 <output_time>
			set_green_time(green_time+1000);
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <fsm_tunning_run+0x138>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f873 	bl	8001074 <set_green_time>
		if(button_flag[2]==1)
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <fsm_tunning_run+0x134>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d160      	bne.n	8001058 <fsm_tunning_run+0x124>
			button_flag[2]=0;
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <fsm_tunning_run+0x134>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
			if(green_time > 1000)
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <fsm_tunning_run+0x138>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa4:	dd0f      	ble.n	8000fc6 <fsm_tunning_run+0x92>
				output_time(0,green_time-1000);
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <fsm_tunning_run+0x138>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f9e1 	bl	8001378 <output_time>
				set_green_time(green_time-1000);
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <fsm_tunning_run+0x138>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f858 	bl	8001074 <set_green_time>
	break;
 8000fc4:	e048      	b.n	8001058 <fsm_tunning_run+0x124>
				output_error();
 8000fc6:	f000 f9bb 	bl	8001340 <output_error>
	break;
 8000fca:	e045      	b.n	8001058 <fsm_tunning_run+0x124>
		Yellow_On();
 8000fcc:	f7ff fafa 	bl	80005c4 <Yellow_On>
		Yellow1_On();
 8000fd0:	f7ff fb2c 	bl	800062c <Yellow1_On>
		if(button_flag[0]==1){
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <fsm_tunning_run+0x134>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <fsm_tunning_run+0xba>
			button_flag[0]=0;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <fsm_tunning_run+0x134>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
			change_mode(0);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fa04 	bl	80013f0 <change_mode>
			status1=INIT;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <fsm_tunning_run+0x130>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
		if(button_flag[1]==1)
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <fsm_tunning_run+0x134>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d111      	bne.n	800101a <fsm_tunning_run+0xe6>
			button_flag[1]=0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <fsm_tunning_run+0x134>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
			output_time(1,yellow_time+1000);
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <fsm_tunning_run+0x13c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001004:	4619      	mov	r1, r3
 8001006:	2001      	movs	r0, #1
 8001008:	f000 f9b6 	bl	8001378 <output_time>
			set_yellow_time(yellow_time+1000);
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <fsm_tunning_run+0x13c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f847 	bl	80010a8 <set_yellow_time>
		if(button_flag[2]==1)
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <fsm_tunning_run+0x134>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d11c      	bne.n	800105c <fsm_tunning_run+0x128>
			button_flag[2]=0;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <fsm_tunning_run+0x134>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
			if(yellow_time > 1000)
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <fsm_tunning_run+0x13c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001030:	dd0f      	ble.n	8001052 <fsm_tunning_run+0x11e>
				output_time(1,yellow_time-1000);
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <fsm_tunning_run+0x13c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800103a:	4619      	mov	r1, r3
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f99b 	bl	8001378 <output_time>
				set_yellow_time(yellow_time-1000);
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <fsm_tunning_run+0x13c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f82c 	bl	80010a8 <set_yellow_time>
		break;
 8001050:	e004      	b.n	800105c <fsm_tunning_run+0x128>
				output_error();
 8001052:	f000 f975 	bl	8001340 <output_error>
		break;
 8001056:	e001      	b.n	800105c <fsm_tunning_run+0x128>
	break;
 8001058:	bf00      	nop
 800105a:	e000      	b.n	800105e <fsm_tunning_run+0x12a>
		break;
 800105c:	bf00      	nop
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000b4 	.word	0x200000b4
 8001068:	20000108 	.word	0x20000108
 800106c:	200000bc 	.word	0x200000bc
 8001070:	200000c0 	.word	0x200000c0

08001074 <set_green_time>:
//int sound_flag = 0;
int checking = 0;

//Function for setting led time
void set_green_time(int time)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	green_time = time;
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <set_green_time+0x28>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
	red_time = green_time + yellow_time;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <set_green_time+0x28>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <set_green_time+0x2c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <set_green_time+0x30>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200000bc 	.word	0x200000bc
 80010a0:	200000c0 	.word	0x200000c0
 80010a4:	200000c4 	.word	0x200000c4

080010a8 <set_yellow_time>:
void set_yellow_time(int time)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	yellow_time = time;
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <set_yellow_time+0x28>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
	red_time = green_time + yellow_time;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <set_yellow_time+0x2c>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <set_yellow_time+0x28>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <set_yellow_time+0x30>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200000c0 	.word	0x200000c0
 80010d4:	200000bc 	.word	0x200000bc
 80010d8:	200000c4 	.word	0x200000c4

080010dc <set_timeout_duration>:
void set_timeout_duration(int time)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	timeout_duration = time;
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <set_timeout_duration+0x18>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	200000c8 	.word	0x200000c8

080010f8 <set_pedestrian_duration>:
void set_pedestrian_duration(int time)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	pedestrian_duration = time;
 8001100:	4a03      	ldr	r2, [pc, #12]	; (8001110 <set_pedestrian_duration+0x18>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200000cc 	.word	0x200000cc

08001114 <set_road1_time>:
//Function for setting display time in terminal
void set_road1_time(int time)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	count1 = time/CYCLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <set_road1_time+0x24>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1192      	asrs	r2, r2, #6
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <set_road1_time+0x28>)
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	10624dd3 	.word	0x10624dd3
 800113c:	200000d0 	.word	0x200000d0

08001140 <set_road2_time>:
void set_road2_time(int time)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	count2 = time/CYCLE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <set_road2_time+0x24>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1192      	asrs	r2, r2, #6
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <set_road2_time+0x28>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	10624dd3 	.word	0x10624dd3
 8001168:	200000d4 	.word	0x200000d4

0800116c <count_down_show>:
void count_down_show()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	display_time(count1, count2);
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <count_down_show+0x3c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <count_down_show+0x40>)
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f96c 	bl	8001458 <display_time>
	if(count1 > 0)
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <count_down_show+0x3c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd04      	ble.n	8001192 <count_down_show+0x26>
		count1-= 1;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <count_down_show+0x3c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <count_down_show+0x3c>)
 8001190:	6013      	str	r3, [r2, #0]
	if(count2 > 0)
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <count_down_show+0x40>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd04      	ble.n	80011a4 <count_down_show+0x38>
		count2-= 1;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <count_down_show+0x40>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a02      	ldr	r2, [pc, #8]	; (80011ac <count_down_show+0x40>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	200000d4 	.word	0x200000d4

080011b0 <subkeyProcess>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

//unsigned char is_button_pressed_1s()

void subkeyProcess(unsigned char i)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <subkeyProcess+0x20>)
 80011be:	2101      	movs	r1, #1
 80011c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000108 	.word	0x20000108

080011d4 <button_reading>:
void button_reading()
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	e097      	b.n	8001310 <button_reading+0x13c>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	494f      	ldr	r1, [pc, #316]	; (8001324 <button_reading+0x150>)
 80011e6:	5c89      	ldrb	r1, [r1, r2]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <button_reading+0x154>)
 80011ea:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	494e      	ldr	r1, [pc, #312]	; (800132c <button_reading+0x158>)
 80011f2:	5c89      	ldrb	r1, [r1, r2]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <button_reading+0x150>)
 80011f6:	54d1      	strb	r1, [r2, r3]
		switch (i)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d832      	bhi.n	8001264 <button_reading+0x90>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <button_reading+0x30>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	08001229 	.word	0x08001229
 800120c:	0800123d 	.word	0x0800123d
 8001210:	08001251 	.word	0x08001251
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8001214:	79fc      	ldrb	r4, [r7, #7]
 8001216:	2102      	movs	r1, #2
 8001218:	4845      	ldr	r0, [pc, #276]	; (8001330 <button_reading+0x15c>)
 800121a:	f000 ffe7 	bl	80021ec <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <button_reading+0x158>)
 8001224:	551a      	strb	r2, [r3, r4]
				break;
 8001226:	e022      	b.n	800126e <button_reading+0x9a>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 8001228:	79fc      	ldrb	r4, [r7, #7]
 800122a:	2110      	movs	r1, #16
 800122c:	4840      	ldr	r0, [pc, #256]	; (8001330 <button_reading+0x15c>)
 800122e:	f000 ffdd 	bl	80021ec <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <button_reading+0x158>)
 8001238:	551a      	strb	r2, [r3, r4]
				break;
 800123a:	e018      	b.n	800126e <button_reading+0x9a>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 800123c:	79fc      	ldrb	r4, [r7, #7]
 800123e:	2101      	movs	r1, #1
 8001240:	483c      	ldr	r0, [pc, #240]	; (8001334 <button_reading+0x160>)
 8001242:	f000 ffd3 	bl	80021ec <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <button_reading+0x158>)
 800124c:	551a      	strb	r2, [r3, r4]
				break;
 800124e:	e00e      	b.n	800126e <button_reading+0x9a>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8001250:	79fc      	ldrb	r4, [r7, #7]
 8001252:	2101      	movs	r1, #1
 8001254:	4836      	ldr	r0, [pc, #216]	; (8001330 <button_reading+0x15c>)
 8001256:	f000 ffc9 	bl	80021ec <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <button_reading+0x158>)
 8001260:	551a      	strb	r2, [r3, r4]
				break;
 8001262:	e004      	b.n	800126e <button_reading+0x9a>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <button_reading+0x158>)
 8001268:	2101      	movs	r1, #1
 800126a:	54d1      	strb	r1, [r2, r3]
				break;
 800126c:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <button_reading+0x154>)
 8001272:	5cd2      	ldrb	r2, [r2, r3]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	492b      	ldr	r1, [pc, #172]	; (8001324 <button_reading+0x150>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	429a      	cmp	r2, r3
 800127c:	d145      	bne.n	800130a <button_reading+0x136>
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <button_reading+0x150>)
 8001282:	5cd2      	ldrb	r2, [r2, r3]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4929      	ldr	r1, [pc, #164]	; (800132c <button_reading+0x158>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
 800128a:	429a      	cmp	r2, r3
 800128c:	d13d      	bne.n	800130a <button_reading+0x136>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])//button is pressed only
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <button_reading+0x164>)
 8001292:	5cd2      	ldrb	r2, [r2, r3]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4925      	ldr	r1, [pc, #148]	; (800132c <button_reading+0x158>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	429a      	cmp	r2, r3
 800129c:	d015      	beq.n	80012ca <button_reading+0xf6>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4922      	ldr	r1, [pc, #136]	; (800132c <button_reading+0x158>)
 80012a4:	5c89      	ldrb	r1, [r1, r2]
 80012a6:	4a24      	ldr	r2, [pc, #144]	; (8001338 <button_reading+0x164>)
 80012a8:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4a22      	ldr	r2, [pc, #136]	; (8001338 <button_reading+0x164>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d12a      	bne.n	800130a <button_reading+0x136>
				{
					counterForButtonPress1s[i] = DURATION_FOR_PRESSING;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <button_reading+0x168>)
 80012b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff74 	bl	80011b0 <subkeyProcess>
 80012c8:	e01f      	b.n	800130a <button_reading+0x136>
				}
			}
			else// button is hold
			{
				if(i!=0)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01c      	beq.n	800130a <button_reading+0x136>
				{
					counterForButtonPress1s[i]--;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <button_reading+0x168>)
 80012d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012d8:	3a01      	subs	r2, #1
 80012da:	b291      	uxth	r1, r2
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <button_reading+0x168>)
 80012de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress1s[i] == 0)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <button_reading+0x168>)
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <button_reading+0x136>
					{
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <button_reading+0x164>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <button_reading+0x136>
						{
							counterForButtonPress1s[i] = DURATION_FOR_HOLDING;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <button_reading+0x168>)
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							subkeyProcess(i);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff53 	bl	80011b0 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	3301      	adds	r3, #1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b03      	cmp	r3, #3
 8001314:	f67f af64 	bls.w	80011e0 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	200000e4 	.word	0x200000e4
 8001328:	200000e0 	.word	0x200000e0
 800132c:	200000e8 	.word	0x200000e8
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	200000dc 	.word	0x200000dc
 800133c:	200000ec 	.word	0x200000ec

08001340 <output_error>:
{
	char str[30];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%---------------\n\r"), 1000);
}
void output_error(int temp)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	char str[30];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d\n\r", temp), 1000);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <output_error+0x30>)
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fda3 	bl	8003e9c <siprintf>
 8001356:	4603      	mov	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	f107 0108 	add.w	r1, r7, #8
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <output_error+0x34>)
 8001364:	f002 fb37 	bl	80039d6 <HAL_UART_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	080045bc 	.word	0x080045bc
 8001374:	200001a8 	.word	0x200001a8

08001378 <output_time>:
void output_time(int index, int time)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	char str[30];
	char arr[2][20] = {"Green time","Yellow time"};
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <output_time+0x68>)
 8001384:	f107 0408 	add.w	r4, r7, #8
 8001388:	461d      	mov	r5, r3
 800138a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001396:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s: %d\n\r",arr[index],time/1000), 1000);
 800139a:	f107 0108 	add.w	r1, r7, #8
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4419      	add	r1, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <output_time+0x6c>)
 80013ae:	fb82 0203 	smull	r0, r2, r2, r3
 80013b2:	1192      	asrs	r2, r2, #6
 80013b4:	17db      	asrs	r3, r3, #31
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013bc:	460a      	mov	r2, r1
 80013be:	490a      	ldr	r1, [pc, #40]	; (80013e8 <output_time+0x70>)
 80013c0:	f002 fd6c 	bl	8003e9c <siprintf>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <output_time+0x74>)
 80013d2:	f002 fb00 	bl	80039d6 <HAL_UART_Transmit>
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	; 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}
 80013de:	bf00      	nop
 80013e0:	080045e4 	.word	0x080045e4
 80013e4:	10624dd3 	.word	0x10624dd3
 80013e8:	080045d8 	.word	0x080045d8
 80013ec:	200001a8 	.word	0x200001a8

080013f0 <change_mode>:
void change_mode(int index)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b09a      	sub	sp, #104	; 0x68
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	char arr[3][20] = {"Auto mode","Manual mode", "Tuning mode"};
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <change_mode+0x5c>)
 80013fa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char str[30];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "Change to %s\n\r", arr[index]), 1000);
 8001414:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	18ca      	adds	r2, r1, r3
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4909      	ldr	r1, [pc, #36]	; (8001450 <change_mode+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fd36 	bl	8003e9c <siprintf>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <change_mode+0x64>)
 800143e:	f002 faca 	bl	80039d6 <HAL_UART_Transmit>
}
 8001442:	bf00      	nop
 8001444:	3768      	adds	r7, #104	; 0x68
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	0800461c 	.word	0x0800461c
 8001450:	0800460c 	.word	0x0800460c
 8001454:	200001a8 	.word	0x200001a8

08001458 <display_time>:

void display_time(int time1, int time2)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "road1: %d road2: %d\n\r",time1, time2), 1000);
 8001462:	f107 000c 	add.w	r0, r7, #12
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <display_time+0x34>)
 800146c:	f002 fd16 	bl	8003e9c <siprintf>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <display_time+0x38>)
 800147e:	f002 faaa 	bl	80039d6 <HAL_UART_Transmit>
}
 8001482:	bf00      	nop
 8001484:	3740      	adds	r7, #64	; 0x40
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08004658 	.word	0x08004658
 8001490:	200001a8 	.word	0x200001a8

08001494 <sound_loud>:

void sound_loud(int frequency)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, frequency);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <sound_loud+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000118 	.word	0x20000118

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f000 fba4 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f862 	bl	8001584 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 80014c0:	f000 f98e 	bl	80017e0 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f000 f98c 	bl	80017e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014c8:	f000 f89e 	bl	8001608 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014cc:	f000 f8e8 	bl	80016a0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 f95c 	bl	800178c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014d4:	2100      	movs	r1, #0
 80014d6:	4822      	ldr	r0, [pc, #136]	; (8001560 <main+0xac>)
 80014d8:	f001 fbcc 	bl	8002c74 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <main+0xb0>)
 80014de:	f001 fb1f 	bl	8002b20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //initial state ===================================================================
  Reset();
 80014e2:	f7ff f8db 	bl	800069c <Reset>
  Reset_p();
 80014e6:	f7ff f8f7 	bl	80006d8 <Reset_p>
  adv_SCH_Init();
 80014ea:	f7fe ff21 	bl	8000330 <adv_SCH_Init>
  status1 = 0;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <main+0xb4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
  set_green_time(5000);
 80014f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80014f8:	f7ff fdbc 	bl	8001074 <set_green_time>
  set_yellow_time(5000);
 80014fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001500:	f7ff fdd2 	bl	80010a8 <set_yellow_time>
  set_timeout_duration(20000);
 8001504:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001508:	f7ff fde8 	bl	80010dc <set_timeout_duration>
  set_pedestrian_duration(60000);
 800150c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001510:	f7ff fdf2 	bl	80010f8 <set_pedestrian_duration>
  //adding  tasks======================================================================
  adv_SCH_Add_Task(button_reading, 0, 10);
 8001514:	220a      	movs	r2, #10
 8001516:	2100      	movs	r1, #0
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <main+0xb8>)
 800151a:	f7fe ffab 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(timerRun, 0, 10);
 800151e:	220a      	movs	r2, #10
 8001520:	2100      	movs	r1, #0
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <main+0xbc>)
 8001524:	f7fe ffa6 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_automatic_run, 0, 10);
 8001528:	220a      	movs	r2, #10
 800152a:	2100      	movs	r1, #0
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <main+0xc0>)
 800152e:	f7fe ffa1 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_pedestrian, 0, 10);
 8001532:	220a      	movs	r2, #10
 8001534:	2100      	movs	r1, #0
 8001536:	4810      	ldr	r0, [pc, #64]	; (8001578 <main+0xc4>)
 8001538:	f7fe ff9c 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_manual_run, 0, 10);
 800153c:	220a      	movs	r2, #10
 800153e:	2100      	movs	r1, #0
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <main+0xc8>)
 8001542:	f7fe ff97 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_tunning_run, 0, 10);
 8001546:	220a      	movs	r2, #10
 8001548:	2100      	movs	r1, #0
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <main+0xcc>)
 800154c:	f7fe ff92 	bl	8000474 <adv_SCH_Add_Task>
  //adv_SCH_Add_Task(output_checking, 0, 1000);
  //adv_SCH_Add_Task(count_down_show, 0, 1000);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001550:	2100      	movs	r1, #0
 8001552:	4803      	ldr	r0, [pc, #12]	; (8001560 <main+0xac>)
 8001554:	f001 fb8e 	bl	8002c74 <HAL_TIM_PWM_Start>
  while (1)
  {
     adv_SCH_Dispatch_Tasks();
 8001558:	f7fe ffc8 	bl	80004ec <adv_SCH_Dispatch_Tasks>
 800155c:	e7fc      	b.n	8001558 <main+0xa4>
 800155e:	bf00      	nop
 8001560:	20000118 	.word	0x20000118
 8001564:	20000160 	.word	0x20000160
 8001568:	200000b4 	.word	0x200000b4
 800156c:	080011d5 	.word	0x080011d5
 8001570:	0800022d 	.word	0x0800022d
 8001574:	08000701 	.word	0x08000701
 8001578:	08000cb1 	.word	0x08000cb1
 800157c:	08000aa9 	.word	0x08000aa9
 8001580:	08000f35 	.word	0x08000f35

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fbc4 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fe41 	bl	800224c <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80015d0:	f000 f986 	bl	80018e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2302      	movs	r3, #2
 80015da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2102      	movs	r1, #2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 f8ac 	bl	800274c <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80015fa:	f000 f971 	bl	80018e0 <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3740      	adds	r7, #64	; 0x40
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_TIM2_Init+0x94>)
 8001626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_TIM2_Init+0x94>)
 800162e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001632:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM2_Init+0x94>)
 800163c:	223f      	movs	r2, #63	; 0x3f
 800163e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM2_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM2_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM2_Init+0x94>)
 800164e:	f001 fa17 	bl	8002a80 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001658:	f000 f942 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM2_Init+0x94>)
 800166a:	f001 fd6b 	bl	8003144 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001674:	f000 f934 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM2_Init+0x94>)
 8001686:	f002 f8e9 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001690:	f000 f926 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000160 	.word	0x20000160

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016d2:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <MX_TIM3_Init+0xe8>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016d8:	223f      	movs	r2, #63	; 0x3f
 80016da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b29      	ldr	r3, [pc, #164]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f6:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_TIM3_Init+0xe4>)
 80016f8:	f001 f9c2 	bl	8002a80 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001702:	f000 f8ed 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001710:	4619      	mov	r1, r3
 8001712:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM3_Init+0xe4>)
 8001714:	f001 fd16 	bl	8003144 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800171e:	f000 f8df 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM3_Init+0xe4>)
 8001724:	f001 fa4e 	bl	8002bc4 <HAL_TIM_PWM_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800172e:	f000 f8d7 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <MX_TIM3_Init+0xe4>)
 8001742:	f002 f88b 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800174c:	f000 f8c8 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	; 0x60
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM3_Init+0xe4>)
 8001768:	f001 fc2e 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001772:	f000 f8b5 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM3_Init+0xe4>)
 8001778:	f000 f92a 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3738      	adds	r7, #56	; 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000118 	.word	0x20000118
 8001788:	40000400 	.word	0x40000400

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART2_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f002 f8ba 	bl	800393c <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f887 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200001a8 	.word	0x200001a8
 80017dc:	40004400 	.word	0x40004400

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <MX_GPIO_Init+0xd0>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a2d      	ldr	r2, [pc, #180]	; (80018b0 <MX_GPIO_Init+0xd0>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_GPIO_Init+0xd0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_GPIO_Init+0xd0>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_p_1_Pin|Led_2_Pin|Led_4_Pin|Led_3_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800182a:	4822      	ldr	r0, [pc, #136]	; (80018b4 <MX_GPIO_Init+0xd4>)
 800182c:	f000 fcf5 	bl	800221a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_p_2_Pin|Led_1_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001836:	4820      	ldr	r0, [pc, #128]	; (80018b8 <MX_GPIO_Init+0xd8>)
 8001838:	f000 fcef 	bl	800221a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_p_Pin button_1_Pin button_2_Pin */
  GPIO_InitStruct.Pin = button_p_Pin|button_1_Pin|button_2_Pin;
 800183c:	2313      	movs	r3, #19
 800183e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001844:	2301      	movs	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4619      	mov	r1, r3
 800184e:	481a      	ldr	r0, [pc, #104]	; (80018b8 <MX_GPIO_Init+0xd8>)
 8001850:	f000 fb48 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_3_Pin */
  GPIO_InitStruct.Pin = button_3_Pin;
 8001854:	2301      	movs	r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_3_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	4619      	mov	r1, r3
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <MX_GPIO_Init+0xd4>)
 8001868:	f000 fb3c 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_p_1_Pin Led_2_Pin Led_4_Pin Led_3_Pin */
  GPIO_InitStruct.Pin = Led_p_1_Pin|Led_2_Pin|Led_4_Pin|Led_3_Pin;
 800186c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4619      	mov	r1, r3
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <MX_GPIO_Init+0xd4>)
 8001886:	f000 fb2d 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_p_2_Pin Led_1_Pin */
  GPIO_InitStruct.Pin = Led_p_2_Pin|Led_1_Pin;
 800188a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800188e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2302      	movs	r3, #2
 800189a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_GPIO_Init+0xd8>)
 80018a4:	f000 fb1e 	bl	8001ee4 <HAL_GPIO_Init>

}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	40010800 	.word	0x40010800

080018bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	//SCH_Update();
	adv_SCH_Update();
 80018c4:	f7fe fdf0 	bl	80004a8 <adv_SCH_Update>
	global_time+=10;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	330a      	adds	r3, #10
 80018ce:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018d0:	6013      	str	r3, [r2, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000b0 	.word	0x200000b0

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_MspInit+0x5c>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_MspInit+0x5c>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_MspInit+0x5c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_MspInit+0x5c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_MspInit+0x5c>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_MspInit+0x5c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_MspInit+0x60>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_MspInit+0x60>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000

08001950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d114      	bne.n	800198c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_TIM_Base_MspInit+0x78>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_TIM_Base_MspInit+0x78>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_TIM_Base_MspInit+0x78>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	201c      	movs	r0, #28
 8001980:	f000 fa79 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001984:	201c      	movs	r0, #28
 8001986:	f000 fa92 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800198a:	e018      	b.n	80019be <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_TIM_Base_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d113      	bne.n	80019be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_TIM_Base_MspInit+0x78>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_TIM_Base_MspInit+0x78>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_TIM_Base_MspInit+0x78>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201d      	movs	r0, #29
 80019b4:	f000 fa5f 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019b8:	201d      	movs	r0, #29
 80019ba:	f000 fa78 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40000400 	.word	0x40000400

080019d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_TIM_MspPostInit+0x58>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d117      	bne.n	8001a20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_TIM_MspPostInit+0x5c>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_TIM_MspPostInit+0x5c>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_TIM_MspPostInit+0x5c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a08:	2340      	movs	r3, #64	; 0x40
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_TIM_MspPostInit+0x60>)
 8001a1c:	f000 fa62 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_UART_MspInit+0x88>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d12f      	bne.n	8001ab4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	61d3      	str	r3, [r2, #28]
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_UART_MspInit+0x8c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a84:	2304      	movs	r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_UART_MspInit+0x90>)
 8001a98:	f000 fa24 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_UART_MspInit+0x90>)
 8001ab0:	f000 fa18 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010800 	.word	0x40010800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f8bf 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM2_IRQHandler+0x10>)
 8001b1e:	f001 f94b 	bl	8002db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000160 	.word	0x20000160

08001b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <TIM3_IRQHandler+0x10>)
 8001b32:	f001 f941 	bl	8002db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000118 	.word	0x20000118

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f002 f89c 	bl	8003cac <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20005000 	.word	0x20005000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	200000f4 	.word	0x200000f4
 8001ba8:	20000200 	.word	0x20000200

08001bac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bde:	f7ff ffe5 	bl	8001bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f002 f869 	bl	8003cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff fc65 	bl	80014b4 <main>
  bx lr
 8001bea:	4770      	bx	lr
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bf4:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8001bf8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bfc:	20000200 	.word	0x20000200

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x28>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x28>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f923 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fe64 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f93b 	bl	8001eca <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 f903 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x1c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_IncTick+0x20>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	200001ec 	.word	0x200001ec

08001cb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_GetTick+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	200001ec 	.word	0x200001ec

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff90 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff2d 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff42 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff90 	bl	8001db8 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5f 	bl	8001d64 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	e169      	b.n	80021cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	f040 8158 	bne.w	80021c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a9a      	ldr	r2, [pc, #616]	; (8002184 <HAL_GPIO_Init+0x2a0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d05e      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f20:	4a98      	ldr	r2, [pc, #608]	; (8002184 <HAL_GPIO_Init+0x2a0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d875      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f26:	4a98      	ldr	r2, [pc, #608]	; (8002188 <HAL_GPIO_Init+0x2a4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d058      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f2c:	4a96      	ldr	r2, [pc, #600]	; (8002188 <HAL_GPIO_Init+0x2a4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d86f      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f32:	4a96      	ldr	r2, [pc, #600]	; (800218c <HAL_GPIO_Init+0x2a8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d052      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f38:	4a94      	ldr	r2, [pc, #592]	; (800218c <HAL_GPIO_Init+0x2a8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d869      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f3e:	4a94      	ldr	r2, [pc, #592]	; (8002190 <HAL_GPIO_Init+0x2ac>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d04c      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f44:	4a92      	ldr	r2, [pc, #584]	; (8002190 <HAL_GPIO_Init+0x2ac>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d863      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a92      	ldr	r2, [pc, #584]	; (8002194 <HAL_GPIO_Init+0x2b0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d046      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f50:	4a90      	ldr	r2, [pc, #576]	; (8002194 <HAL_GPIO_Init+0x2b0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d85d      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d82a      	bhi.n	8001fb0 <HAL_GPIO_Init+0xcc>
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d859      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <HAL_GPIO_Init+0x80>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001fdf 	.word	0x08001fdf
 8001f68:	08001fb9 	.word	0x08001fb9
 8001f6c:	08001fcb 	.word	0x08001fcb
 8001f70:	0800200d 	.word	0x0800200d
 8001f74:	08002013 	.word	0x08002013
 8001f78:	08002013 	.word	0x08002013
 8001f7c:	08002013 	.word	0x08002013
 8001f80:	08002013 	.word	0x08002013
 8001f84:	08002013 	.word	0x08002013
 8001f88:	08002013 	.word	0x08002013
 8001f8c:	08002013 	.word	0x08002013
 8001f90:	08002013 	.word	0x08002013
 8001f94:	08002013 	.word	0x08002013
 8001f98:	08002013 	.word	0x08002013
 8001f9c:	08002013 	.word	0x08002013
 8001fa0:	08002013 	.word	0x08002013
 8001fa4:	08002013 	.word	0x08002013
 8001fa8:	08001fc1 	.word	0x08001fc1
 8001fac:	08001fd5 	.word	0x08001fd5
 8001fb0:	4a79      	ldr	r2, [pc, #484]	; (8002198 <HAL_GPIO_Init+0x2b4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fb6:	e02c      	b.n	8002012 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	623b      	str	r3, [r7, #32]
          break;
 8001fbe:	e029      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e024      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e01f      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	330c      	adds	r3, #12
 8001fda:	623b      	str	r3, [r7, #32]
          break;
 8001fdc:	e01a      	b.n	8002014 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e013      	b.n	8002014 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	611a      	str	r2, [r3, #16]
          break;
 8001ffe:	e009      	b.n	8002014 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002000:	2308      	movs	r3, #8
 8002002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	615a      	str	r2, [r3, #20]
          break;
 800200a:	e003      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x130>
          break;
 8002012:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2bff      	cmp	r3, #255	; 0xff
 8002018:	d801      	bhi.n	800201e <HAL_GPIO_Init+0x13a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_Init+0x13e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d802      	bhi.n	8002030 <HAL_GPIO_Init+0x14c>
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x152>
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3b08      	subs	r3, #8
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	210f      	movs	r1, #15
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80b1 	beq.w	80021c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002064:	4b4d      	ldr	r3, [pc, #308]	; (800219c <HAL_GPIO_Init+0x2b8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <HAL_GPIO_Init+0x2b8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_GPIO_Init+0x2b8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800207c:	4a48      	ldr	r2, [pc, #288]	; (80021a0 <HAL_GPIO_Init+0x2bc>)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <HAL_GPIO_Init+0x2c0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_GPIO_Init+0x1ec>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <HAL_GPIO_Init+0x2c4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_GPIO_Init+0x1e8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <HAL_GPIO_Init+0x2cc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_GPIO_Init+0x1e0>
 80020c0:	2303      	movs	r3, #3
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e004      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020d0:	2300      	movs	r3, #0
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	f002 0203 	and.w	r2, r2, #3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4093      	lsls	r3, r2
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020e2:	492f      	ldr	r1, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x2bc>)
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	492c      	ldr	r1, [pc, #176]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4928      	ldr	r1, [pc, #160]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	491e      	ldr	r1, [pc, #120]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800213c:	4013      	ands	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	4918      	ldr	r1, [pc, #96]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4914      	ldr	r1, [pc, #80]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002164:	4013      	ands	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
 8002180:	e021      	b.n	80021c6 <HAL_GPIO_Init+0x2e2>
 8002182:	bf00      	nop
 8002184:	10320000 	.word	0x10320000
 8002188:	10310000 	.word	0x10310000
 800218c:	10220000 	.word	0x10220000
 8002190:	10210000 	.word	0x10210000
 8002194:	10120000 	.word	0x10120000
 8002198:	10110000 	.word	0x10110000
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40010800 	.word	0x40010800
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40011400 	.word	0x40011400
 80021b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_GPIO_Init+0x304>)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	43db      	mvns	r3, r3
 80021c0:	4909      	ldr	r1, [pc, #36]	; (80021e8 <HAL_GPIO_Init+0x304>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f47f ae8e 	bne.w	8001ef8 <HAL_GPIO_Init+0x14>
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	372c      	adds	r7, #44	; 0x2c
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e001      	b.n	800220e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]
 8002226:	4613      	mov	r3, r2
 8002228:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800222a:	787b      	ldrb	r3, [r7, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002236:	e003      	b.n	8002240 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	041a      	lsls	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	611a      	str	r2, [r3, #16]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
	...

0800224c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e26c      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800226c:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b04      	cmp	r3, #4
 8002276:	d00c      	beq.n	8002292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d112      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
 8002284:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d10b      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06c      	beq.n	8002378 <HAL_RCC_OscConfig+0x12c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d168      	bne.n	8002378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e246      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x76>
 80022b4:	4b80      	ldr	r3, [pc, #512]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e02e      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x98>
 80022ca:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e01d      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0xbc>
 80022ee:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a71      	ldr	r2, [pc, #452]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6a      	ldr	r2, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a67      	ldr	r2, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fcc4 	bl	8001cb4 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fcc0 	bl	8001cb4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1fa      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xe4>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fcb0 	bl	8001cb4 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fcac 	bl	8001cb4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1e6      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x10c>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d063      	beq.n	800244e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1ba      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4939      	ldr	r1, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	e03a      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fc65 	bl	8001cb4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fc61 	bl	8001cb4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e19b      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fc44 	bl	8001cb4 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff fc40 	bl	8001cb4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e17a      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03a      	beq.n	80024d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7ff fc24 	bl	8001cb4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff fc20 	bl	8001cb4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e15a      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248e:	2001      	movs	r0, #1
 8002490:	f000 fad8 	bl	8002a44 <RCC_Delay>
 8002494:	e01c      	b.n	80024d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fc0a 	bl	8001cb4 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff fc06 	bl	8001cb4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d908      	bls.n	80024c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e140      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	42420000 	.word	0x42420000
 80024c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b9e      	ldr	r3, [pc, #632]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e9      	bne.n	80024a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a6 	beq.w	800262a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b97      	ldr	r3, [pc, #604]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b94      	ldr	r3, [pc, #592]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a93      	ldr	r2, [pc, #588]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b8e      	ldr	r3, [pc, #568]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a8a      	ldr	r2, [pc, #552]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7ff fbc7 	bl	8001cb4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7ff fbc3 	bl	8001cb4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0fd      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x312>
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a7a      	ldr	r2, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	e02d      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x334>
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b73      	ldr	r3, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a72      	ldr	r2, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	e01c      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x356>
 8002588:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a69      	ldr	r2, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fb77 	bl	8001cb4 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff fb73 	bl	8001cb4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0ab      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b57      	ldr	r3, [pc, #348]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCC_OscConfig+0x37e>
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb61 	bl	8001cb4 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fb5d 	bl	8001cb4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e095      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a47      	ldr	r2, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8081 	beq.w	8002736 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d061      	beq.n	8002704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d146      	bne.n	80026d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff fb31 	bl	8001cb4 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7ff fb2d 	bl	8001cb4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e067      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	492d      	ldr	r1, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a19      	ldr	r1, [r3, #32]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	430b      	orrs	r3, r1
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff fb01 	bl	8001cb4 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff fafd 	bl	8001cb4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e037      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46a>
 80026d4:	e02f      	b.n	8002736 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_RCC_OscConfig+0x4fc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff faea 	bl	8001cb4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7ff fae6 	bl	8001cb4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e020      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x498>
 8002702:	e018      	b.n	8002736 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e013      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	42420060 	.word	0x42420060

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d0      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4965      	ldr	r1, [pc, #404]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d040      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e073      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4936      	ldr	r1, [pc, #216]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7ff fa3a 	bl	8001cb4 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff fa36 	bl	8001cb4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e053      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d210      	bcs.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4922      	ldr	r1, [pc, #136]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1cc>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f998 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
 8002914:	08004680 	.word	0x08004680
 8002918:	20000000 	.word	0x20000000
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b490      	push	{r4, r7}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002928:	1d3c      	adds	r4, r7, #4
 800292a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002930:	f240 2301 	movw	r3, #513	; 0x201
 8002934:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b04      	cmp	r3, #4
 8002958:	d002      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x40>
 800295a:	2b08      	cmp	r3, #8
 800295c:	d003      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x46>
 800295e:	e02d      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002962:	623b      	str	r3, [r7, #32]
      break;
 8002964:	e02d      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	0c9b      	lsrs	r3, r3, #18
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002972:	4413      	add	r3, r2
 8002974:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002978:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	0c5b      	lsrs	r3, r3, #17
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002992:	4413      	add	r3, r2
 8002994:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002998:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299e:	fb02 f203 	mul.w	r2, r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e004      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	623b      	str	r3, [r7, #32]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029be:	623b      	str	r3, [r7, #32]
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	6a3b      	ldr	r3, [r7, #32]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc90      	pop	{r4, r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	08004670 	.word	0x08004670
 80029d4:	40021000 	.word	0x40021000
 80029d8:	007a1200 	.word	0x007a1200
 80029dc:	003d0900 	.word	0x003d0900

080029e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	20000000 	.word	0x20000000

080029f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f8:	f7ff fff2 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08004690 	.word	0x08004690

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0adb      	lsrs	r3, r3, #11
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08004690 	.word	0x08004690

08002a44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <RCC_Delay+0x34>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <RCC_Delay+0x38>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0a5b      	lsrs	r3, r3, #9
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a60:	bf00      	nop
  }
  while (Delay --);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	60fa      	str	r2, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <RCC_Delay+0x1c>
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	10624dd3 	.word	0x10624dd3

08002a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e041      	b.n	8002b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe ff52 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f000 fc28 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d001      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e03a      	b.n	8002bae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_TIM_Base_Start_IT+0x98>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00e      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x58>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d009      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x58>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <HAL_TIM_Base_Start_IT+0x9c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x58>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d111      	bne.n	8002b9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d010      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	e007      	b.n	8002bac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800

08002bc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e041      	b.n	8002c5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f839 	bl	8002c62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fb86 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_TIM_PWM_Start+0x24>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e022      	b.n	8002cde <HAL_TIM_PWM_Start+0x6a>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d109      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0x3e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e015      	b.n	8002cde <HAL_TIM_PWM_Start+0x6a>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d109      	bne.n	8002ccc <HAL_TIM_PWM_Start+0x58>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e008      	b.n	8002cde <HAL_TIM_PWM_Start+0x6a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e05e      	b.n	8002da4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0x82>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf4:	e013      	b.n	8002d1e <HAL_TIM_PWM_Start+0xaa>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d104      	bne.n	8002d06 <HAL_TIM_PWM_Start+0x92>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d04:	e00b      	b.n	8002d1e <HAL_TIM_PWM_Start+0xaa>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d104      	bne.n	8002d16 <HAL_TIM_PWM_Start+0xa2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d14:	e003      	b.n	8002d1e <HAL_TIM_PWM_Start+0xaa>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	6839      	ldr	r1, [r7, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fd74 	bl	8003814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_TIM_PWM_Start+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_PWM_Start+0x138>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_TIM_PWM_Start+0xfa>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d009      	beq.n	8002d6e <HAL_TIM_PWM_Start+0xfa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_TIM_PWM_Start+0x13c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIM_PWM_Start+0xfa>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_TIM_PWM_Start+0x140>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d111      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d010      	beq.n	8002da2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d90:	e007      	b.n	8002da2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800

08002db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d122      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d11b      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0202 	mvn.w	r2, #2
 8002de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa6f 	bl	80032de <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa62 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa71 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0204 	mvn.w	r2, #4
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa45 	bl	80032de <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa38 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fa47 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0208 	mvn.w	r2, #8
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2204      	movs	r2, #4
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa1b 	bl	80032de <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa0e 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa1d 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0210 	mvn.w	r2, #16
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9f1 	bl	80032de <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9e4 	bl	80032cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9f3 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0201 	mvn.w	r2, #1
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fcc0 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d10e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d107      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fce1 	bl	800392a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f9b7 	bl	8003302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d107      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0220 	mvn.w	r2, #32
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fcac 	bl	8003918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0ac      	b.n	800313c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f200 809f 	bhi.w	8003130 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	08003131 	.word	0x08003131
 8003000:	08003131 	.word	0x08003131
 8003004:	08003131 	.word	0x08003131
 8003008:	0800306d 	.word	0x0800306d
 800300c:	08003131 	.word	0x08003131
 8003010:	08003131 	.word	0x08003131
 8003014:	08003131 	.word	0x08003131
 8003018:	080030af 	.word	0x080030af
 800301c:	08003131 	.word	0x08003131
 8003020:	08003131 	.word	0x08003131
 8003024:	08003131 	.word	0x08003131
 8003028:	080030ef 	.word	0x080030ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f9d0 	bl	80033d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e062      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa16 	bl	80034a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	619a      	str	r2, [r3, #24]
      break;
 80030ac:	e041      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fa5f 	bl	8003578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0208 	orr.w	r2, r2, #8
 80030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0204 	bic.w	r2, r2, #4
 80030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      break;
 80030ec:	e021      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 faa9 	bl	800364c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	61da      	str	r2, [r3, #28]
      break;
 800312e:	e000      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e0b3      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x180>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800317a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003194:	d03e      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xd0>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	f200 8087 	bhi.w	80032ac <HAL_TIM_ConfigClockSource+0x168>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	f000 8085 	beq.w	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d87f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d01a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0xa2>
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d87b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d050      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x116>
 80031b8:	2b60      	cmp	r3, #96	; 0x60
 80031ba:	d877      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031bc:	2b50      	cmp	r3, #80	; 0x50
 80031be:	d03c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xf6>
 80031c0:	2b50      	cmp	r3, #80	; 0x50
 80031c2:	d873      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d058      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x136>
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d86f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d064      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
 80031d0:	2b30      	cmp	r3, #48	; 0x30
 80031d2:	d86b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d060      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d867      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05c      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d05a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031e4:	e062      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f000 faee 	bl	80037d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003208:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
      break;
 8003212:	e04e      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f000 fad7 	bl	80037d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003236:	609a      	str	r2, [r3, #8]
      break;
 8003238:	e03b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 fa4e 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2150      	movs	r1, #80	; 0x50
 8003252:	4618      	mov	r0, r3
 8003254:	f000 faa5 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 8003258:	e02b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 fa6c 	bl	8003744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2160      	movs	r1, #96	; 0x60
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa95 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 8003278:	e01b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f000 fa2e 	bl	80036e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fa85 	bl	80037a2 <TIM_ITRx_SetConfig>
      break;
 8003298:	e00b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f000 fa7c 	bl	80037a2 <TIM_ITRx_SetConfig>
        break;
 80032aa:	e002      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a29      	ldr	r2, [pc, #164]	; (80033cc <TIM_Base_SetConfig+0xb8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0x30>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0x30>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <TIM_Base_SetConfig+0xbc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x30>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <TIM_Base_SetConfig+0xc0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <TIM_Base_SetConfig+0xb8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00b      	beq.n	8003376 <TIM_Base_SetConfig+0x62>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d007      	beq.n	8003376 <TIM_Base_SetConfig+0x62>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <TIM_Base_SetConfig+0xbc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d003      	beq.n	8003376 <TIM_Base_SetConfig+0x62>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <TIM_Base_SetConfig+0xc0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <TIM_Base_SetConfig+0xb8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d103      	bne.n	80033bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	615a      	str	r2, [r3, #20]
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800

080033d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f023 0201 	bic.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0302 	bic.w	r3, r3, #2
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <TIM_OC1_SetConfig+0xc8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0308 	bic.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <TIM_OC1_SetConfig+0xc8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0210 	bic.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0320 	bic.w	r3, r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <TIM_OC2_SetConfig+0xd0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10d      	bne.n	8003520 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a14      	ldr	r2, [pc, #80]	; (8003574 <TIM_OC2_SetConfig+0xd0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d113      	bne.n	8003550 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00

08003578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <TIM_OC3_SetConfig+0xd0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10d      	bne.n	80035f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <TIM_OC3_SetConfig+0xd0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d113      	bne.n	8003622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00

0800364c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <TIM_OC4_SetConfig+0x98>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d109      	bne.n	80036c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	019b      	lsls	r3, r3, #6
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00

080036e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f023 030a 	bic.w	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 0210 	bic.w	r2, r3, #16
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800376e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	031b      	lsls	r3, r3, #12
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	f043 0307 	orr.w	r3, r3, #7
 80037c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b087      	sub	sp, #28
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	021a      	lsls	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	609a      	str	r2, [r3, #8]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2201      	movs	r2, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1a      	ldr	r2, [r3, #32]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	43db      	mvns	r3, r3
 8003836:	401a      	ands	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e046      	b.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d009      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a10      	ldr	r2, [pc, #64]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10c      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800

08003918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e03f      	b.n	80039ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe f866 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f905 	bl	8003b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b08a      	sub	sp, #40	; 0x28
 80039da:	af02      	add	r7, sp, #8
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d17c      	bne.n	8003af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_Transmit+0x2c>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e075      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x3e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e06e      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2a:	f7fe f943 	bl	8001cb4 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x82>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a68:	e02a      	b.n	8003ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f840 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cf      	bne.n	8003a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	; 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f810 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e006      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	e02c      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d028      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	f7fe f8cb 	bl	8001cb4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d21d      	bcs.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d0c3      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bca:	f023 030c 	bic.w	r3, r3, #12
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <UART_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7fe ff10 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	e002      	b.n	8003c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7fe fef8 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8003c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	0119      	lsls	r1, r3, #4
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009a      	lsls	r2, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2064      	movs	r0, #100	; 0x64
 8003c46:	fb00 f303 	mul.w	r3, r0, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	3332      	adds	r3, #50	; 0x32
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5c:	4419      	add	r1, r3
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009a      	lsls	r2, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c76:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2064      	movs	r0, #100	; 0x64
 8003c7e:	fb00 f303 	mul.w	r3, r0, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	3332      	adds	r3, #50	; 0x32
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <UART_SetConfig+0x118>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 020f 	and.w	r2, r3, #15
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	440a      	add	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <__errno>:
 8003cac:	4b01      	ldr	r3, [pc, #4]	; (8003cb4 <__errno+0x8>)
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2000000c 	.word	0x2000000c

08003cb8 <__libc_init_array>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	2600      	movs	r6, #0
 8003cbc:	4d0c      	ldr	r5, [pc, #48]	; (8003cf0 <__libc_init_array+0x38>)
 8003cbe:	4c0d      	ldr	r4, [pc, #52]	; (8003cf4 <__libc_init_array+0x3c>)
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	42a6      	cmp	r6, r4
 8003cc6:	d109      	bne.n	8003cdc <__libc_init_array+0x24>
 8003cc8:	f000 fc6c 	bl	80045a4 <_init>
 8003ccc:	2600      	movs	r6, #0
 8003cce:	4d0a      	ldr	r5, [pc, #40]	; (8003cf8 <__libc_init_array+0x40>)
 8003cd0:	4c0a      	ldr	r4, [pc, #40]	; (8003cfc <__libc_init_array+0x44>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	42a6      	cmp	r6, r4
 8003cd8:	d105      	bne.n	8003ce6 <__libc_init_array+0x2e>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce0:	4798      	blx	r3
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7ee      	b.n	8003cc4 <__libc_init_array+0xc>
 8003ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cea:	4798      	blx	r3
 8003cec:	3601      	adds	r6, #1
 8003cee:	e7f2      	b.n	8003cd6 <__libc_init_array+0x1e>
 8003cf0:	080046cc 	.word	0x080046cc
 8003cf4:	080046cc 	.word	0x080046cc
 8003cf8:	080046cc 	.word	0x080046cc
 8003cfc:	080046d0 	.word	0x080046d0

08003d00 <malloc>:
 8003d00:	4b02      	ldr	r3, [pc, #8]	; (8003d0c <malloc+0xc>)
 8003d02:	4601      	mov	r1, r0
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f000 b85f 	b.w	8003dc8 <_malloc_r>
 8003d0a:	bf00      	nop
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <free>:
 8003d10:	4b02      	ldr	r3, [pc, #8]	; (8003d1c <free+0xc>)
 8003d12:	4601      	mov	r1, r0
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	f000 b80b 	b.w	8003d30 <_free_r>
 8003d1a:	bf00      	nop
 8003d1c:	2000000c 	.word	0x2000000c

08003d20 <memset>:
 8003d20:	4603      	mov	r3, r0
 8003d22:	4402      	add	r2, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <_free_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	2900      	cmp	r1, #0
 8003d36:	d043      	beq.n	8003dc0 <_free_r+0x90>
 8003d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3c:	1f0c      	subs	r4, r1, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfb8      	it	lt
 8003d42:	18e4      	addlt	r4, r4, r3
 8003d44:	f000 f8ca 	bl	8003edc <__malloc_lock>
 8003d48:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <_free_r+0x94>)
 8003d4a:	6813      	ldr	r3, [r2, #0]
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	b933      	cbnz	r3, 8003d5e <_free_r+0x2e>
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	6014      	str	r4, [r2, #0]
 8003d54:	4628      	mov	r0, r5
 8003d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5a:	f000 b8c5 	b.w	8003ee8 <__malloc_unlock>
 8003d5e:	42a3      	cmp	r3, r4
 8003d60:	d90a      	bls.n	8003d78 <_free_r+0x48>
 8003d62:	6821      	ldr	r1, [r4, #0]
 8003d64:	1862      	adds	r2, r4, r1
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bf01      	itttt	eq
 8003d6a:	681a      	ldreq	r2, [r3, #0]
 8003d6c:	685b      	ldreq	r3, [r3, #4]
 8003d6e:	1852      	addeq	r2, r2, r1
 8003d70:	6022      	streq	r2, [r4, #0]
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	6004      	str	r4, [r0, #0]
 8003d76:	e7ed      	b.n	8003d54 <_free_r+0x24>
 8003d78:	461a      	mov	r2, r3
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b10b      	cbz	r3, 8003d82 <_free_r+0x52>
 8003d7e:	42a3      	cmp	r3, r4
 8003d80:	d9fa      	bls.n	8003d78 <_free_r+0x48>
 8003d82:	6811      	ldr	r1, [r2, #0]
 8003d84:	1850      	adds	r0, r2, r1
 8003d86:	42a0      	cmp	r0, r4
 8003d88:	d10b      	bne.n	8003da2 <_free_r+0x72>
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	4401      	add	r1, r0
 8003d8e:	1850      	adds	r0, r2, r1
 8003d90:	4283      	cmp	r3, r0
 8003d92:	6011      	str	r1, [r2, #0]
 8003d94:	d1de      	bne.n	8003d54 <_free_r+0x24>
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4401      	add	r1, r0
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	6053      	str	r3, [r2, #4]
 8003da0:	e7d8      	b.n	8003d54 <_free_r+0x24>
 8003da2:	d902      	bls.n	8003daa <_free_r+0x7a>
 8003da4:	230c      	movs	r3, #12
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	e7d4      	b.n	8003d54 <_free_r+0x24>
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	1821      	adds	r1, r4, r0
 8003dae:	428b      	cmp	r3, r1
 8003db0:	bf01      	itttt	eq
 8003db2:	6819      	ldreq	r1, [r3, #0]
 8003db4:	685b      	ldreq	r3, [r3, #4]
 8003db6:	1809      	addeq	r1, r1, r0
 8003db8:	6021      	streq	r1, [r4, #0]
 8003dba:	6063      	str	r3, [r4, #4]
 8003dbc:	6054      	str	r4, [r2, #4]
 8003dbe:	e7c9      	b.n	8003d54 <_free_r+0x24>
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200000f8 	.word	0x200000f8

08003dc8 <_malloc_r>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	1ccd      	adds	r5, r1, #3
 8003dcc:	f025 0503 	bic.w	r5, r5, #3
 8003dd0:	3508      	adds	r5, #8
 8003dd2:	2d0c      	cmp	r5, #12
 8003dd4:	bf38      	it	cc
 8003dd6:	250c      	movcc	r5, #12
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	4606      	mov	r6, r0
 8003ddc:	db01      	blt.n	8003de2 <_malloc_r+0x1a>
 8003dde:	42a9      	cmp	r1, r5
 8003de0:	d903      	bls.n	8003dea <_malloc_r+0x22>
 8003de2:	230c      	movs	r3, #12
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	2000      	movs	r0, #0
 8003de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dea:	f000 f877 	bl	8003edc <__malloc_lock>
 8003dee:	4921      	ldr	r1, [pc, #132]	; (8003e74 <_malloc_r+0xac>)
 8003df0:	680a      	ldr	r2, [r1, #0]
 8003df2:	4614      	mov	r4, r2
 8003df4:	b99c      	cbnz	r4, 8003e1e <_malloc_r+0x56>
 8003df6:	4f20      	ldr	r7, [pc, #128]	; (8003e78 <_malloc_r+0xb0>)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b923      	cbnz	r3, 8003e06 <_malloc_r+0x3e>
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f000 f83c 	bl	8003e7c <_sbrk_r>
 8003e04:	6038      	str	r0, [r7, #0]
 8003e06:	4629      	mov	r1, r5
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f837 	bl	8003e7c <_sbrk_r>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d123      	bne.n	8003e5a <_malloc_r+0x92>
 8003e12:	230c      	movs	r3, #12
 8003e14:	4630      	mov	r0, r6
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	f000 f866 	bl	8003ee8 <__malloc_unlock>
 8003e1c:	e7e3      	b.n	8003de6 <_malloc_r+0x1e>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	1b5b      	subs	r3, r3, r5
 8003e22:	d417      	bmi.n	8003e54 <_malloc_r+0x8c>
 8003e24:	2b0b      	cmp	r3, #11
 8003e26:	d903      	bls.n	8003e30 <_malloc_r+0x68>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	441c      	add	r4, r3
 8003e2c:	6025      	str	r5, [r4, #0]
 8003e2e:	e004      	b.n	8003e3a <_malloc_r+0x72>
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	42a2      	cmp	r2, r4
 8003e34:	bf0c      	ite	eq
 8003e36:	600b      	streq	r3, [r1, #0]
 8003e38:	6053      	strne	r3, [r2, #4]
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f000 f854 	bl	8003ee8 <__malloc_unlock>
 8003e40:	f104 000b 	add.w	r0, r4, #11
 8003e44:	1d23      	adds	r3, r4, #4
 8003e46:	f020 0007 	bic.w	r0, r0, #7
 8003e4a:	1ac2      	subs	r2, r0, r3
 8003e4c:	d0cc      	beq.n	8003de8 <_malloc_r+0x20>
 8003e4e:	1a1b      	subs	r3, r3, r0
 8003e50:	50a3      	str	r3, [r4, r2]
 8003e52:	e7c9      	b.n	8003de8 <_malloc_r+0x20>
 8003e54:	4622      	mov	r2, r4
 8003e56:	6864      	ldr	r4, [r4, #4]
 8003e58:	e7cc      	b.n	8003df4 <_malloc_r+0x2c>
 8003e5a:	1cc4      	adds	r4, r0, #3
 8003e5c:	f024 0403 	bic.w	r4, r4, #3
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d0e3      	beq.n	8003e2c <_malloc_r+0x64>
 8003e64:	1a21      	subs	r1, r4, r0
 8003e66:	4630      	mov	r0, r6
 8003e68:	f000 f808 	bl	8003e7c <_sbrk_r>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d1dd      	bne.n	8003e2c <_malloc_r+0x64>
 8003e70:	e7cf      	b.n	8003e12 <_malloc_r+0x4a>
 8003e72:	bf00      	nop
 8003e74:	200000f8 	.word	0x200000f8
 8003e78:	200000fc 	.word	0x200000fc

08003e7c <_sbrk_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	2300      	movs	r3, #0
 8003e80:	4d05      	ldr	r5, [pc, #20]	; (8003e98 <_sbrk_r+0x1c>)
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	602b      	str	r3, [r5, #0]
 8003e88:	f7fd fe5a 	bl	8001b40 <_sbrk>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_sbrk_r+0x1a>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_sbrk_r+0x1a>
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	200001f0 	.word	0x200001f0

08003e9c <siprintf>:
 8003e9c:	b40e      	push	{r1, r2, r3}
 8003e9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea2:	b500      	push	{lr}
 8003ea4:	b09c      	sub	sp, #112	; 0x70
 8003ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ea8:	9002      	str	r0, [sp, #8]
 8003eaa:	9006      	str	r0, [sp, #24]
 8003eac:	9107      	str	r1, [sp, #28]
 8003eae:	9104      	str	r1, [sp, #16]
 8003eb0:	4808      	ldr	r0, [pc, #32]	; (8003ed4 <siprintf+0x38>)
 8003eb2:	4909      	ldr	r1, [pc, #36]	; (8003ed8 <siprintf+0x3c>)
 8003eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb8:	9105      	str	r1, [sp, #20]
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	a902      	add	r1, sp, #8
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	f000 f874 	bl	8003fac <_svfiprintf_r>
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	b01c      	add	sp, #112	; 0x70
 8003ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed0:	b003      	add	sp, #12
 8003ed2:	4770      	bx	lr
 8003ed4:	2000000c 	.word	0x2000000c
 8003ed8:	ffff0208 	.word	0xffff0208

08003edc <__malloc_lock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_lock+0x8>)
 8003ede:	f000 bafb 	b.w	80044d8 <__retarget_lock_acquire_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200001f8 	.word	0x200001f8

08003ee8 <__malloc_unlock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_unlock+0x8>)
 8003eea:	f000 baf6 	b.w	80044da <__retarget_lock_release_recursive>
 8003eee:	bf00      	nop
 8003ef0:	200001f8 	.word	0x200001f8

08003ef4 <__ssputs_r>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	688e      	ldr	r6, [r1, #8]
 8003efa:	4682      	mov	sl, r0
 8003efc:	429e      	cmp	r6, r3
 8003efe:	460c      	mov	r4, r1
 8003f00:	4690      	mov	r8, r2
 8003f02:	461f      	mov	r7, r3
 8003f04:	d838      	bhi.n	8003f78 <__ssputs_r+0x84>
 8003f06:	898a      	ldrh	r2, [r1, #12]
 8003f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f0c:	d032      	beq.n	8003f74 <__ssputs_r+0x80>
 8003f0e:	6825      	ldr	r5, [r4, #0]
 8003f10:	6909      	ldr	r1, [r1, #16]
 8003f12:	3301      	adds	r3, #1
 8003f14:	eba5 0901 	sub.w	r9, r5, r1
 8003f18:	6965      	ldr	r5, [r4, #20]
 8003f1a:	444b      	add	r3, r9
 8003f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f24:	106d      	asrs	r5, r5, #1
 8003f26:	429d      	cmp	r5, r3
 8003f28:	bf38      	it	cc
 8003f2a:	461d      	movcc	r5, r3
 8003f2c:	0553      	lsls	r3, r2, #21
 8003f2e:	d531      	bpl.n	8003f94 <__ssputs_r+0xa0>
 8003f30:	4629      	mov	r1, r5
 8003f32:	f7ff ff49 	bl	8003dc8 <_malloc_r>
 8003f36:	4606      	mov	r6, r0
 8003f38:	b950      	cbnz	r0, 8003f50 <__ssputs_r+0x5c>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	f8ca 3000 	str.w	r3, [sl]
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4a:	81a3      	strh	r3, [r4, #12]
 8003f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f50:	464a      	mov	r2, r9
 8003f52:	6921      	ldr	r1, [r4, #16]
 8003f54:	f000 fad0 	bl	80044f8 <memcpy>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	6126      	str	r6, [r4, #16]
 8003f66:	444e      	add	r6, r9
 8003f68:	6026      	str	r6, [r4, #0]
 8003f6a:	463e      	mov	r6, r7
 8003f6c:	6165      	str	r5, [r4, #20]
 8003f6e:	eba5 0509 	sub.w	r5, r5, r9
 8003f72:	60a5      	str	r5, [r4, #8]
 8003f74:	42be      	cmp	r6, r7
 8003f76:	d900      	bls.n	8003f7a <__ssputs_r+0x86>
 8003f78:	463e      	mov	r6, r7
 8003f7a:	4632      	mov	r2, r6
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	f000 fac8 	bl	8004514 <memmove>
 8003f84:	68a3      	ldr	r3, [r4, #8]
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	1b9b      	subs	r3, r3, r6
 8003f8a:	4432      	add	r2, r6
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	60a3      	str	r3, [r4, #8]
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	e7db      	b.n	8003f4c <__ssputs_r+0x58>
 8003f94:	462a      	mov	r2, r5
 8003f96:	f000 fad7 	bl	8004548 <_realloc_r>
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d1e1      	bne.n	8003f64 <__ssputs_r+0x70>
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	6921      	ldr	r1, [r4, #16]
 8003fa4:	f7ff fec4 	bl	8003d30 <_free_r>
 8003fa8:	e7c7      	b.n	8003f3a <__ssputs_r+0x46>
	...

08003fac <_svfiprintf_r>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	4698      	mov	r8, r3
 8003fb2:	898b      	ldrh	r3, [r1, #12]
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	460d      	mov	r5, r1
 8003fba:	4614      	mov	r4, r2
 8003fbc:	b09d      	sub	sp, #116	; 0x74
 8003fbe:	d50e      	bpl.n	8003fde <_svfiprintf_r+0x32>
 8003fc0:	690b      	ldr	r3, [r1, #16]
 8003fc2:	b963      	cbnz	r3, 8003fde <_svfiprintf_r+0x32>
 8003fc4:	2140      	movs	r1, #64	; 0x40
 8003fc6:	f7ff feff 	bl	8003dc8 <_malloc_r>
 8003fca:	6028      	str	r0, [r5, #0]
 8003fcc:	6128      	str	r0, [r5, #16]
 8003fce:	b920      	cbnz	r0, 8003fda <_svfiprintf_r+0x2e>
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	e0d1      	b.n	800417e <_svfiprintf_r+0x1d2>
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	616b      	str	r3, [r5, #20]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe8:	2330      	movs	r3, #48	; 0x30
 8003fea:	f04f 0901 	mov.w	r9, #1
 8003fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004198 <_svfiprintf_r+0x1ec>
 8003ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004002:	b10a      	cbz	r2, 8004008 <_svfiprintf_r+0x5c>
 8004004:	2a25      	cmp	r2, #37	; 0x25
 8004006:	d1f9      	bne.n	8003ffc <_svfiprintf_r+0x50>
 8004008:	ebba 0b04 	subs.w	fp, sl, r4
 800400c:	d00b      	beq.n	8004026 <_svfiprintf_r+0x7a>
 800400e:	465b      	mov	r3, fp
 8004010:	4622      	mov	r2, r4
 8004012:	4629      	mov	r1, r5
 8004014:	4638      	mov	r0, r7
 8004016:	f7ff ff6d 	bl	8003ef4 <__ssputs_r>
 800401a:	3001      	adds	r0, #1
 800401c:	f000 80aa 	beq.w	8004174 <_svfiprintf_r+0x1c8>
 8004020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004022:	445a      	add	r2, fp
 8004024:	9209      	str	r2, [sp, #36]	; 0x24
 8004026:	f89a 3000 	ldrb.w	r3, [sl]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80a2 	beq.w	8004174 <_svfiprintf_r+0x1c8>
 8004030:	2300      	movs	r3, #0
 8004032:	f04f 32ff 	mov.w	r2, #4294967295
 8004036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800403a:	f10a 0a01 	add.w	sl, sl, #1
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	9307      	str	r3, [sp, #28]
 8004042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004046:	931a      	str	r3, [sp, #104]	; 0x68
 8004048:	4654      	mov	r4, sl
 800404a:	2205      	movs	r2, #5
 800404c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004050:	4851      	ldr	r0, [pc, #324]	; (8004198 <_svfiprintf_r+0x1ec>)
 8004052:	f000 fa43 	bl	80044dc <memchr>
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	b9d8      	cbnz	r0, 8004092 <_svfiprintf_r+0xe6>
 800405a:	06d0      	lsls	r0, r2, #27
 800405c:	bf44      	itt	mi
 800405e:	2320      	movmi	r3, #32
 8004060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004064:	0711      	lsls	r1, r2, #28
 8004066:	bf44      	itt	mi
 8004068:	232b      	movmi	r3, #43	; 0x2b
 800406a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406e:	f89a 3000 	ldrb.w	r3, [sl]
 8004072:	2b2a      	cmp	r3, #42	; 0x2a
 8004074:	d015      	beq.n	80040a2 <_svfiprintf_r+0xf6>
 8004076:	4654      	mov	r4, sl
 8004078:	2000      	movs	r0, #0
 800407a:	f04f 0c0a 	mov.w	ip, #10
 800407e:	9a07      	ldr	r2, [sp, #28]
 8004080:	4621      	mov	r1, r4
 8004082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004086:	3b30      	subs	r3, #48	; 0x30
 8004088:	2b09      	cmp	r3, #9
 800408a:	d94e      	bls.n	800412a <_svfiprintf_r+0x17e>
 800408c:	b1b0      	cbz	r0, 80040bc <_svfiprintf_r+0x110>
 800408e:	9207      	str	r2, [sp, #28]
 8004090:	e014      	b.n	80040bc <_svfiprintf_r+0x110>
 8004092:	eba0 0308 	sub.w	r3, r0, r8
 8004096:	fa09 f303 	lsl.w	r3, r9, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	46a2      	mov	sl, r4
 800409e:	9304      	str	r3, [sp, #16]
 80040a0:	e7d2      	b.n	8004048 <_svfiprintf_r+0x9c>
 80040a2:	9b03      	ldr	r3, [sp, #12]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	9103      	str	r1, [sp, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfbb      	ittet	lt
 80040ae:	425b      	neglt	r3, r3
 80040b0:	f042 0202 	orrlt.w	r2, r2, #2
 80040b4:	9307      	strge	r3, [sp, #28]
 80040b6:	9307      	strlt	r3, [sp, #28]
 80040b8:	bfb8      	it	lt
 80040ba:	9204      	strlt	r2, [sp, #16]
 80040bc:	7823      	ldrb	r3, [r4, #0]
 80040be:	2b2e      	cmp	r3, #46	; 0x2e
 80040c0:	d10c      	bne.n	80040dc <_svfiprintf_r+0x130>
 80040c2:	7863      	ldrb	r3, [r4, #1]
 80040c4:	2b2a      	cmp	r3, #42	; 0x2a
 80040c6:	d135      	bne.n	8004134 <_svfiprintf_r+0x188>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	3402      	adds	r4, #2
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	9203      	str	r2, [sp, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfb8      	it	lt
 80040d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040da:	9305      	str	r3, [sp, #20]
 80040dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041a8 <_svfiprintf_r+0x1fc>
 80040e0:	2203      	movs	r2, #3
 80040e2:	4650      	mov	r0, sl
 80040e4:	7821      	ldrb	r1, [r4, #0]
 80040e6:	f000 f9f9 	bl	80044dc <memchr>
 80040ea:	b140      	cbz	r0, 80040fe <_svfiprintf_r+0x152>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	eba0 000a 	sub.w	r0, r0, sl
 80040f2:	fa03 f000 	lsl.w	r0, r3, r0
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	3401      	adds	r4, #1
 80040fa:	4303      	orrs	r3, r0
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004102:	2206      	movs	r2, #6
 8004104:	4825      	ldr	r0, [pc, #148]	; (800419c <_svfiprintf_r+0x1f0>)
 8004106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800410a:	f000 f9e7 	bl	80044dc <memchr>
 800410e:	2800      	cmp	r0, #0
 8004110:	d038      	beq.n	8004184 <_svfiprintf_r+0x1d8>
 8004112:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <_svfiprintf_r+0x1f4>)
 8004114:	bb1b      	cbnz	r3, 800415e <_svfiprintf_r+0x1b2>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	3307      	adds	r3, #7
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	3308      	adds	r3, #8
 8004120:	9303      	str	r3, [sp, #12]
 8004122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004124:	4433      	add	r3, r6
 8004126:	9309      	str	r3, [sp, #36]	; 0x24
 8004128:	e767      	b.n	8003ffa <_svfiprintf_r+0x4e>
 800412a:	460c      	mov	r4, r1
 800412c:	2001      	movs	r0, #1
 800412e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004132:	e7a5      	b.n	8004080 <_svfiprintf_r+0xd4>
 8004134:	2300      	movs	r3, #0
 8004136:	f04f 0c0a 	mov.w	ip, #10
 800413a:	4619      	mov	r1, r3
 800413c:	3401      	adds	r4, #1
 800413e:	9305      	str	r3, [sp, #20]
 8004140:	4620      	mov	r0, r4
 8004142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004146:	3a30      	subs	r2, #48	; 0x30
 8004148:	2a09      	cmp	r2, #9
 800414a:	d903      	bls.n	8004154 <_svfiprintf_r+0x1a8>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0c5      	beq.n	80040dc <_svfiprintf_r+0x130>
 8004150:	9105      	str	r1, [sp, #20]
 8004152:	e7c3      	b.n	80040dc <_svfiprintf_r+0x130>
 8004154:	4604      	mov	r4, r0
 8004156:	2301      	movs	r3, #1
 8004158:	fb0c 2101 	mla	r1, ip, r1, r2
 800415c:	e7f0      	b.n	8004140 <_svfiprintf_r+0x194>
 800415e:	ab03      	add	r3, sp, #12
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	462a      	mov	r2, r5
 8004164:	4638      	mov	r0, r7
 8004166:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <_svfiprintf_r+0x1f8>)
 8004168:	a904      	add	r1, sp, #16
 800416a:	f3af 8000 	nop.w
 800416e:	1c42      	adds	r2, r0, #1
 8004170:	4606      	mov	r6, r0
 8004172:	d1d6      	bne.n	8004122 <_svfiprintf_r+0x176>
 8004174:	89ab      	ldrh	r3, [r5, #12]
 8004176:	065b      	lsls	r3, r3, #25
 8004178:	f53f af2c 	bmi.w	8003fd4 <_svfiprintf_r+0x28>
 800417c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800417e:	b01d      	add	sp, #116	; 0x74
 8004180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004184:	ab03      	add	r3, sp, #12
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	462a      	mov	r2, r5
 800418a:	4638      	mov	r0, r7
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <_svfiprintf_r+0x1f8>)
 800418e:	a904      	add	r1, sp, #16
 8004190:	f000 f87c 	bl	800428c <_printf_i>
 8004194:	e7eb      	b.n	800416e <_svfiprintf_r+0x1c2>
 8004196:	bf00      	nop
 8004198:	08004698 	.word	0x08004698
 800419c:	080046a2 	.word	0x080046a2
 80041a0:	00000000 	.word	0x00000000
 80041a4:	08003ef5 	.word	0x08003ef5
 80041a8:	0800469e 	.word	0x0800469e

080041ac <_printf_common>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4616      	mov	r6, r2
 80041b2:	4699      	mov	r9, r3
 80041b4:	688a      	ldr	r2, [r1, #8]
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	4607      	mov	r7, r0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bfb8      	it	lt
 80041be:	4613      	movlt	r3, r2
 80041c0:	6033      	str	r3, [r6, #0]
 80041c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c6:	460c      	mov	r4, r1
 80041c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041cc:	b10a      	cbz	r2, 80041d2 <_printf_common+0x26>
 80041ce:	3301      	adds	r3, #1
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	0699      	lsls	r1, r3, #26
 80041d6:	bf42      	ittt	mi
 80041d8:	6833      	ldrmi	r3, [r6, #0]
 80041da:	3302      	addmi	r3, #2
 80041dc:	6033      	strmi	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	f015 0506 	ands.w	r5, r5, #6
 80041e4:	d106      	bne.n	80041f4 <_printf_common+0x48>
 80041e6:	f104 0a19 	add.w	sl, r4, #25
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	6832      	ldr	r2, [r6, #0]
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dc28      	bgt.n	8004246 <_printf_common+0x9a>
 80041f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f8:	1e13      	subs	r3, r2, #0
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	bf18      	it	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	0692      	lsls	r2, r2, #26
 8004202:	d42d      	bmi.n	8004260 <_printf_common+0xb4>
 8004204:	4649      	mov	r1, r9
 8004206:	4638      	mov	r0, r7
 8004208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d020      	beq.n	8004254 <_printf_common+0xa8>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	68e5      	ldr	r5, [r4, #12]
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf18      	it	ne
 800421e:	2500      	movne	r5, #0
 8004220:	6832      	ldr	r2, [r6, #0]
 8004222:	f04f 0600 	mov.w	r6, #0
 8004226:	68a3      	ldr	r3, [r4, #8]
 8004228:	bf08      	it	eq
 800422a:	1aad      	subeq	r5, r5, r2
 800422c:	6922      	ldr	r2, [r4, #16]
 800422e:	bf08      	it	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	4293      	cmp	r3, r2
 8004236:	bfc4      	itt	gt
 8004238:	1a9b      	subgt	r3, r3, r2
 800423a:	18ed      	addgt	r5, r5, r3
 800423c:	341a      	adds	r4, #26
 800423e:	42b5      	cmp	r5, r6
 8004240:	d11a      	bne.n	8004278 <_printf_common+0xcc>
 8004242:	2000      	movs	r0, #0
 8004244:	e008      	b.n	8004258 <_printf_common+0xac>
 8004246:	2301      	movs	r3, #1
 8004248:	4652      	mov	r2, sl
 800424a:	4649      	mov	r1, r9
 800424c:	4638      	mov	r0, r7
 800424e:	47c0      	blx	r8
 8004250:	3001      	adds	r0, #1
 8004252:	d103      	bne.n	800425c <_printf_common+0xb0>
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	3501      	adds	r5, #1
 800425e:	e7c4      	b.n	80041ea <_printf_common+0x3e>
 8004260:	2030      	movs	r0, #48	; 0x30
 8004262:	18e1      	adds	r1, r4, r3
 8004264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800426e:	4422      	add	r2, r4
 8004270:	3302      	adds	r3, #2
 8004272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004276:	e7c5      	b.n	8004204 <_printf_common+0x58>
 8004278:	2301      	movs	r3, #1
 800427a:	4622      	mov	r2, r4
 800427c:	4649      	mov	r1, r9
 800427e:	4638      	mov	r0, r7
 8004280:	47c0      	blx	r8
 8004282:	3001      	adds	r0, #1
 8004284:	d0e6      	beq.n	8004254 <_printf_common+0xa8>
 8004286:	3601      	adds	r6, #1
 8004288:	e7d9      	b.n	800423e <_printf_common+0x92>
	...

0800428c <_printf_i>:
 800428c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004290:	460c      	mov	r4, r1
 8004292:	7e27      	ldrb	r7, [r4, #24]
 8004294:	4691      	mov	r9, r2
 8004296:	2f78      	cmp	r7, #120	; 0x78
 8004298:	4680      	mov	r8, r0
 800429a:	469a      	mov	sl, r3
 800429c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800429e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a2:	d807      	bhi.n	80042b4 <_printf_i+0x28>
 80042a4:	2f62      	cmp	r7, #98	; 0x62
 80042a6:	d80a      	bhi.n	80042be <_printf_i+0x32>
 80042a8:	2f00      	cmp	r7, #0
 80042aa:	f000 80d9 	beq.w	8004460 <_printf_i+0x1d4>
 80042ae:	2f58      	cmp	r7, #88	; 0x58
 80042b0:	f000 80a4 	beq.w	80043fc <_printf_i+0x170>
 80042b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042bc:	e03a      	b.n	8004334 <_printf_i+0xa8>
 80042be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042c2:	2b15      	cmp	r3, #21
 80042c4:	d8f6      	bhi.n	80042b4 <_printf_i+0x28>
 80042c6:	a001      	add	r0, pc, #4	; (adr r0, 80042cc <_printf_i+0x40>)
 80042c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004339 	.word	0x08004339
 80042d4:	080042b5 	.word	0x080042b5
 80042d8:	080042b5 	.word	0x080042b5
 80042dc:	080042b5 	.word	0x080042b5
 80042e0:	080042b5 	.word	0x080042b5
 80042e4:	08004339 	.word	0x08004339
 80042e8:	080042b5 	.word	0x080042b5
 80042ec:	080042b5 	.word	0x080042b5
 80042f0:	080042b5 	.word	0x080042b5
 80042f4:	080042b5 	.word	0x080042b5
 80042f8:	08004447 	.word	0x08004447
 80042fc:	08004369 	.word	0x08004369
 8004300:	08004429 	.word	0x08004429
 8004304:	080042b5 	.word	0x080042b5
 8004308:	080042b5 	.word	0x080042b5
 800430c:	08004469 	.word	0x08004469
 8004310:	080042b5 	.word	0x080042b5
 8004314:	08004369 	.word	0x08004369
 8004318:	080042b5 	.word	0x080042b5
 800431c:	080042b5 	.word	0x080042b5
 8004320:	08004431 	.word	0x08004431
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	600a      	str	r2, [r1, #0]
 8004330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004334:	2301      	movs	r3, #1
 8004336:	e0a4      	b.n	8004482 <_printf_i+0x1f6>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	6808      	ldr	r0, [r1, #0]
 800433c:	062e      	lsls	r6, r5, #24
 800433e:	f100 0304 	add.w	r3, r0, #4
 8004342:	d50a      	bpl.n	800435a <_printf_i+0xce>
 8004344:	6805      	ldr	r5, [r0, #0]
 8004346:	600b      	str	r3, [r1, #0]
 8004348:	2d00      	cmp	r5, #0
 800434a:	da03      	bge.n	8004354 <_printf_i+0xc8>
 800434c:	232d      	movs	r3, #45	; 0x2d
 800434e:	426d      	negs	r5, r5
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004354:	230a      	movs	r3, #10
 8004356:	485e      	ldr	r0, [pc, #376]	; (80044d0 <_printf_i+0x244>)
 8004358:	e019      	b.n	800438e <_printf_i+0x102>
 800435a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800435e:	6805      	ldr	r5, [r0, #0]
 8004360:	600b      	str	r3, [r1, #0]
 8004362:	bf18      	it	ne
 8004364:	b22d      	sxthne	r5, r5
 8004366:	e7ef      	b.n	8004348 <_printf_i+0xbc>
 8004368:	680b      	ldr	r3, [r1, #0]
 800436a:	6825      	ldr	r5, [r4, #0]
 800436c:	1d18      	adds	r0, r3, #4
 800436e:	6008      	str	r0, [r1, #0]
 8004370:	0628      	lsls	r0, r5, #24
 8004372:	d501      	bpl.n	8004378 <_printf_i+0xec>
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	e002      	b.n	800437e <_printf_i+0xf2>
 8004378:	0669      	lsls	r1, r5, #25
 800437a:	d5fb      	bpl.n	8004374 <_printf_i+0xe8>
 800437c:	881d      	ldrh	r5, [r3, #0]
 800437e:	2f6f      	cmp	r7, #111	; 0x6f
 8004380:	bf0c      	ite	eq
 8004382:	2308      	moveq	r3, #8
 8004384:	230a      	movne	r3, #10
 8004386:	4852      	ldr	r0, [pc, #328]	; (80044d0 <_printf_i+0x244>)
 8004388:	2100      	movs	r1, #0
 800438a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438e:	6866      	ldr	r6, [r4, #4]
 8004390:	2e00      	cmp	r6, #0
 8004392:	bfa8      	it	ge
 8004394:	6821      	ldrge	r1, [r4, #0]
 8004396:	60a6      	str	r6, [r4, #8]
 8004398:	bfa4      	itt	ge
 800439a:	f021 0104 	bicge.w	r1, r1, #4
 800439e:	6021      	strge	r1, [r4, #0]
 80043a0:	b90d      	cbnz	r5, 80043a6 <_printf_i+0x11a>
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	d04d      	beq.n	8004442 <_printf_i+0x1b6>
 80043a6:	4616      	mov	r6, r2
 80043a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ac:	fb03 5711 	mls	r7, r3, r1, r5
 80043b0:	5dc7      	ldrb	r7, [r0, r7]
 80043b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043b6:	462f      	mov	r7, r5
 80043b8:	42bb      	cmp	r3, r7
 80043ba:	460d      	mov	r5, r1
 80043bc:	d9f4      	bls.n	80043a8 <_printf_i+0x11c>
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d10b      	bne.n	80043da <_printf_i+0x14e>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07df      	lsls	r7, r3, #31
 80043c6:	d508      	bpl.n	80043da <_printf_i+0x14e>
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	6861      	ldr	r1, [r4, #4]
 80043cc:	4299      	cmp	r1, r3
 80043ce:	bfde      	ittt	le
 80043d0:	2330      	movle	r3, #48	; 0x30
 80043d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043da:	1b92      	subs	r2, r2, r6
 80043dc:	6122      	str	r2, [r4, #16]
 80043de:	464b      	mov	r3, r9
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f8cd a000 	str.w	sl, [sp]
 80043e8:	aa03      	add	r2, sp, #12
 80043ea:	f7ff fedf 	bl	80041ac <_printf_common>
 80043ee:	3001      	adds	r0, #1
 80043f0:	d14c      	bne.n	800448c <_printf_i+0x200>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	b004      	add	sp, #16
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	4834      	ldr	r0, [pc, #208]	; (80044d0 <_printf_i+0x244>)
 80043fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004402:	680e      	ldr	r6, [r1, #0]
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	f856 5b04 	ldr.w	r5, [r6], #4
 800440a:	061f      	lsls	r7, r3, #24
 800440c:	600e      	str	r6, [r1, #0]
 800440e:	d514      	bpl.n	800443a <_printf_i+0x1ae>
 8004410:	07d9      	lsls	r1, r3, #31
 8004412:	bf44      	itt	mi
 8004414:	f043 0320 	orrmi.w	r3, r3, #32
 8004418:	6023      	strmi	r3, [r4, #0]
 800441a:	b91d      	cbnz	r5, 8004424 <_printf_i+0x198>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	2310      	movs	r3, #16
 8004426:	e7af      	b.n	8004388 <_printf_i+0xfc>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f043 0320 	orr.w	r3, r3, #32
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	2378      	movs	r3, #120	; 0x78
 8004432:	4828      	ldr	r0, [pc, #160]	; (80044d4 <_printf_i+0x248>)
 8004434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004438:	e7e3      	b.n	8004402 <_printf_i+0x176>
 800443a:	065e      	lsls	r6, r3, #25
 800443c:	bf48      	it	mi
 800443e:	b2ad      	uxthmi	r5, r5
 8004440:	e7e6      	b.n	8004410 <_printf_i+0x184>
 8004442:	4616      	mov	r6, r2
 8004444:	e7bb      	b.n	80043be <_printf_i+0x132>
 8004446:	680b      	ldr	r3, [r1, #0]
 8004448:	6826      	ldr	r6, [r4, #0]
 800444a:	1d1d      	adds	r5, r3, #4
 800444c:	6960      	ldr	r0, [r4, #20]
 800444e:	600d      	str	r5, [r1, #0]
 8004450:	0635      	lsls	r5, r6, #24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	d501      	bpl.n	800445a <_printf_i+0x1ce>
 8004456:	6018      	str	r0, [r3, #0]
 8004458:	e002      	b.n	8004460 <_printf_i+0x1d4>
 800445a:	0671      	lsls	r1, r6, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0x1ca>
 800445e:	8018      	strh	r0, [r3, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	4616      	mov	r6, r2
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	e7ba      	b.n	80043de <_printf_i+0x152>
 8004468:	680b      	ldr	r3, [r1, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	600a      	str	r2, [r1, #0]
 800446e:	681e      	ldr	r6, [r3, #0]
 8004470:	2100      	movs	r1, #0
 8004472:	4630      	mov	r0, r6
 8004474:	6862      	ldr	r2, [r4, #4]
 8004476:	f000 f831 	bl	80044dc <memchr>
 800447a:	b108      	cbz	r0, 8004480 <_printf_i+0x1f4>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	6060      	str	r0, [r4, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2300      	movs	r3, #0
 8004486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448a:	e7a8      	b.n	80043de <_printf_i+0x152>
 800448c:	4632      	mov	r2, r6
 800448e:	4649      	mov	r1, r9
 8004490:	4640      	mov	r0, r8
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	47d0      	blx	sl
 8004496:	3001      	adds	r0, #1
 8004498:	d0ab      	beq.n	80043f2 <_printf_i+0x166>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	d413      	bmi.n	80044c8 <_printf_i+0x23c>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	4298      	cmp	r0, r3
 80044a6:	bfb8      	it	lt
 80044a8:	4618      	movlt	r0, r3
 80044aa:	e7a4      	b.n	80043f6 <_printf_i+0x16a>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4632      	mov	r2, r6
 80044b0:	4649      	mov	r1, r9
 80044b2:	4640      	mov	r0, r8
 80044b4:	47d0      	blx	sl
 80044b6:	3001      	adds	r0, #1
 80044b8:	d09b      	beq.n	80043f2 <_printf_i+0x166>
 80044ba:	3501      	adds	r5, #1
 80044bc:	68e3      	ldr	r3, [r4, #12]
 80044be:	9903      	ldr	r1, [sp, #12]
 80044c0:	1a5b      	subs	r3, r3, r1
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	dcf2      	bgt.n	80044ac <_printf_i+0x220>
 80044c6:	e7eb      	b.n	80044a0 <_printf_i+0x214>
 80044c8:	2500      	movs	r5, #0
 80044ca:	f104 0619 	add.w	r6, r4, #25
 80044ce:	e7f5      	b.n	80044bc <_printf_i+0x230>
 80044d0:	080046a9 	.word	0x080046a9
 80044d4:	080046ba 	.word	0x080046ba

080044d8 <__retarget_lock_acquire_recursive>:
 80044d8:	4770      	bx	lr

080044da <__retarget_lock_release_recursive>:
 80044da:	4770      	bx	lr

080044dc <memchr>:
 80044dc:	4603      	mov	r3, r0
 80044de:	b510      	push	{r4, lr}
 80044e0:	b2c9      	uxtb	r1, r1
 80044e2:	4402      	add	r2, r0
 80044e4:	4293      	cmp	r3, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	d101      	bne.n	80044ee <memchr+0x12>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e003      	b.n	80044f6 <memchr+0x1a>
 80044ee:	7804      	ldrb	r4, [r0, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	428c      	cmp	r4, r1
 80044f4:	d1f6      	bne.n	80044e4 <memchr+0x8>
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <memcpy>:
 80044f8:	440a      	add	r2, r1
 80044fa:	4291      	cmp	r1, r2
 80044fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004500:	d100      	bne.n	8004504 <memcpy+0xc>
 8004502:	4770      	bx	lr
 8004504:	b510      	push	{r4, lr}
 8004506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800450a:	4291      	cmp	r1, r2
 800450c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004510:	d1f9      	bne.n	8004506 <memcpy+0xe>
 8004512:	bd10      	pop	{r4, pc}

08004514 <memmove>:
 8004514:	4288      	cmp	r0, r1
 8004516:	b510      	push	{r4, lr}
 8004518:	eb01 0402 	add.w	r4, r1, r2
 800451c:	d902      	bls.n	8004524 <memmove+0x10>
 800451e:	4284      	cmp	r4, r0
 8004520:	4623      	mov	r3, r4
 8004522:	d807      	bhi.n	8004534 <memmove+0x20>
 8004524:	1e43      	subs	r3, r0, #1
 8004526:	42a1      	cmp	r1, r4
 8004528:	d008      	beq.n	800453c <memmove+0x28>
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004532:	e7f8      	b.n	8004526 <memmove+0x12>
 8004534:	4601      	mov	r1, r0
 8004536:	4402      	add	r2, r0
 8004538:	428a      	cmp	r2, r1
 800453a:	d100      	bne.n	800453e <memmove+0x2a>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004546:	e7f7      	b.n	8004538 <memmove+0x24>

08004548 <_realloc_r>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	4607      	mov	r7, r0
 800454c:	4614      	mov	r4, r2
 800454e:	460e      	mov	r6, r1
 8004550:	b921      	cbnz	r1, 800455c <_realloc_r+0x14>
 8004552:	4611      	mov	r1, r2
 8004554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004558:	f7ff bc36 	b.w	8003dc8 <_malloc_r>
 800455c:	b922      	cbnz	r2, 8004568 <_realloc_r+0x20>
 800455e:	f7ff fbe7 	bl	8003d30 <_free_r>
 8004562:	4625      	mov	r5, r4
 8004564:	4628      	mov	r0, r5
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	f000 f814 	bl	8004594 <_malloc_usable_size_r>
 800456c:	42a0      	cmp	r0, r4
 800456e:	d20f      	bcs.n	8004590 <_realloc_r+0x48>
 8004570:	4621      	mov	r1, r4
 8004572:	4638      	mov	r0, r7
 8004574:	f7ff fc28 	bl	8003dc8 <_malloc_r>
 8004578:	4605      	mov	r5, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d0f2      	beq.n	8004564 <_realloc_r+0x1c>
 800457e:	4631      	mov	r1, r6
 8004580:	4622      	mov	r2, r4
 8004582:	f7ff ffb9 	bl	80044f8 <memcpy>
 8004586:	4631      	mov	r1, r6
 8004588:	4638      	mov	r0, r7
 800458a:	f7ff fbd1 	bl	8003d30 <_free_r>
 800458e:	e7e9      	b.n	8004564 <_realloc_r+0x1c>
 8004590:	4635      	mov	r5, r6
 8004592:	e7e7      	b.n	8004564 <_realloc_r+0x1c>

08004594 <_malloc_usable_size_r>:
 8004594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004598:	1f18      	subs	r0, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	bfbc      	itt	lt
 800459e:	580b      	ldrlt	r3, [r1, r0]
 80045a0:	18c0      	addlt	r0, r0, r3
 80045a2:	4770      	bx	lr

080045a4 <_init>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr

080045b0 <_fini>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr
