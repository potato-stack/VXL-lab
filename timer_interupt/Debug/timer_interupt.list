
timer_interupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004d04  08004d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e0c  08004e0c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e0c  08004e0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08004e84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004e84  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e13c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262c  00000000  00000000  0002e1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00030808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00031668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000397f  00000000  00000000  000323a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001041f  00000000  00000000  00035d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fd6  00000000  00000000  00046146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf11c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d50  00000000  00000000  000cf170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004cec 	.word	0x08004cec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004cec 	.word	0x08004cec

0800014c <setTimer1>:
int timer3_counter = 0;
int timer4_flag = 0;
int timer4_counter = 0;

void setTimer1( int duration)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a08      	ldr	r2, [pc, #32]	; (8000178 <setTimer1+0x2c>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	1092      	asrs	r2, r2, #2
 800015e:	17db      	asrs	r3, r3, #31
 8000160:	1ad3      	subs	r3, r2, r3
 8000162:	4a06      	ldr	r2, [pc, #24]	; (800017c <setTimer1+0x30>)
 8000164:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000166:	4b06      	ldr	r3, [pc, #24]	; (8000180 <setTimer1+0x34>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	66666667 	.word	0x66666667
 800017c:	20000090 	.word	0x20000090
 8000180:	2000008c 	.word	0x2000008c

08000184 <setTimer2>:

void setTimer2( int duration)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <setTimer2+0x2c>)
 8000190:	fb82 1203 	smull	r1, r2, r2, r3
 8000194:	1092      	asrs	r2, r2, #2
 8000196:	17db      	asrs	r3, r3, #31
 8000198:	1ad3      	subs	r3, r2, r3
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <setTimer2+0x30>)
 800019c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <setTimer2+0x34>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	66666667 	.word	0x66666667
 80001b4:	20000098 	.word	0x20000098
 80001b8:	20000094 	.word	0x20000094

080001bc <setTimer3>:
void setTimer3( int duration)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <setTimer3+0x2c>)
 80001c8:	fb82 1203 	smull	r1, r2, r2, r3
 80001cc:	1092      	asrs	r2, r2, #2
 80001ce:	17db      	asrs	r3, r3, #31
 80001d0:	1ad3      	subs	r3, r2, r3
 80001d2:	4a06      	ldr	r2, [pc, #24]	; (80001ec <setTimer3+0x30>)
 80001d4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <setTimer3+0x34>)
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	66666667 	.word	0x66666667
 80001ec:	200000a0 	.word	0x200000a0
 80001f0:	2000009c 	.word	0x2000009c

080001f4 <setTimer4>:
void setTimer4( int duration)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4a08      	ldr	r2, [pc, #32]	; (8000220 <setTimer4+0x2c>)
 8000200:	fb82 1203 	smull	r1, r2, r2, r3
 8000204:	1092      	asrs	r2, r2, #2
 8000206:	17db      	asrs	r3, r3, #31
 8000208:	1ad3      	subs	r3, r2, r3
 800020a:	4a06      	ldr	r2, [pc, #24]	; (8000224 <setTimer4+0x30>)
 800020c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <setTimer4+0x34>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	66666667 	.word	0x66666667
 8000224:	200000a8 	.word	0x200000a8
 8000228:	200000a4 	.word	0x200000a4

0800022c <timerRun>:
{
	return timer4_counter*TIMER_CYCLE;
}

void timerRun()
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <timerRun+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	dd0b      	ble.n	8000250 <timerRun+0x24>
	{
		timer1_counter--;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <timerRun+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3b01      	subs	r3, #1
 800023e:	4a1e      	ldr	r2, [pc, #120]	; (80002b8 <timerRun+0x8c>)
 8000240:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <timerRun+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	dc02      	bgt.n	8000250 <timerRun+0x24>
		{
			timer1_flag = 1;
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <timerRun+0x90>)
 800024c:	2201      	movs	r2, #1
 800024e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <timerRun+0x94>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	dd0b      	ble.n	8000270 <timerRun+0x44>
	{
		timer2_counter--;
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <timerRun+0x94>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	3b01      	subs	r3, #1
 800025e:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <timerRun+0x94>)
 8000260:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <timerRun+0x94>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dc02      	bgt.n	8000270 <timerRun+0x44>
		{
			timer2_flag = 1;
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <timerRun+0x98>)
 800026c:	2201      	movs	r2, #1
 800026e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <timerRun+0x9c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	dd0b      	ble.n	8000290 <timerRun+0x64>
	{
			timer3_counter--;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <timerRun+0x9c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3b01      	subs	r3, #1
 800027e:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <timerRun+0x9c>)
 8000280:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0)
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <timerRun+0x9c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dc02      	bgt.n	8000290 <timerRun+0x64>
			{
				timer3_flag = 1;
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <timerRun+0xa0>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
			}
	}
	if(timer4_counter > 0)
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <timerRun+0xa4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	dd0b      	ble.n	80002b0 <timerRun+0x84>
	{
			timer4_counter--;
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <timerRun+0xa4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <timerRun+0xa4>)
 80002a0:	6013      	str	r3, [r2, #0]
			if(timer4_counter <= 0)
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <timerRun+0xa4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dc02      	bgt.n	80002b0 <timerRun+0x84>
			{
				timer4_flag = 1;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <timerRun+0xa8>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
			}
	}
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	20000090 	.word	0x20000090
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	20000098 	.word	0x20000098
 80002c4:	20000094 	.word	0x20000094
 80002c8:	200000a0 	.word	0x200000a0
 80002cc:	2000009c 	.word	0x2000009c
 80002d0:	200000a8 	.word	0x200000a8
 80002d4:	200000a4 	.word	0x200000a4

080002d8 <new_task>:
#include "advanced_scheduler.h"

adv_SCH_list S;

advTasks* new_task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
	advTasks *temp = malloc(sizeof(advTasks));
 80002e4:	2018      	movs	r0, #24
 80002e6:	f004 f8af 	bl	8004448 <malloc>
 80002ea:	4603      	mov	r3, r0
 80002ec:	617b      	str	r3, [r7, #20]
	temp->pTask = pFunction;
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	601a      	str	r2, [r3, #0]
	temp->Delay = DELAY/ADV_TIMER_CYCLE;
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <new_task+0x54>)
 80002f8:	fba2 2303 	umull	r2, r3, r2, r3
 80002fc:	08da      	lsrs	r2, r3, #3
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	605a      	str	r2, [r3, #4]
	temp->Period = PERIOD/ADV_TIMER_CYCLE;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <new_task+0x54>)
 8000306:	fba2 2303 	umull	r2, r3, r2, r3
 800030a:	08da      	lsrs	r2, r3, #3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	609a      	str	r2, [r3, #8]
	temp->RunMe = 0;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	2200      	movs	r2, #0
 8000314:	731a      	strb	r2, [r3, #12]
	temp->next = NULL;
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
	temp->ID   = DELAY;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	611a      	str	r2, [r3, #16]
	return temp;
 8000322:	697b      	ldr	r3, [r7, #20]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	cccccccd 	.word	0xcccccccd

08000330 <adv_SCH_Init>:

void adv_SCH_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	S.head = NULL;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <adv_SCH_Init+0x18>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
	S.size = 0;
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <adv_SCH_Init+0x18>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	20000100 	.word	0x20000100

0800034c <adv_SCH_push>:

void adv_SCH_push(advTasks *task)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	if(S.size == ADV_SCH_MAX_TASKS) return;
 8000354:	4b35      	ldr	r3, [pc, #212]	; (800042c <adv_SCH_push+0xe0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b28      	cmp	r3, #40	; 0x28
 800035a:	d061      	beq.n	8000420 <adv_SCH_push+0xd4>
	//if this is the first task to add
	if(S.head == NULL)
 800035c:	4b33      	ldr	r3, [pc, #204]	; (800042c <adv_SCH_push+0xe0>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d108      	bne.n	8000376 <adv_SCH_push+0x2a>
	{
		S.head = task;
 8000364:	4a31      	ldr	r2, [pc, #196]	; (800042c <adv_SCH_push+0xe0>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6053      	str	r3, [r2, #4]
		S.size++;
 800036a:	4b30      	ldr	r3, [pc, #192]	; (800042c <adv_SCH_push+0xe0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	4a2e      	ldr	r2, [pc, #184]	; (800042c <adv_SCH_push+0xe0>)
 8000372:	6013      	str	r3, [r2, #0]
		return;
 8000374:	e055      	b.n	8000422 <adv_SCH_push+0xd6>
	}
	//if this task is neither the first task or have to add to the head of list
	//we search for it positoin
	advTasks *temp = S.head;
 8000376:	4b2d      	ldr	r3, [pc, #180]	; (800042c <adv_SCH_push+0xe0>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	60fb      	str	r3, [r7, #12]
	advTasks *prev = NULL;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]

	while(temp != NULL)
 8000380:	e011      	b.n	80003a6 <adv_SCH_push+0x5a>
	{
		//output_error(temp->Delay);
		if(task->Delay >= temp->Delay)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	429a      	cmp	r2, r3
 800038c:	d30f      	bcc.n	80003ae <adv_SCH_push+0x62>
		{
			task->Delay -= temp->Delay;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	1ad2      	subs	r2, r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	605a      	str	r2, [r3, #4]
		}
		else
			break;
		prev = temp;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	60bb      	str	r3, [r7, #8]
		temp = temp->next;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	60fb      	str	r3, [r7, #12]
	while(temp != NULL)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1ea      	bne.n	8000382 <adv_SCH_push+0x36>
 80003ac:	e000      	b.n	80003b0 <adv_SCH_push+0x64>
			break;
 80003ae:	bf00      	nop
	}

	if(prev == NULL)//The first task at head is bigger
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d115      	bne.n	80003e2 <adv_SCH_push+0x96>
	{
		S.head->Delay -= task->Delay;
 80003b6:	4b1d      	ldr	r3, [pc, #116]	; (800042c <adv_SCH_push+0xe0>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	6859      	ldr	r1, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	4b1a      	ldr	r3, [pc, #104]	; (800042c <adv_SCH_push+0xe0>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	605a      	str	r2, [r3, #4]
		task->next = S.head;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <adv_SCH_push+0xe0>)
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	615a      	str	r2, [r3, #20]
		S.head = task;
 80003d0:	4a16      	ldr	r2, [pc, #88]	; (800042c <adv_SCH_push+0xe0>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6053      	str	r3, [r2, #4]
		S.size++;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <adv_SCH_push+0xe0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3301      	adds	r3, #1
 80003dc:	4a13      	ldr	r2, [pc, #76]	; (800042c <adv_SCH_push+0xe0>)
 80003de:	6013      	str	r3, [r2, #0]
		task->next = temp;
		temp->Delay -= task->Delay;
		prev->next = task;
		S.size++;
	}
	return;
 80003e0:	e01f      	b.n	8000422 <adv_SCH_push+0xd6>
	else if(temp == NULL)//Even the last task is smaller
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d108      	bne.n	80003fa <adv_SCH_push+0xae>
		prev->next = task;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	615a      	str	r2, [r3, #20]
		S.size++;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <adv_SCH_push+0xe0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <adv_SCH_push+0xe0>)
 80003f6:	6013      	str	r3, [r2, #0]
	return;
 80003f8:	e013      	b.n	8000422 <adv_SCH_push+0xd6>
		task->next = temp;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	615a      	str	r2, [r3, #20]
		temp->Delay -= task->Delay;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	605a      	str	r2, [r3, #4]
		prev->next = task;
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	615a      	str	r2, [r3, #20]
		S.size++;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <adv_SCH_push+0xe0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <adv_SCH_push+0xe0>)
 800041c:	6013      	str	r3, [r2, #0]
	return;
 800041e:	e000      	b.n	8000422 <adv_SCH_push+0xd6>
	if(S.size == ADV_SCH_MAX_TASKS) return;
 8000420:	bf00      	nop
}
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000100 	.word	0x20000100

08000430 <adv_SCH_pop>:

advTasks* adv_SCH_pop()
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
	if(S.head != NULL)
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <adv_SCH_pop+0x40>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d011      	beq.n	8000462 <adv_SCH_pop+0x32>
	{
		advTasks* temp = S.head;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <adv_SCH_pop+0x40>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	607b      	str	r3, [r7, #4]
		S.head = S.head->next;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <adv_SCH_pop+0x40>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <adv_SCH_pop+0x40>)
 800044c:	6053      	str	r3, [r2, #4]
		temp->next = NULL;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
		S.size--;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <adv_SCH_pop+0x40>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3b01      	subs	r3, #1
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <adv_SCH_pop+0x40>)
 800045c:	6013      	str	r3, [r2, #0]
		return temp;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	e000      	b.n	8000464 <adv_SCH_pop+0x34>
	}
	return NULL;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000100 	.word	0x20000100

08000474 <adv_SCH_Add_Task>:

void adv_SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
	if(S.size == ADV_SCH_MAX_TASKS) return;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <adv_SCH_Add_Task+0x30>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b28      	cmp	r3, #40	; 0x28
 8000486:	d009      	beq.n	800049c <adv_SCH_Add_Task+0x28>

	//if this is the first task to add
	advTasks *temp = new_task(pFunction, DELAY, PERIOD);
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	68f8      	ldr	r0, [r7, #12]
 800048e:	f7ff ff23 	bl	80002d8 <new_task>
 8000492:	6178      	str	r0, [r7, #20]
	adv_SCH_push(temp);
 8000494:	6978      	ldr	r0, [r7, #20]
 8000496:	f7ff ff59 	bl	800034c <adv_SCH_push>
 800049a:	e000      	b.n	800049e <adv_SCH_Add_Task+0x2a>
	if(S.size == ADV_SCH_MAX_TASKS) return;
 800049c:	bf00      	nop
}
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000100 	.word	0x20000100

080004a8 <adv_SCH_Update>:


void adv_SCH_Update(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	if(S.head != NULL)
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <adv_SCH_Update+0x40>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d014      	beq.n	80004de <adv_SCH_Update+0x36>
	{
		if(S.head->Delay > 0)
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <adv_SCH_Update+0x40>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d004      	beq.n	80004c8 <adv_SCH_Update+0x20>
		{
			S.head->Delay--;
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <adv_SCH_Update+0x40>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	685a      	ldr	r2, [r3, #4]
 80004c4:	3a01      	subs	r2, #1
 80004c6:	605a      	str	r2, [r3, #4]
		}
		if(S.head->Delay == 0)
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <adv_SCH_Update+0x40>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d105      	bne.n	80004de <adv_SCH_Update+0x36>
		{
			S.head->RunMe++;
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <adv_SCH_Update+0x40>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	7b1a      	ldrb	r2, [r3, #12]
 80004d8:	3201      	adds	r2, #1
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000100 	.word	0x20000100

080004ec <adv_SCH_Dispatch_Tasks>:

void adv_SCH_Dispatch_Tasks(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	if(S.head->RunMe > 0)
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	7b1b      	ldrb	r3, [r3, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d026      	beq.n	800054a <adv_SCH_Dispatch_Tasks+0x5e>
	{
		(*S.head->pTask)();
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4798      	blx	r3
		S.head->RunMe--;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	7b1a      	ldrb	r2, [r3, #12]
 800050a:	3a01      	subs	r2, #1
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	731a      	strb	r2, [r3, #12]
		advTasks* currTask = adv_SCH_pop();
 8000510:	f7ff ff8e 	bl	8000430 <adv_SCH_pop>
 8000514:	6078      	str	r0, [r7, #4]
		if(currTask->Period)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d012      	beq.n	8000544 <adv_SCH_Dispatch_Tasks+0x58>
		{
			currTask->Delay = currTask->Period;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	605a      	str	r2, [r3, #4]
			adv_SCH_push(currTask);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff10 	bl	800034c <adv_SCH_push>
			if(S.head->Delay == 0)
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d109      	bne.n	800054a <adv_SCH_Dispatch_Tasks+0x5e>
			{
				S.head->RunMe++;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <adv_SCH_Dispatch_Tasks+0x68>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	7b1a      	ldrb	r2, [r3, #12]
 800053c:	3201      	adds	r2, #1
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	731a      	strb	r2, [r3, #12]
		else
		{
			adv_SCH_Delete_Task(currTask);
		}
	}
}
 8000542:	e002      	b.n	800054a <adv_SCH_Dispatch_Tasks+0x5e>
			adv_SCH_Delete_Task(currTask);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f807 	bl	8000558 <adv_SCH_Delete_Task>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000100 	.word	0x20000100

08000558 <adv_SCH_Delete_Task>:

void adv_SCH_Delete_Task(advTasks *task)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if(task != NULL)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <adv_SCH_Delete_Task+0x14>
		free(task);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f003 ff76 	bl	8004458 <free>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <Red_On>:
 */
#include "display_control.h"
#include "main.h"
//First road leds' functions--------------------------------------------------------------------------------------------------------
void Red_On()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <Red_On+0x20>)
 8000580:	f001 feeb 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2120      	movs	r1, #32
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <Red_On+0x24>)
 800058a:	f001 fee6 	bl	800235a <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010800 	.word	0x40010800
 8000598:	40010c00 	.word	0x40010c00

0800059c <Green_On>:

void Green_On()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <Green_On+0x20>)
 80005a8:	f001 fed7 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2120      	movs	r1, #32
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <Green_On+0x24>)
 80005b2:	f001 fed2 	bl	800235a <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <Yellow_On>:

void Yellow_On()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <Yellow_On+0x20>)
 80005d0:	f001 fec3 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <Yellow_On+0x24>)
 80005da:	f001 febe 	bl	800235a <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40010c00 	.word	0x40010c00

080005ec <Red1_On>:

//Second road leds functions--------------------------------------------------------------------------------------------------------
void Red1_On()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_3_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2110      	movs	r1, #16
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <Red1_On+0x1c>)
 80005f6:	f001 feb0 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	4802      	ldr	r0, [pc, #8]	; (8000608 <Red1_On+0x1c>)
 8000600:	f001 feab 	bl	800235a <HAL_GPIO_WritePin>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010c00 	.word	0x40010c00

0800060c <Green1_On>:

void Green1_On()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_3_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <Green1_On+0x1c>)
 8000616:	f001 fea0 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <Green1_On+0x1c>)
 8000620:	f001 fe9b 	bl	800235a <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40010c00 	.word	0x40010c00

0800062c <Yellow1_On>:

void Yellow1_On()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_3_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <Yellow1_On+0x1c>)
 8000636:	f001 fe90 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2108      	movs	r1, #8
 800063e:	4802      	ldr	r0, [pc, #8]	; (8000648 <Yellow1_On+0x1c>)
 8000640:	f001 fe8b 	bl	800235a <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40010c00 	.word	0x40010c00

0800064c <Redp_On>:

//Leds function for crossing road--------------------------------------------------------------------------------------------------------
void Redp_On()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_p_1_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <Redp_On+0x20>)
 8000658:	f001 fe7f 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_p_2_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <Redp_On+0x24>)
 8000664:	f001 fe79 	bl	800235a <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010c00 	.word	0x40010c00
 8000670:	40010800 	.word	0x40010800

08000674 <Greenp_On>:
void Greenp_On()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_p_1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <Greenp_On+0x20>)
 8000680:	f001 fe6b 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_p_2_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4803      	ldr	r0, [pc, #12]	; (8000698 <Greenp_On+0x24>)
 800068c:	f001 fe65 	bl	800235a <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40010800 	.word	0x40010800

0800069c <Reset>:

//Led reset functions---------------------------------------------------------------------------------------------------------------
void Reset()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,Led_1_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <Reset+0x34>)
 80006a8:	f001 fe57 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2120      	movs	r1, #32
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <Reset+0x38>)
 80006b2:	f001 fe52 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_3_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <Reset+0x34>)
 80006bc:	f001 fe4d 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Led_4_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2108      	movs	r1, #8
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <Reset+0x38>)
 80006c6:	f001 fe48 	bl	800235a <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <Reset_p>:

void Reset_p()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Led_p_1_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <Reset_p+0x20>)
 80006e4:	f001 fe39 	bl	800235a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,Led_p_2_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <Reset_p+0x24>)
 80006f0:	f001 fe33 	bl	800235a <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	40010800 	.word	0x40010800

08000700 <fsm_automatic_run>:
#include "SOFTWARE_TIMER.h"
#include "main.h"
#include "input_reading.h"

void fsm_automatic_run()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	switch(status1)
 8000704:	4b9f      	ldr	r3, [pc, #636]	; (8000984 <fsm_automatic_run+0x284>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b04      	cmp	r3, #4
 800070a:	f200 81ad 	bhi.w	8000a68 <fsm_automatic_run+0x368>
 800070e:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <fsm_automatic_run+0x14>)
 8000710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000714:	08000729 	.word	0x08000729
 8000718:	0800075d 	.word	0x0800075d
 800071c:	08000811 	.word	0x08000811
 8000720:	080008cb 	.word	0x080008cb
 8000724:	080009b1 	.word	0x080009b1
	{
	case INIT:
		status1 = AUTO_RED_GREEN;
 8000728:	4b96      	ldr	r3, [pc, #600]	; (8000984 <fsm_automatic_run+0x284>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
		set_road1_time(red_time);
 800072e:	4b96      	ldr	r3, [pc, #600]	; (8000988 <fsm_automatic_run+0x288>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fcee 	bl	8001114 <set_road1_time>
		set_road2_time(green_time);
 8000738:	4b94      	ldr	r3, [pc, #592]	; (800098c <fsm_automatic_run+0x28c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fcff 	bl	8001140 <set_road2_time>
		setTimer1(green_time);
 8000742:	4b92      	ldr	r3, [pc, #584]	; (800098c <fsm_automatic_run+0x28c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd00 	bl	800014c <setTimer1>
		setTimer2(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f7ff fd19 	bl	8000184 <setTimer2>
	    status2 = WAITING;
 8000752:	4b8f      	ldr	r3, [pc, #572]	; (8000990 <fsm_automatic_run+0x290>)
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	601a      	str	r2, [r3, #0]
		break;
 800075a:	e18e      	b.n	8000a7a <fsm_automatic_run+0x37a>
	case AUTO_RED_GREEN:
		Red_On();
 800075c:	f7ff ff0a 	bl	8000574 <Red_On>
		Green1_On();
 8000760:	f7ff ff54 	bl	800060c <Green1_On>
		if(timer2_flag == 1)
 8000764:	4b8b      	ldr	r3, [pc, #556]	; (8000994 <fsm_automatic_run+0x294>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d105      	bne.n	8000778 <fsm_automatic_run+0x78>
		{
			count_down_show();
 800076c:	f000 fcfe 	bl	800116c <count_down_show>
			setTimer2(CYCLE);
 8000770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000774:	f7ff fd06 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 8000778:	4b87      	ldr	r3, [pc, #540]	; (8000998 <fsm_automatic_run+0x298>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d111      	bne.n	80007a4 <fsm_automatic_run+0xa4>
		{
			status1 = AUTO_RED_YELLOW;
 8000780:	4b80      	ldr	r3, [pc, #512]	; (8000984 <fsm_automatic_run+0x284>)
 8000782:	2202      	movs	r2, #2
 8000784:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 8000786:	4b85      	ldr	r3, [pc, #532]	; (800099c <fsm_automatic_run+0x29c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fcc2 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 8000790:	4b82      	ldr	r3, [pc, #520]	; (800099c <fsm_automatic_run+0x29c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fcd3 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 800079a:	4b80      	ldr	r3, [pc, #512]	; (800099c <fsm_automatic_run+0x29c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fcd4 	bl	800014c <setTimer1>
		}
		if(button_flag[1] == 1)
 80007a4:	4b7e      	ldr	r3, [pc, #504]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d10d      	bne.n	80007c8 <fsm_automatic_run+0xc8>
		{
			change_mode(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 fe1f 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 80007b2:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
			status1 = MAN_RED_GREEN;
 80007b8:	4b72      	ldr	r3, [pc, #456]	; (8000984 <fsm_automatic_run+0x284>)
 80007ba:	220b      	movs	r2, #11
 80007bc:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 80007be:	4b79      	ldr	r3, [pc, #484]	; (80009a4 <fsm_automatic_run+0x2a4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fcc2 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 80007c8:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d108      	bne.n	80007e2 <fsm_automatic_run+0xe2>
			button_flag[0]=0;
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
			change_mode(2);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f000 fe0a 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 80007dc:	4b69      	ldr	r3, [pc, #420]	; (8000984 <fsm_automatic_run+0x284>)
 80007de:	220f      	movs	r2, #15
 80007e0:	601a      	str	r2, [r3, #0]
		}
		if(button_flag[3] == 1)
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	f040 8140 	bne.w	8000a6c <fsm_automatic_run+0x36c>
		{
			status2 = AUTO_RED_GREEN;
 80007ec:	4b68      	ldr	r3, [pc, #416]	; (8000990 <fsm_automatic_run+0x290>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 80007f2:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <fsm_automatic_run+0x2a8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fce0 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 80007fc:	4b68      	ldr	r3, [pc, #416]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
			checking = 1;
 8000802:	4b6a      	ldr	r3, [pc, #424]	; (80009ac <fsm_automatic_run+0x2ac>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 8000808:	2014      	movs	r0, #20
 800080a:	f7ff fcf3 	bl	80001f4 <setTimer4>
		}
		break;
 800080e:	e12d      	b.n	8000a6c <fsm_automatic_run+0x36c>
	case AUTO_RED_YELLOW:
		Red_On();
 8000810:	f7ff feb0 	bl	8000574 <Red_On>
		Yellow1_On();
 8000814:	f7ff ff0a 	bl	800062c <Yellow1_On>
		if(timer2_flag == 1)
 8000818:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <fsm_automatic_run+0x294>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d105      	bne.n	800082c <fsm_automatic_run+0x12c>
		{
			count_down_show();
 8000820:	f000 fca4 	bl	800116c <count_down_show>

			setTimer2(CYCLE);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000828:	f7ff fcac 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 800082c:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <fsm_automatic_run+0x298>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d111      	bne.n	8000858 <fsm_automatic_run+0x158>
		{
			status1 = AUTO_GREEN_RED;
 8000834:	4b53      	ldr	r3, [pc, #332]	; (8000984 <fsm_automatic_run+0x284>)
 8000836:	2203      	movs	r2, #3
 8000838:	601a      	str	r2, [r3, #0]
			set_road1_time(green_time);
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <fsm_automatic_run+0x28c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc68 	bl	8001114 <set_road1_time>
			set_road2_time(red_time);
 8000844:	4b50      	ldr	r3, [pc, #320]	; (8000988 <fsm_automatic_run+0x288>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fc79 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 800084e:	4b4f      	ldr	r3, [pc, #316]	; (800098c <fsm_automatic_run+0x28c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fc7a 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 8000858:	4b51      	ldr	r3, [pc, #324]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d108      	bne.n	8000872 <fsm_automatic_run+0x172>
			button_flag[0]=0;
 8000860:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
			change_mode(2);
 8000866:	2002      	movs	r0, #2
 8000868:	f000 fdc2 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 800086c:	4b45      	ldr	r3, [pc, #276]	; (8000984 <fsm_automatic_run+0x284>)
 800086e:	220f      	movs	r2, #15
 8000870:	601a      	str	r2, [r3, #0]
		}
		if(button_flag[1] == 1)
 8000872:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d110      	bne.n	800089c <fsm_automatic_run+0x19c>
		{
			change_mode(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fdb8 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 8000880:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
			status1 = MAN_RED_YELLOW;
 8000886:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <fsm_automatic_run+0x284>)
 8000888:	220c      	movs	r2, #12
 800088a:	601a      	str	r2, [r3, #0]
			status2 = MAN_RED_YELLOW;
 800088c:	4b40      	ldr	r3, [pc, #256]	; (8000990 <fsm_automatic_run+0x290>)
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <fsm_automatic_run+0x2a4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fc58 	bl	800014c <setTimer1>
		}
		if(button_flag[3] == 1)
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	f040 80e5 	bne.w	8000a70 <fsm_automatic_run+0x370>
		{
			status2 = AUTO_RED_YELLOW;
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <fsm_automatic_run+0x290>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 80008ac:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <fsm_automatic_run+0x2a8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc83 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <fsm_automatic_run+0x2a0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
			checking = 1;
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <fsm_automatic_run+0x2ac>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 80008c2:	2014      	movs	r0, #20
 80008c4:	f7ff fc96 	bl	80001f4 <setTimer4>
		}
		break;
 80008c8:	e0d2      	b.n	8000a70 <fsm_automatic_run+0x370>
	case AUTO_GREEN_RED:
		Red1_On();
 80008ca:	f7ff fe8f 	bl	80005ec <Red1_On>
		Green_On();
 80008ce:	f7ff fe65 	bl	800059c <Green_On>
		if(timer2_flag == 1)
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <fsm_automatic_run+0x294>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <fsm_automatic_run+0x1e6>
		{
			count_down_show();
 80008da:	f000 fc47 	bl	800116c <count_down_show>

			setTimer2(CYCLE);
 80008de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e2:	f7ff fc4f 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <fsm_automatic_run+0x298>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d111      	bne.n	8000912 <fsm_automatic_run+0x212>
		{
			status1 = AUTO_YELLOW_RED;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <fsm_automatic_run+0x284>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <fsm_automatic_run+0x29c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fc0b 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <fsm_automatic_run+0x29c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fc1c 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <fsm_automatic_run+0x29c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc1d 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d108      	bne.n	800092c <fsm_automatic_run+0x22c>
			button_flag[0]=0;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
			change_mode(2);
 8000920:	2002      	movs	r0, #2
 8000922:	f000 fd65 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <fsm_automatic_run+0x284>)
 8000928:	220f      	movs	r2, #15
 800092a:	601a      	str	r2, [r3, #0]
				}
		if(button_flag[1] == 1)
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d110      	bne.n	8000956 <fsm_automatic_run+0x256>
		{
			change_mode(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fd5b 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <fsm_automatic_run+0x2a0>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
			status1 = MAN_GREEN_RED;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <fsm_automatic_run+0x284>)
 8000942:	220d      	movs	r2, #13
 8000944:	601a      	str	r2, [r3, #0]
			status2 = MAN_GREEN_RED;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <fsm_automatic_run+0x290>)
 8000948:	220d      	movs	r2, #13
 800094a:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <fsm_automatic_run+0x2a4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fbfb 	bl	800014c <setTimer1>
		}
		if(button_flag[3] == 1)
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	2b01      	cmp	r3, #1
 800095c:	f040 808a 	bne.w	8000a74 <fsm_automatic_run+0x374>
		{
			status2 = AUTO_GREEN_RED;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <fsm_automatic_run+0x290>)
 8000962:	2203      	movs	r2, #3
 8000964:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <fsm_automatic_run+0x2a8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc26 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <fsm_automatic_run+0x2a0>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
			checking = 1;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <fsm_automatic_run+0x2ac>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 800097c:	2014      	movs	r0, #20
 800097e:	f7ff fc39 	bl	80001f4 <setTimer4>
		}
		break;
 8000982:	e077      	b.n	8000a74 <fsm_automatic_run+0x374>
 8000984:	200000b4 	.word	0x200000b4
 8000988:	200000c4 	.word	0x200000c4
 800098c:	200000bc 	.word	0x200000bc
 8000990:	200000b8 	.word	0x200000b8
 8000994:	20000094 	.word	0x20000094
 8000998:	2000008c 	.word	0x2000008c
 800099c:	200000c0 	.word	0x200000c0
 80009a0:	20000108 	.word	0x20000108
 80009a4:	200000c8 	.word	0x200000c8
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	200000d8 	.word	0x200000d8
	case AUTO_YELLOW_RED:
		Red1_On();
 80009b0:	f7ff fe1c 	bl	80005ec <Red1_On>
		Yellow_On();
 80009b4:	f7ff fe06 	bl	80005c4 <Yellow_On>
		if(timer2_flag == 1)
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <fsm_automatic_run+0x380>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <fsm_automatic_run+0x2cc>
		{
			count_down_show();
 80009c0:	f000 fbd4 	bl	800116c <count_down_show>

			setTimer2(CYCLE);
 80009c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c8:	f7ff fbdc 	bl	8000184 <setTimer2>
		}
		if(timer1_flag == 1)
 80009cc:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <fsm_automatic_run+0x384>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d111      	bne.n	80009f8 <fsm_automatic_run+0x2f8>
		{
			status1 = AUTO_RED_GREEN;
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <fsm_automatic_run+0x388>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
			set_road1_time(red_time);
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <fsm_automatic_run+0x38c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fb98 	bl	8001114 <set_road1_time>
			set_road2_time(green_time);
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <fsm_automatic_run+0x390>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 fba9 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <fsm_automatic_run+0x390>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fbaa 	bl	800014c <setTimer1>
		}
		if(button_flag[0]==1){
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <fsm_automatic_run+0x394>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <fsm_automatic_run+0x312>
			button_flag[0]=0;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
			change_mode(2);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 fcf2 	bl	80013f0 <change_mode>
			status1=TUNNING_GREEN;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <fsm_automatic_run+0x388>)
 8000a0e:	220f      	movs	r2, #15
 8000a10:	601a      	str	r2, [r3, #0]
				}
		if(button_flag[1] == 1)
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d110      	bne.n	8000a3c <fsm_automatic_run+0x33c>
		{
			change_mode(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fce8 	bl	80013f0 <change_mode>
			button_flag[1]=0;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
			status1 = MAN_YELLOW_RED;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <fsm_automatic_run+0x388>)
 8000a28:	220e      	movs	r2, #14
 8000a2a:	601a      	str	r2, [r3, #0]
			status2 = MAN_YELLOW_RED;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <fsm_automatic_run+0x398>)
 8000a2e:	220e      	movs	r2, #14
 8000a30:	601a      	str	r2, [r3, #0]
			setTimer1(timeout_duration);
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <fsm_automatic_run+0x39c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fb88 	bl	800014c <setTimer1>
		}
		if(button_flag[3] == 1)
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d119      	bne.n	8000a78 <fsm_automatic_run+0x378>
		{
			status2 = AUTO_YELLOW_RED;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <fsm_automatic_run+0x398>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	601a      	str	r2, [r3, #0]
			setTimer3(pedestrian_duration);
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <fsm_automatic_run+0x3a0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbb4 	bl	80001bc <setTimer3>
			button_flag[3] = 0;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <fsm_automatic_run+0x394>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
			checking = 1;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <fsm_automatic_run+0x3a4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
			setTimer4(20);
 8000a60:	2014      	movs	r0, #20
 8000a62:	f7ff fbc7 	bl	80001f4 <setTimer4>
		}
		break;
 8000a66:	e007      	b.n	8000a78 <fsm_automatic_run+0x378>
	default:
		break;
 8000a68:	bf00      	nop
 8000a6a:	e006      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e004      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a70:	bf00      	nop
 8000a72:	e002      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a74:	bf00      	nop
 8000a76:	e000      	b.n	8000a7a <fsm_automatic_run+0x37a>
		break;
 8000a78:	bf00      	nop
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000094 	.word	0x20000094
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	200000b4 	.word	0x200000b4
 8000a8c:	200000c4 	.word	0x200000c4
 8000a90:	200000bc 	.word	0x200000bc
 8000a94:	20000108 	.word	0x20000108
 8000a98:	200000b8 	.word	0x200000b8
 8000a9c:	200000c8 	.word	0x200000c8
 8000aa0:	200000cc 	.word	0x200000cc
 8000aa4:	200000d8 	.word	0x200000d8

08000aa8 <fsm_manual_run>:
#include "fsm_manual.h"
#include "input_reading.h"
#include "display_control.h"

void fsm_manual_run()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	switch(status1)
 8000aac:	4b78      	ldr	r3, [pc, #480]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3b0b      	subs	r3, #11
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	f200 80e0 	bhi.w	8000c78 <fsm_manual_run+0x1d0>
 8000ab8:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <fsm_manual_run+0x18>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad1 	.word	0x08000ad1
 8000ac4:	08000b39 	.word	0x08000b39
 8000ac8:	08000ba5 	.word	0x08000ba5
 8000acc:	08000c0f 	.word	0x08000c0f
	{
	case MAN_RED_GREEN:
		Green1_On();
 8000ad0:	f7ff fd9c 	bl	800060c <Green1_On>
		if(timer1_flag == 1)
 8000ad4:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d114      	bne.n	8000b06 <fsm_manual_run+0x5e>
		{
			change_mode(0);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fc87 	bl	80013f0 <change_mode>
			status1 = AUTO_RED_GREEN;
 8000ae2:	4b6b      	ldr	r3, [pc, #428]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
			set_road1_time(red_time);
 8000ae8:	4b6b      	ldr	r3, [pc, #428]	; (8000c98 <fsm_manual_run+0x1f0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fb11 	bl	8001114 <set_road1_time>
			set_road2_time(green_time);
 8000af2:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fb22 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 8000afc:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb23 	bl	800014c <setTimer1>
		}
		if(button_flag[1] == 1)
 8000b06:	4b66      	ldr	r3, [pc, #408]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	f040 80b6 	bne.w	8000c7c <fsm_manual_run+0x1d4>
		{
			button_flag[1]=0;
 8000b10:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
			status1 = MAN_RED_YELLOW;
 8000b16:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000b18:	220c      	movs	r2, #12
 8000b1a:	601a      	str	r2, [r3, #0]
			status2 = MAN_RED_YELLOW;
 8000b1c:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000b22:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb48 	bl	80001bc <setTimer3>
			//Set timer1 here to exit manual mode when time out
			setTimer1(timeout_duration);
 8000b2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb0b 	bl	800014c <setTimer1>
		}
		break;
 8000b36:	e0a1      	b.n	8000c7c <fsm_manual_run+0x1d4>
	case MAN_RED_YELLOW:
		Red_On();
 8000b38:	f7ff fd1c 	bl	8000574 <Red_On>
		Yellow1_On();
 8000b3c:	f7ff fd76 	bl	800062c <Yellow1_On>
		if(timer1_flag == 1)
 8000b40:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d114      	bne.n	8000b72 <fsm_manual_run+0xca>
		{
			change_mode(0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fc51 	bl	80013f0 <change_mode>
			status1 = AUTO_RED_YELLOW;
 8000b4e:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 8000b54:	4b55      	ldr	r3, [pc, #340]	; (8000cac <fsm_manual_run+0x204>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fadb 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 8000b5e:	4b53      	ldr	r3, [pc, #332]	; (8000cac <fsm_manual_run+0x204>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 faec 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 8000b68:	4b50      	ldr	r3, [pc, #320]	; (8000cac <fsm_manual_run+0x204>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff faed 	bl	800014c <setTimer1>
		}
		if(button_flag[1]  == 1)
 8000b72:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	f040 8082 	bne.w	8000c80 <fsm_manual_run+0x1d8>
		{
			button_flag[1]=0;
 8000b7c:	4b48      	ldr	r3, [pc, #288]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
			status1=MAN_GREEN_RED;
 8000b82:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000b84:	220d      	movs	r2, #13
 8000b86:	601a      	str	r2, [r3, #0]
			status2=MAN_GREEN_RED;
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000b8a:	220d      	movs	r2, #13
 8000b8c:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fb12 	bl	80001bc <setTimer3>
			setTimer1(timeout_duration);
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <fsm_manual_run+0x200>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fad5 	bl	800014c <setTimer1>
		}
		break;
 8000ba2:	e06d      	b.n	8000c80 <fsm_manual_run+0x1d8>
	case MAN_GREEN_RED:
		Red1_On();
 8000ba4:	f7ff fd22 	bl	80005ec <Red1_On>
		Green_On();
 8000ba8:	f7ff fcf8 	bl	800059c <Green_On>
		if(timer1_flag == 1)
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d114      	bne.n	8000bde <fsm_manual_run+0x136>
		{
			change_mode(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fc1b 	bl	80013f0 <change_mode>
			status1=AUTO_GREEN_RED;
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	601a      	str	r2, [r3, #0]
			set_road1_time(green_time);
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 faa5 	bl	8001114 <set_road1_time>
			set_road2_time(red_time);
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <fsm_manual_run+0x1f0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fab6 	bl	8001140 <set_road2_time>
			setTimer1(green_time);
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <fsm_manual_run+0x1f4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fab7 	bl	800014c <setTimer1>
		}
		if(button_flag[1] == 1)
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d14e      	bne.n	8000c84 <fsm_manual_run+0x1dc>
		{
			button_flag[1]=0;
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
			status1=MAN_YELLOW_RED;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000bee:	220e      	movs	r2, #14
 8000bf0:	601a      	str	r2, [r3, #0]
			status2=MAN_YELLOW_RED;
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000bf4:	220e      	movs	r2, #14
 8000bf6:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <fsm_manual_run+0x200>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fadd 	bl	80001bc <setTimer3>
			setTimer1(timeout_duration);
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <fsm_manual_run+0x200>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faa0 	bl	800014c <setTimer1>
		}
		break;
 8000c0c:	e03a      	b.n	8000c84 <fsm_manual_run+0x1dc>
	case MAN_YELLOW_RED:
		Red1_On();
 8000c0e:	f7ff fced 	bl	80005ec <Red1_On>
		Yellow_On();
 8000c12:	f7ff fcd7 	bl	80005c4 <Yellow_On>
		if(timer1_flag == 1)
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <fsm_manual_run+0x1ec>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d114      	bne.n	8000c48 <fsm_manual_run+0x1a0>
		{
			change_mode(0);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fbe6 	bl	80013f0 <change_mode>
			status1=AUTO_YELLOW_RED;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
			set_road1_time(yellow_time);
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <fsm_manual_run+0x204>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fa70 	bl	8001114 <set_road1_time>
			set_road2_time(yellow_time);
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <fsm_manual_run+0x204>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fa81 	bl	8001140 <set_road2_time>
			setTimer1(yellow_time);
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <fsm_manual_run+0x204>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fa82 	bl	800014c <setTimer1>
		}
		if(button_flag[1]  == 1)
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d11b      	bne.n	8000c88 <fsm_manual_run+0x1e0>
		{
			button_flag[1]=0;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <fsm_manual_run+0x1f8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
			status1=MAN_RED_GREEN;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <fsm_manual_run+0x1e8>)
 8000c58:	220b      	movs	r2, #11
 8000c5a:	601a      	str	r2, [r3, #0]
			status2=MAN_RED_GREEN;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <fsm_manual_run+0x1fc>)
 8000c5e:	220b      	movs	r2, #11
 8000c60:	601a      	str	r2, [r3, #0]
			//Set timer3 here to turn off pedestrian led after exit manual mode
			setTimer3(timeout_duration);
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <fsm_manual_run+0x200>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff faa8 	bl	80001bc <setTimer3>
			setTimer1(timeout_duration);
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <fsm_manual_run+0x200>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fa6b 	bl	800014c <setTimer1>
		}
		break;
 8000c76:	e007      	b.n	8000c88 <fsm_manual_run+0x1e0>
	default:
		break;
 8000c78:	bf00      	nop
 8000c7a:	e006      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c7c:	bf00      	nop
 8000c7e:	e004      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c80:	bf00      	nop
 8000c82:	e002      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c84:	bf00      	nop
 8000c86:	e000      	b.n	8000c8a <fsm_manual_run+0x1e2>
		break;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000b4 	.word	0x200000b4
 8000c94:	2000008c 	.word	0x2000008c
 8000c98:	200000c4 	.word	0x200000c4
 8000c9c:	200000bc 	.word	0x200000bc
 8000ca0:	20000108 	.word	0x20000108
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	200000c8 	.word	0x200000c8
 8000cac:	200000c0 	.word	0x200000c0

08000cb0 <fsm_pedestrian>:
#include "fsm_pedestrian.h"
#include "display_control.h"
int buzz_state = 0;

void fsm_pedestrian()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	if(checking == 1)
 8000cb4:	4b98      	ldr	r3, [pc, #608]	; (8000f18 <fsm_pedestrian+0x268>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d10c      	bne.n	8000cd6 <fsm_pedestrian+0x26>
	{
		if(status2 != status1)
 8000cbc:	4b97      	ldr	r3, [pc, #604]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b97      	ldr	r3, [pc, #604]	; (8000f20 <fsm_pedestrian+0x270>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d002      	beq.n	8000cce <fsm_pedestrian+0x1e>
		{
			sound_loud(OFF);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fbe3 	bl	8001494 <sound_loud>
		}
		status2 = status1;
 8000cce:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <fsm_pedestrian+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a92      	ldr	r2, [pc, #584]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000cd4:	6013      	str	r3, [r2, #0]
	}
	switch(status2)
 8000cd6:	4b91      	ldr	r3, [pc, #580]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2b0d      	cmp	r3, #13
 8000cde:	f200 8110 	bhi.w	8000f02 <fsm_pedestrian+0x252>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <fsm_pedestrian+0x38>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d21 	.word	0x08000d21
 8000cec:	08000d4f 	.word	0x08000d4f
 8000cf0:	08000d77 	.word	0x08000d77
 8000cf4:	08000deb 	.word	0x08000deb
 8000cf8:	08000f03 	.word	0x08000f03
 8000cfc:	08000f03 	.word	0x08000f03
 8000d00:	08000f03 	.word	0x08000f03
 8000d04:	08000f03 	.word	0x08000f03
 8000d08:	08000f03 	.word	0x08000f03
 8000d0c:	08000f03 	.word	0x08000f03
 8000d10:	08000e5f 	.word	0x08000e5f
 8000d14:	08000e85 	.word	0x08000e85
 8000d18:	08000eb1 	.word	0x08000eb1
 8000d1c:	08000ed7 	.word	0x08000ed7
	{
	case AUTO_RED_GREEN :
		if(timer3_flag == 1)
 8000d20:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <fsm_pedestrian+0x274>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10f      	bne.n	8000d48 <fsm_pedestrian+0x98>
		{
			sound_loud(OFF);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 fbb3 	bl	8001494 <sound_loud>
			Reset_p();
 8000d2e:	f7ff fcd3 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000d32:	4b7a      	ldr	r3, [pc, #488]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000d3a:	4b77      	ldr	r3, [pc, #476]	; (8000f18 <fsm_pedestrian+0x268>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff fa57 	bl	80001f4 <setTimer4>
		}
		else Redp_On();
		break;
 8000d46:	e0e5      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Redp_On();
 8000d48:	f7ff fc80 	bl	800064c <Redp_On>
		break;
 8000d4c:	e0e2      	b.n	8000f14 <fsm_pedestrian+0x264>
	case AUTO_RED_YELLOW:
		if(timer3_flag == 1)
 8000d4e:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <fsm_pedestrian+0x274>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10c      	bne.n	8000d70 <fsm_pedestrian+0xc0>
		{
			sound_loud(OFF);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fb9c 	bl	8001494 <sound_loud>
			Reset_p();
 8000d5c:	f7ff fcbc 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000d60:	4b6e      	ldr	r3, [pc, #440]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fa43 	bl	80001f4 <setTimer4>
		}
		else Redp_On();
		break;
 8000d6e:	e0d1      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Redp_On();
 8000d70:	f7ff fc6c 	bl	800064c <Redp_On>
		break;
 8000d74:	e0ce      	b.n	8000f14 <fsm_pedestrian+0x264>
	case AUTO_GREEN_RED:
		if(count2 <= 5 && timer4_flag == 1)
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <fsm_pedestrian+0x278>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	dc1e      	bgt.n	8000dbc <fsm_pedestrian+0x10c>
 8000d7e:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <fsm_pedestrian+0x27c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11a      	bne.n	8000dbc <fsm_pedestrian+0x10c>
		{
				if(buzz_state == 1)
 8000d86:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <fsm_pedestrian+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d107      	bne.n	8000d9e <fsm_pedestrian+0xee>
				{
					sound_loud(ON);
 8000d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d92:	f000 fb7f 	bl	8001494 <sound_loud>
					buzz_state = 0;
 8000d96:	4b66      	ldr	r3, [pc, #408]	; (8000f30 <fsm_pedestrian+0x280>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e005      	b.n	8000daa <fsm_pedestrian+0xfa>
				}
				else
				{
					sound_loud(OFF);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 fb78 	bl	8001494 <sound_loud>
					buzz_state = 1;
 8000da4:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <fsm_pedestrian+0x280>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
				}
				setTimer4(count2*50 + 10);
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <fsm_pedestrian+0x278>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2232      	movs	r2, #50	; 0x32
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	330a      	adds	r3, #10
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fa1c 	bl	80001f4 <setTimer4>
		}
		if(timer3_flag == 1)
 8000dbc:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <fsm_pedestrian+0x274>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10f      	bne.n	8000de4 <fsm_pedestrian+0x134>
		{
			sound_loud(OFF);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fb65 	bl	8001494 <sound_loud>
			Reset_p();
 8000dca:	f7ff fc85 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000dd6:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <fsm_pedestrian+0x268>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fa09 	bl	80001f4 <setTimer4>
		}
		else Greenp_On();
		break;
 8000de2:	e097      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Greenp_On();
 8000de4:	f7ff fc46 	bl	8000674 <Greenp_On>
		break;
 8000de8:	e094      	b.n	8000f14 <fsm_pedestrian+0x264>
	case AUTO_YELLOW_RED:
		if(count2<= 5 && timer4_flag == 1)
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <fsm_pedestrian+0x278>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	dc1e      	bgt.n	8000e30 <fsm_pedestrian+0x180>
 8000df2:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <fsm_pedestrian+0x27c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d11a      	bne.n	8000e30 <fsm_pedestrian+0x180>
		{
				if(buzz_state == 1)
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <fsm_pedestrian+0x280>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d107      	bne.n	8000e12 <fsm_pedestrian+0x162>
				{
					sound_loud(ON);
 8000e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e06:	f000 fb45 	bl	8001494 <sound_loud>
					buzz_state = 0;
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <fsm_pedestrian+0x280>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e005      	b.n	8000e1e <fsm_pedestrian+0x16e>
				}
				else
				{
					sound_loud(OFF);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 fb3e 	bl	8001494 <sound_loud>
					buzz_state = 1;
 8000e18:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <fsm_pedestrian+0x280>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
				}
				setTimer4(count2*50 + 10);
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <fsm_pedestrian+0x278>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2232      	movs	r2, #50	; 0x32
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	330a      	adds	r3, #10
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff f9e2 	bl	80001f4 <setTimer4>

		}
		if(timer3_flag == 1)
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <fsm_pedestrian+0x274>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10f      	bne.n	8000e58 <fsm_pedestrian+0x1a8>
		{
			sound_loud(OFF);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 fb2b 	bl	8001494 <sound_loud>
			Reset_p();
 8000e3e:	f7ff fc4b 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <fsm_pedestrian+0x268>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff f9cf 	bl	80001f4 <setTimer4>
		}
		else Greenp_On();
		break;
 8000e56:	e05d      	b.n	8000f14 <fsm_pedestrian+0x264>
		else Greenp_On();
 8000e58:	f7ff fc0c 	bl	8000674 <Greenp_On>
		break;
 8000e5c:	e05a      	b.n	8000f14 <fsm_pedestrian+0x264>
	case MAN_RED_GREEN:
		Redp_On();
 8000e5e:	f7ff fbf5 	bl	800064c <Redp_On>
		if(timer3_flag == 1)
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <fsm_pedestrian+0x274>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d14d      	bne.n	8000f06 <fsm_pedestrian+0x256>
		{
			sound_loud(OFF);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 fb12 	bl	8001494 <sound_loud>
			Reset_p();
 8000e70:	f7ff fc32 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff f9b9 	bl	80001f4 <setTimer4>
		}
		break;
 8000e82:	e040      	b.n	8000f06 <fsm_pedestrian+0x256>
	case MAN_RED_YELLOW:
		Redp_On();
 8000e84:	f7ff fbe2 	bl	800064c <Redp_On>
		if(timer3_flag == 1)
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <fsm_pedestrian+0x274>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d13c      	bne.n	8000f0a <fsm_pedestrian+0x25a>
		{
			sound_loud(OFF);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 faff 	bl	8001494 <sound_loud>
			Reset_p();
 8000e96:	f7ff fc1f 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <fsm_pedestrian+0x268>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff f9a3 	bl	80001f4 <setTimer4>
		}
		break;
 8000eae:	e02c      	b.n	8000f0a <fsm_pedestrian+0x25a>
	case MAN_GREEN_RED:
		Greenp_On();
 8000eb0:	f7ff fbe0 	bl	8000674 <Greenp_On>
		if(timer3_flag == 1)
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <fsm_pedestrian+0x274>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d128      	bne.n	8000f0e <fsm_pedestrian+0x25e>
		{
			sound_loud(OFF);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fae9 	bl	8001494 <sound_loud>
			Reset_p();
 8000ec2:	f7ff fc09 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff f990 	bl	80001f4 <setTimer4>
		}
		break;
 8000ed4:	e01b      	b.n	8000f0e <fsm_pedestrian+0x25e>
	case MAN_YELLOW_RED:
		Greenp_On();
 8000ed6:	f7ff fbcd 	bl	8000674 <Greenp_On>
		if(timer3_flag == 1)
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <fsm_pedestrian+0x274>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d117      	bne.n	8000f12 <fsm_pedestrian+0x262>
		{
			sound_loud(OFF);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fad6 	bl	8001494 <sound_loud>
			Reset_p();
 8000ee8:	f7ff fbf6 	bl	80006d8 <Reset_p>
			status2 = WAITING;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <fsm_pedestrian+0x26c>)
 8000eee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef2:	601a      	str	r2, [r3, #0]
			checking = 0;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <fsm_pedestrian+0x268>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
			setTimer4(0);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff f97a 	bl	80001f4 <setTimer4>
		}
		break;
 8000f00:	e007      	b.n	8000f12 <fsm_pedestrian+0x262>

	default: break;
 8000f02:	bf00      	nop
 8000f04:	e006      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f06:	bf00      	nop
 8000f08:	e004      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f0a:	bf00      	nop
 8000f0c:	e002      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f0e:	bf00      	nop
 8000f10:	e000      	b.n	8000f14 <fsm_pedestrian+0x264>
		break;
 8000f12:	bf00      	nop
}
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000d8 	.word	0x200000d8
 8000f1c:	200000b8 	.word	0x200000b8
 8000f20:	200000b4 	.word	0x200000b4
 8000f24:	2000009c 	.word	0x2000009c
 8000f28:	200000d4 	.word	0x200000d4
 8000f2c:	200000a4 	.word	0x200000a4
 8000f30:	200000ac 	.word	0x200000ac

08000f34 <fsm_tunning_run>:
#include "input_reading.h"
#include "fsm_tunning.h"
#include "display_control.h"


void fsm_tunning_run(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	switch (status1){
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <fsm_tunning_run+0x130>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d002      	beq.n	8000f46 <fsm_tunning_run+0x12>
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d043      	beq.n	8000fcc <fsm_tunning_run+0x98>

		}
		break;

	}
}
 8000f44:	e08b      	b.n	800105e <fsm_tunning_run+0x12a>
		Green_On();
 8000f46:	f7ff fb29 	bl	800059c <Green_On>
		Green1_On();
 8000f4a:	f7ff fb5f 	bl	800060c <Green1_On>
		if(button_flag[0]==1)
 8000f4e:	4b46      	ldr	r3, [pc, #280]	; (8001068 <fsm_tunning_run+0x134>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <fsm_tunning_run+0x2e>
			button_flag[0]=0;
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <fsm_tunning_run+0x134>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
			status1=TUNNING_YELLOW;
 8000f5c:	4b41      	ldr	r3, [pc, #260]	; (8001064 <fsm_tunning_run+0x130>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	601a      	str	r2, [r3, #0]
		if(button_flag[1]==1)
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <fsm_tunning_run+0x134>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d111      	bne.n	8000f8e <fsm_tunning_run+0x5a>
			button_flag[1]=0;
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <fsm_tunning_run+0x134>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
			output_time(0,green_time+1000);
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <fsm_tunning_run+0x138>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f9fc 	bl	8001378 <output_time>
			set_green_time(green_time+1000);
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <fsm_tunning_run+0x138>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f873 	bl	8001074 <set_green_time>
		if(button_flag[2]==1)
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <fsm_tunning_run+0x134>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d160      	bne.n	8001058 <fsm_tunning_run+0x124>
			button_flag[2]=0;
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <fsm_tunning_run+0x134>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
			if(green_time > 1000)
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <fsm_tunning_run+0x138>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa4:	dd0f      	ble.n	8000fc6 <fsm_tunning_run+0x92>
				output_time(0,green_time-1000);
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <fsm_tunning_run+0x138>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f9e1 	bl	8001378 <output_time>
				set_green_time(green_time-1000);
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <fsm_tunning_run+0x138>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f858 	bl	8001074 <set_green_time>
	break;
 8000fc4:	e048      	b.n	8001058 <fsm_tunning_run+0x124>
				output_error();
 8000fc6:	f000 f9bb 	bl	8001340 <output_error>
	break;
 8000fca:	e045      	b.n	8001058 <fsm_tunning_run+0x124>
		Yellow_On();
 8000fcc:	f7ff fafa 	bl	80005c4 <Yellow_On>
		Yellow1_On();
 8000fd0:	f7ff fb2c 	bl	800062c <Yellow1_On>
		if(button_flag[0]==1){
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <fsm_tunning_run+0x134>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <fsm_tunning_run+0xba>
			button_flag[0]=0;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <fsm_tunning_run+0x134>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
			change_mode(0);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 fa04 	bl	80013f0 <change_mode>
			status1=INIT;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <fsm_tunning_run+0x130>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
		if(button_flag[1]==1)
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <fsm_tunning_run+0x134>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d111      	bne.n	800101a <fsm_tunning_run+0xe6>
			button_flag[1]=0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <fsm_tunning_run+0x134>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
			output_time(1,yellow_time+1000);
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <fsm_tunning_run+0x13c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001004:	4619      	mov	r1, r3
 8001006:	2001      	movs	r0, #1
 8001008:	f000 f9b6 	bl	8001378 <output_time>
			set_yellow_time(yellow_time+1000);
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <fsm_tunning_run+0x13c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f847 	bl	80010a8 <set_yellow_time>
		if(button_flag[2]==1)
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <fsm_tunning_run+0x134>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d11c      	bne.n	800105c <fsm_tunning_run+0x128>
			button_flag[2]=0;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <fsm_tunning_run+0x134>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
			if(yellow_time > 1000)
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <fsm_tunning_run+0x13c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001030:	dd0f      	ble.n	8001052 <fsm_tunning_run+0x11e>
				output_time(1,yellow_time-1000);
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <fsm_tunning_run+0x13c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800103a:	4619      	mov	r1, r3
 800103c:	2001      	movs	r0, #1
 800103e:	f000 f99b 	bl	8001378 <output_time>
				set_yellow_time(yellow_time-1000);
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <fsm_tunning_run+0x13c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f82c 	bl	80010a8 <set_yellow_time>
		break;
 8001050:	e004      	b.n	800105c <fsm_tunning_run+0x128>
				output_error();
 8001052:	f000 f975 	bl	8001340 <output_error>
		break;
 8001056:	e001      	b.n	800105c <fsm_tunning_run+0x128>
	break;
 8001058:	bf00      	nop
 800105a:	e000      	b.n	800105e <fsm_tunning_run+0x12a>
		break;
 800105c:	bf00      	nop
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000b4 	.word	0x200000b4
 8001068:	20000108 	.word	0x20000108
 800106c:	200000bc 	.word	0x200000bc
 8001070:	200000c0 	.word	0x200000c0

08001074 <set_green_time>:
//int sound_flag = 0;
int checking = 0;

//Function for setting led time
void set_green_time(int time)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	green_time = time;
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <set_green_time+0x28>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
	red_time = green_time + yellow_time;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <set_green_time+0x28>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <set_green_time+0x2c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <set_green_time+0x30>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200000bc 	.word	0x200000bc
 80010a0:	200000c0 	.word	0x200000c0
 80010a4:	200000c4 	.word	0x200000c4

080010a8 <set_yellow_time>:
void set_yellow_time(int time)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	yellow_time = time;
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <set_yellow_time+0x28>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
	red_time = green_time + yellow_time;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <set_yellow_time+0x2c>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <set_yellow_time+0x28>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <set_yellow_time+0x30>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200000c0 	.word	0x200000c0
 80010d4:	200000bc 	.word	0x200000bc
 80010d8:	200000c4 	.word	0x200000c4

080010dc <set_timeout_duration>:
void set_timeout_duration(int time)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	timeout_duration = time;
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <set_timeout_duration+0x18>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	200000c8 	.word	0x200000c8

080010f8 <set_pedestrian_duration>:
void set_pedestrian_duration(int time)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	pedestrian_duration = time;
 8001100:	4a03      	ldr	r2, [pc, #12]	; (8001110 <set_pedestrian_duration+0x18>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200000cc 	.word	0x200000cc

08001114 <set_road1_time>:
//Function for setting display time in terminal
void set_road1_time(int time)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	count1 = time/CYCLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <set_road1_time+0x24>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1192      	asrs	r2, r2, #6
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <set_road1_time+0x28>)
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	10624dd3 	.word	0x10624dd3
 800113c:	200000d0 	.word	0x200000d0

08001140 <set_road2_time>:
void set_road2_time(int time)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	count2 = time/CYCLE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <set_road2_time+0x24>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1192      	asrs	r2, r2, #6
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <set_road2_time+0x28>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	10624dd3 	.word	0x10624dd3
 8001168:	200000d4 	.word	0x200000d4

0800116c <count_down_show>:
void count_down_show()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	display_time(count1, count2);
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <count_down_show+0x3c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <count_down_show+0x40>)
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f96c 	bl	8001458 <display_time>
	if(count1 > 0)
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <count_down_show+0x3c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd04      	ble.n	8001192 <count_down_show+0x26>
		count1-= 1;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <count_down_show+0x3c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <count_down_show+0x3c>)
 8001190:	6013      	str	r3, [r2, #0]
	if(count2 > 0)
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <count_down_show+0x40>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd04      	ble.n	80011a4 <count_down_show+0x38>
		count2-= 1;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <count_down_show+0x40>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a02      	ldr	r2, [pc, #8]	; (80011ac <count_down_show+0x40>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	200000d4 	.word	0x200000d4

080011b0 <subkeyProcess>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

//unsigned char is_button_pressed_1s()

void subkeyProcess(unsigned char i)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <subkeyProcess+0x20>)
 80011be:	2101      	movs	r1, #1
 80011c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000108 	.word	0x20000108

080011d4 <button_reading>:
void button_reading()
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	e097      	b.n	8001310 <button_reading+0x13c>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	494f      	ldr	r1, [pc, #316]	; (8001324 <button_reading+0x150>)
 80011e6:	5c89      	ldrb	r1, [r1, r2]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <button_reading+0x154>)
 80011ea:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	494e      	ldr	r1, [pc, #312]	; (800132c <button_reading+0x158>)
 80011f2:	5c89      	ldrb	r1, [r1, r2]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <button_reading+0x150>)
 80011f6:	54d1      	strb	r1, [r2, r3]
		switch (i)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d832      	bhi.n	8001264 <button_reading+0x90>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <button_reading+0x30>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	08001229 	.word	0x08001229
 800120c:	0800123d 	.word	0x0800123d
 8001210:	08001251 	.word	0x08001251
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_1_GPIO_Port, button_1_Pin);
 8001214:	79fc      	ldrb	r4, [r7, #7]
 8001216:	2102      	movs	r1, #2
 8001218:	4845      	ldr	r0, [pc, #276]	; (8001330 <button_reading+0x15c>)
 800121a:	f001 f887 	bl	800232c <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <button_reading+0x158>)
 8001224:	551a      	strb	r2, [r3, r4]
				break;
 8001226:	e022      	b.n	800126e <button_reading+0x9a>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_2_GPIO_Port, button_2_Pin);
 8001228:	79fc      	ldrb	r4, [r7, #7]
 800122a:	2120      	movs	r1, #32
 800122c:	4840      	ldr	r0, [pc, #256]	; (8001330 <button_reading+0x15c>)
 800122e:	f001 f87d 	bl	800232c <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <button_reading+0x158>)
 8001238:	551a      	strb	r2, [r3, r4]
				break;
 800123a:	e018      	b.n	800126e <button_reading+0x9a>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_3_GPIO_Port, button_3_Pin);
 800123c:	79fc      	ldrb	r4, [r7, #7]
 800123e:	2101      	movs	r1, #1
 8001240:	483c      	ldr	r0, [pc, #240]	; (8001334 <button_reading+0x160>)
 8001242:	f001 f873 	bl	800232c <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <button_reading+0x158>)
 800124c:	551a      	strb	r2, [r3, r4]
				break;
 800124e:	e00e      	b.n	800126e <button_reading+0x9a>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button_p_GPIO_Port, button_p_Pin);
 8001250:	79fc      	ldrb	r4, [r7, #7]
 8001252:	2102      	movs	r1, #2
 8001254:	4837      	ldr	r0, [pc, #220]	; (8001334 <button_reading+0x160>)
 8001256:	f001 f869 	bl	800232c <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <button_reading+0x158>)
 8001260:	551a      	strb	r2, [r3, r4]
				break;
 8001262:	e004      	b.n	800126e <button_reading+0x9a>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <button_reading+0x158>)
 8001268:	2101      	movs	r1, #1
 800126a:	54d1      	strb	r1, [r2, r3]
				break;
 800126c:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <button_reading+0x154>)
 8001272:	5cd2      	ldrb	r2, [r2, r3]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	492b      	ldr	r1, [pc, #172]	; (8001324 <button_reading+0x150>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	429a      	cmp	r2, r3
 800127c:	d145      	bne.n	800130a <button_reading+0x136>
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <button_reading+0x150>)
 8001282:	5cd2      	ldrb	r2, [r2, r3]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4929      	ldr	r1, [pc, #164]	; (800132c <button_reading+0x158>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
 800128a:	429a      	cmp	r2, r3
 800128c:	d13d      	bne.n	800130a <button_reading+0x136>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])//button is pressed only
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4a29      	ldr	r2, [pc, #164]	; (8001338 <button_reading+0x164>)
 8001292:	5cd2      	ldrb	r2, [r2, r3]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4925      	ldr	r1, [pc, #148]	; (800132c <button_reading+0x158>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	429a      	cmp	r2, r3
 800129c:	d015      	beq.n	80012ca <button_reading+0xf6>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4922      	ldr	r1, [pc, #136]	; (800132c <button_reading+0x158>)
 80012a4:	5c89      	ldrb	r1, [r1, r2]
 80012a6:	4a24      	ldr	r2, [pc, #144]	; (8001338 <button_reading+0x164>)
 80012a8:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4a22      	ldr	r2, [pc, #136]	; (8001338 <button_reading+0x164>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d12a      	bne.n	800130a <button_reading+0x136>
				{
					counterForButtonPress1s[i] = DURATION_FOR_PRESSING;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <button_reading+0x168>)
 80012b8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff74 	bl	80011b0 <subkeyProcess>
 80012c8:	e01f      	b.n	800130a <button_reading+0x136>
				}
			}
			else// button is hold
			{
				if(i!=0)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01c      	beq.n	800130a <button_reading+0x136>
				{
					counterForButtonPress1s[i]--;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a1a      	ldr	r2, [pc, #104]	; (800133c <button_reading+0x168>)
 80012d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012d8:	3a01      	subs	r2, #1
 80012da:	b291      	uxth	r1, r2
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <button_reading+0x168>)
 80012de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress1s[i] == 0)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <button_reading+0x168>)
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <button_reading+0x136>
					{
						if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <button_reading+0x164>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <button_reading+0x136>
						{
							counterForButtonPress1s[i] = DURATION_FOR_HOLDING;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <button_reading+0x168>)
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							subkeyProcess(i);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff53 	bl	80011b0 <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	3301      	adds	r3, #1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b03      	cmp	r3, #3
 8001314:	f67f af64 	bls.w	80011e0 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	200000e4 	.word	0x200000e4
 8001328:	200000e0 	.word	0x200000e0
 800132c:	200000e8 	.word	0x200000e8
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	200000dc 	.word	0x200000dc
 800133c:	200000ec 	.word	0x200000ec

08001340 <output_error>:
{
	char str[30];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%---------------\r"), 1000);
}
void output_error(int temp)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	char str[30];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%d\r", temp), 1000);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <output_error+0x30>)
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f947 	bl	80045e4 <siprintf>
 8001356:	4603      	mov	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	f107 0108 	add.w	r1, r7, #8
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <output_error+0x34>)
 8001364:	f002 fbbb 	bl	8003ade <HAL_UART_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	08004d04 	.word	0x08004d04
 8001374:	200001a8 	.word	0x200001a8

08001378 <output_time>:
void output_time(int index, int time)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	char str[30];
	char arr[2][20] = {"Green time","Yellow time"};
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <output_time+0x68>)
 8001384:	f107 0408 	add.w	r4, r7, #8
 8001388:	461d      	mov	r5, r3
 800138a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001396:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s: %d\r",arr[index],time/1000), 1000);
 800139a:	f107 0108 	add.w	r1, r7, #8
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4419      	add	r1, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <output_time+0x6c>)
 80013ae:	fb82 0203 	smull	r0, r2, r2, r3
 80013b2:	1192      	asrs	r2, r2, #6
 80013b4:	17db      	asrs	r3, r3, #31
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013bc:	460a      	mov	r2, r1
 80013be:	490a      	ldr	r1, [pc, #40]	; (80013e8 <output_time+0x70>)
 80013c0:	f003 f910 	bl	80045e4 <siprintf>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <output_time+0x74>)
 80013d2:	f002 fb84 	bl	8003ade <HAL_UART_Transmit>
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	; 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}
 80013de:	bf00      	nop
 80013e0:	08004d24 	.word	0x08004d24
 80013e4:	10624dd3 	.word	0x10624dd3
 80013e8:	08004d1c 	.word	0x08004d1c
 80013ec:	200001a8 	.word	0x200001a8

080013f0 <change_mode>:
void change_mode(int index)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b09a      	sub	sp, #104	; 0x68
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	char arr[3][20] = {"Auto mode","Manual mode", "Tuning mode"};
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <change_mode+0x5c>)
 80013fa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char str[30];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "Change to %s\r", arr[index]), 1000);
 8001414:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	18ca      	adds	r2, r1, r3
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4909      	ldr	r1, [pc, #36]	; (8001450 <change_mode+0x60>)
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f8da 	bl	80045e4 <siprintf>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <change_mode+0x64>)
 800143e:	f002 fb4e 	bl	8003ade <HAL_UART_Transmit>
}
 8001442:	bf00      	nop
 8001444:	3768      	adds	r7, #104	; 0x68
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	08004d5c 	.word	0x08004d5c
 8001450:	08004d4c 	.word	0x08004d4c
 8001454:	200001a8 	.word	0x200001a8

08001458 <display_time>:

void display_time(int time1, int time2)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	char str[50];
	HAL_UART_Transmit(&huart2, str, sprintf(str, "road1: %d road2: %d\r",time1, time2), 1000);
 8001462:	f107 000c 	add.w	r0, r7, #12
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <display_time+0x34>)
 800146c:	f003 f8ba 	bl	80045e4 <siprintf>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <display_time+0x38>)
 800147e:	f002 fb2e 	bl	8003ade <HAL_UART_Transmit>
}
 8001482:	bf00      	nop
 8001484:	3740      	adds	r7, #64	; 0x40
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08004d98 	.word	0x08004d98
 8001490:	200001a8 	.word	0x200001a8

08001494 <sound_loud>:

void sound_loud(int frequency)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare (&htim3, TIM_CHANNEL_1, frequency);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <sound_loud+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000118 	.word	0x20000118

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f000 fb9e 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f862 	bl	8001584 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init ();
 80014c0:	f000 f988 	bl	80017d4 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80014c4:	f000 f89a 	bl	80015fc <MX_TIM2_Init>
  MX_GPIO_Init();
 80014c8:	f000 f984 	bl	80017d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014cc:	f000 f958 	bl	8001780 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80014d0:	f000 f8e0 	bl	8001694 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014d4:	2100      	movs	r1, #0
 80014d6:	4822      	ldr	r0, [pc, #136]	; (8001560 <main+0xac>)
 80014d8:	f001 fc66 	bl	8002da8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <main+0xb0>)
 80014de:	f001 fbbf 	bl	8002c60 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //initial state ===================================================================
  Reset();
 80014e2:	f7ff f8db 	bl	800069c <Reset>
  Reset_p();
 80014e6:	f7ff f8f7 	bl	80006d8 <Reset_p>
  adv_SCH_Init();
 80014ea:	f7fe ff21 	bl	8000330 <adv_SCH_Init>
  status1 = 0;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <main+0xb4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
  set_green_time(5000);
 80014f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80014f8:	f7ff fdbc 	bl	8001074 <set_green_time>
  set_yellow_time(5000);
 80014fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001500:	f7ff fdd2 	bl	80010a8 <set_yellow_time>
  set_timeout_duration(20000);
 8001504:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001508:	f7ff fde8 	bl	80010dc <set_timeout_duration>
  set_pedestrian_duration(60000);
 800150c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001510:	f7ff fdf2 	bl	80010f8 <set_pedestrian_duration>
  //adding  tasks======================================================================
  adv_SCH_Add_Task(button_reading, 0, 70);
 8001514:	2246      	movs	r2, #70	; 0x46
 8001516:	2100      	movs	r1, #0
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <main+0xb8>)
 800151a:	f7fe ffab 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(timerRun, 0, 10);
 800151e:	220a      	movs	r2, #10
 8001520:	2100      	movs	r1, #0
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <main+0xbc>)
 8001524:	f7fe ffa6 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_automatic_run, 0, 10);
 8001528:	220a      	movs	r2, #10
 800152a:	2100      	movs	r1, #0
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <main+0xc0>)
 800152e:	f7fe ffa1 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_pedestrian, 0, 10);
 8001532:	220a      	movs	r2, #10
 8001534:	2100      	movs	r1, #0
 8001536:	4810      	ldr	r0, [pc, #64]	; (8001578 <main+0xc4>)
 8001538:	f7fe ff9c 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_manual_run, 0, 10);
 800153c:	220a      	movs	r2, #10
 800153e:	2100      	movs	r1, #0
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <main+0xc8>)
 8001542:	f7fe ff97 	bl	8000474 <adv_SCH_Add_Task>
  adv_SCH_Add_Task(fsm_tunning_run, 0, 10);
 8001546:	220a      	movs	r2, #10
 8001548:	2100      	movs	r1, #0
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <main+0xcc>)
 800154c:	f7fe ff92 	bl	8000474 <adv_SCH_Add_Task>
  //adv_SCH_Add_Task(output_checking, 0, 1000);
  //adv_SCH_Add_Task(count_down_show, 0, 1000);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001550:	2100      	movs	r1, #0
 8001552:	4803      	ldr	r0, [pc, #12]	; (8001560 <main+0xac>)
 8001554:	f001 fc28 	bl	8002da8 <HAL_TIM_PWM_Start>
  while (1)
  {
     adv_SCH_Dispatch_Tasks();
 8001558:	f7fe ffc8 	bl	80004ec <adv_SCH_Dispatch_Tasks>
 800155c:	e7fc      	b.n	8001558 <main+0xa4>
 800155e:	bf00      	nop
 8001560:	20000118 	.word	0x20000118
 8001564:	20000160 	.word	0x20000160
 8001568:	200000b4 	.word	0x200000b4
 800156c:	080011d5 	.word	0x080011d5
 8001570:	0800022d 	.word	0x0800022d
 8001574:	08000701 	.word	0x08000701
 8001578:	08000cb1 	.word	0x08000cb1
 800157c:	08000aa9 	.word	0x08000aa9
 8001580:	08000f35 	.word	0x08000f35

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f002 ff68 	bl	8004468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fee6 	bl	800238c <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015c6:	f000 f985 	bl	80018d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f952 	bl	800288c <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f971 	bl	80018d4 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	; 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM2_Init+0x94>)
 800161a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM2_Init+0x94>)
 8001622:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001626:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM2_Init+0x94>)
 8001630:	2209      	movs	r2, #9
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM2_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <MX_TIM2_Init+0x94>)
 8001642:	f001 fabd 	bl	8002bc0 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800164c:	f000 f942 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_TIM2_Init+0x94>)
 800165e:	f001 fe05 	bl	800326c <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001668:	f000 f934 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_TIM2_Init+0x94>)
 800167a:	f002 f979 	bl	8003970 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001684:	f000 f926 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000160 	.word	0x20000160

08001694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016c6:	4a2d      	ldr	r2, [pc, #180]	; (800177c <MX_TIM3_Init+0xe8>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016cc:	223f      	movs	r2, #63	; 0x3f
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ea:	4823      	ldr	r0, [pc, #140]	; (8001778 <MX_TIM3_Init+0xe4>)
 80016ec:	f001 fa68 	bl	8002bc0 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016f6:	f000 f8ed 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001704:	4619      	mov	r1, r3
 8001706:	481c      	ldr	r0, [pc, #112]	; (8001778 <MX_TIM3_Init+0xe4>)
 8001708:	f001 fdb0 	bl	800326c <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001712:	f000 f8df 	bl	80018d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <MX_TIM3_Init+0xe4>)
 8001718:	f001 faee 	bl	8002cf8 <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001722:	f000 f8d7 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4619      	mov	r1, r3
 8001734:	4810      	ldr	r0, [pc, #64]	; (8001778 <MX_TIM3_Init+0xe4>)
 8001736:	f002 f91b 	bl	8003970 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001740:	f000 f8c8 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	; 0x60
 8001746:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM3_Init+0xe4>)
 800175c:	f001 fcc8 	bl	80030f0 <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001766:	f000 f8b5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM3_Init+0xe4>)
 800176c:	f000 f922 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3738      	adds	r7, #56	; 0x38
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000118 	.word	0x20000118
 800177c:	40000400 	.word	0x40000400

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f002 f944 	bl	8003a44 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f887 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001a8 	.word	0x200001a8
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <MX_GPIO_Init+0xd0>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <MX_GPIO_Init+0xd0>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <MX_GPIO_Init+0xd0>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <MX_GPIO_Init+0xd0>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <MX_GPIO_Init+0xd0>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <MX_GPIO_Init+0xd0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_p_1_Pin|Led_4_Pin|Led_3_Pin|Led_2_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800181e:	4822      	ldr	r0, [pc, #136]	; (80018a8 <MX_GPIO_Init+0xd4>)
 8001820:	f000 fd9b 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_p_2_Pin|Led_1_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800182a:	4820      	ldr	r0, [pc, #128]	; (80018ac <MX_GPIO_Init+0xd8>)
 800182c:	f000 fd95 	bl	800235a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_1_Pin button_2_Pin */
  GPIO_InitStruct.Pin = button_1_Pin|button_2_Pin;
 8001830:	2322      	movs	r3, #34	; 0x22
 8001832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4619      	mov	r1, r3
 8001842:	481a      	ldr	r0, [pc, #104]	; (80018ac <MX_GPIO_Init+0xd8>)
 8001844:	f000 fbf8 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_3_Pin button_p_Pin */
  GPIO_InitStruct.Pin = button_3_Pin|button_p_Pin;
 8001848:	2303      	movs	r3, #3
 800184a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4619      	mov	r1, r3
 800185a:	4813      	ldr	r0, [pc, #76]	; (80018a8 <MX_GPIO_Init+0xd4>)
 800185c:	f000 fbec 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_p_1_Pin Led_4_Pin Led_3_Pin Led_2_Pin */
  GPIO_InitStruct.Pin = Led_p_1_Pin|Led_4_Pin|Led_3_Pin|Led_2_Pin;
 8001860:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2302      	movs	r3, #2
 8001870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4619      	mov	r1, r3
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <MX_GPIO_Init+0xd4>)
 800187a:	f000 fbdd 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_p_2_Pin Led_1_Pin */
  GPIO_InitStruct.Pin = Led_p_2_Pin|Led_1_Pin;
 800187e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2302      	movs	r3, #2
 800188e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_GPIO_Init+0xd8>)
 8001898:	f000 fbce 	bl	8002038 <HAL_GPIO_Init>

}
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40010800 	.word	0x40010800

080018b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	//SCH_Update();
	adv_SCH_Update();
 80018b8:	f7fe fdf6 	bl	80004a8 <adv_SCH_Update>
	global_time+=10;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	330a      	adds	r3, #10
 80018c2:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c4:	6013      	str	r3, [r2, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200000b0 	.word	0x200000b0

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a14      	ldr	r2, [pc, #80]	; (800193c <HAL_MspInit+0x5c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_MspInit+0x5c>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_MspInit+0x5c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_MspInit+0x5c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_MspInit+0x60>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_MspInit+0x60>)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d114      	bne.n	8001980 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_TIM_Base_MspInit+0x68>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_TIM_Base_MspInit+0x68>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_TIM_Base_MspInit+0x68>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201c      	movs	r0, #28
 8001974:	f000 fa79 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001978:	201c      	movs	r0, #28
 800197a:	f000 fa92 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800197e:	e010      	b.n	80019a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10b      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_TIM_Base_MspInit+0x68>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_TIM_Base_MspInit+0x68>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_TIM_Base_MspInit+0x68>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40000400 	.word	0x40000400

080019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_TIM_MspPostInit+0x58>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d117      	bne.n	8001a04 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_TIM_MspPostInit+0x5c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_TIM_MspPostInit+0x5c>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_TIM_MspPostInit+0x5c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019ec:	2340      	movs	r3, #64	; 0x40
 80019ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_TIM_MspPostInit+0x60>)
 8001a00:	f000 fb1a 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40010800 	.word	0x40010800

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <HAL_UART_MspInit+0x98>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d137      	bne.n	8001aa8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a38:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	61d3      	str	r3, [r2, #28]
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_UART_MspInit+0x9c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_UART_MspInit+0xa0>)
 8001a7c:	f000 fadc 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a80:	2308      	movs	r3, #8
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_UART_MspInit+0xa0>)
 8001a94:	f000 fad0 	bl	8002038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2026      	movs	r0, #38	; 0x26
 8001a9e:	f000 f9e4 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f000 f9fd 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010800 	.word	0x40010800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f000 f8bf 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM2_IRQHandler+0x10>)
 8001b12:	f001 f9e5 	bl	8002ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000160 	.word	0x20000160

08001b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART2_IRQHandler+0x10>)
 8001b26:	f002 f86d 	bl	8003c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001a8 	.word	0x200001a8

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f002 fc46 	bl	80043f4 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20002800 	.word	0x20002800
 8001b94:	00000400 	.word	0x00000400
 8001b98:	200000f4 	.word	0x200000f4
 8001b9c:	20000200 	.word	0x20000200

08001ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bd2:	f7ff ffe5 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f002 fc13 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bda:	f7ff fc6b 	bl	80014b4 <main>
  bx lr
 8001bde:	4770      	bx	lr
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001be8:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 8001bec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bf0:	20000200 	.word	0x20000200

08001bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f923 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fe64 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f93b 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f903 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x1c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200001ec 	.word	0x200001ec

08001ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_GetTick+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	200001ec 	.word	0x200001ec

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <__NVIC_EnableIRQ+0x34>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff42 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff35 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d008      	beq.n	8001efe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e020      	b.n	8001f40 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 020e 	bic.w	r2, r2, #14
 8001f0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d005      	beq.n	8001f6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e051      	b.n	8002012 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 020e 	bic.w	r2, r2, #14
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_DMA_Abort_IT+0xd0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d029      	beq.n	8001fec <HAL_DMA_Abort_IT+0xa0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_DMA_Abort_IT+0xd4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d022      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x9c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <HAL_DMA_Abort_IT+0xd8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d01a      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x96>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_DMA_Abort_IT+0xdc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d012      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x90>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_DMA_Abort_IT+0xe0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x8a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_DMA_Abort_IT+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d102      	bne.n	8001fd0 <HAL_DMA_Abort_IT+0x84>
 8001fca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fce:	e00e      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	e00b      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fda:	e008      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	e005      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	e002      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fe8:	2310      	movs	r3, #16
 8001fea:	e000      	b.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_DMA_Abort_IT+0xe8>)
 8001ff0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
    } 
  }
  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020008 	.word	0x40020008
 8002020:	4002001c 	.word	0x4002001c
 8002024:	40020030 	.word	0x40020030
 8002028:	40020044 	.word	0x40020044
 800202c:	40020058 	.word	0x40020058
 8002030:	4002006c 	.word	0x4002006c
 8002034:	40020000 	.word	0x40020000

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b08b      	sub	sp, #44	; 0x2c
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e148      	b.n	80022de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800204c:	2201      	movs	r2, #1
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8137 	bne.w	80022d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4aa3      	ldr	r2, [pc, #652]	; (80022fc <HAL_GPIO_Init+0x2c4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d05e      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002074:	4aa1      	ldr	r2, [pc, #644]	; (80022fc <HAL_GPIO_Init+0x2c4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d875      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800207a:	4aa1      	ldr	r2, [pc, #644]	; (8002300 <HAL_GPIO_Init+0x2c8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d058      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002080:	4a9f      	ldr	r2, [pc, #636]	; (8002300 <HAL_GPIO_Init+0x2c8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d86f      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002086:	4a9f      	ldr	r2, [pc, #636]	; (8002304 <HAL_GPIO_Init+0x2cc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d052      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 800208c:	4a9d      	ldr	r2, [pc, #628]	; (8002304 <HAL_GPIO_Init+0x2cc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d869      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002092:	4a9d      	ldr	r2, [pc, #628]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04c      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002098:	4a9b      	ldr	r2, [pc, #620]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d863      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800209e:	4a9b      	ldr	r2, [pc, #620]	; (800230c <HAL_GPIO_Init+0x2d4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d046      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 80020a4:	4a99      	ldr	r2, [pc, #612]	; (800230c <HAL_GPIO_Init+0x2d4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d85d      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d82a      	bhi.n	8002104 <HAL_GPIO_Init+0xcc>
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d859      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <HAL_GPIO_Init+0x80>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002133 	.word	0x08002133
 80020bc:	0800210d 	.word	0x0800210d
 80020c0:	0800211f 	.word	0x0800211f
 80020c4:	08002161 	.word	0x08002161
 80020c8:	08002167 	.word	0x08002167
 80020cc:	08002167 	.word	0x08002167
 80020d0:	08002167 	.word	0x08002167
 80020d4:	08002167 	.word	0x08002167
 80020d8:	08002167 	.word	0x08002167
 80020dc:	08002167 	.word	0x08002167
 80020e0:	08002167 	.word	0x08002167
 80020e4:	08002167 	.word	0x08002167
 80020e8:	08002167 	.word	0x08002167
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002167 	.word	0x08002167
 80020f4:	08002167 	.word	0x08002167
 80020f8:	08002167 	.word	0x08002167
 80020fc:	08002115 	.word	0x08002115
 8002100:	08002129 	.word	0x08002129
 8002104:	4a82      	ldr	r2, [pc, #520]	; (8002310 <HAL_GPIO_Init+0x2d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210a:	e02c      	b.n	8002166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	623b      	str	r3, [r7, #32]
          break;
 8002112:	e029      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	3304      	adds	r3, #4
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e024      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	3308      	adds	r3, #8
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e01f      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	330c      	adds	r3, #12
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e01a      	b.n	8002168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213a:	2304      	movs	r3, #4
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e013      	b.n	8002168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002148:	2308      	movs	r3, #8
 800214a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	611a      	str	r2, [r3, #16]
          break;
 8002152:	e009      	b.n	8002168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	615a      	str	r2, [r3, #20]
          break;
 800215e:	e003      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x130>
          break;
 8002166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2bff      	cmp	r3, #255	; 0xff
 800216c:	d801      	bhi.n	8002172 <HAL_GPIO_Init+0x13a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_Init+0x13e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2bff      	cmp	r3, #255	; 0xff
 800217c:	d802      	bhi.n	8002184 <HAL_GPIO_Init+0x14c>
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x152>
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3b08      	subs	r3, #8
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	210f      	movs	r1, #15
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8090 	beq.w	80022d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_GPIO_Init+0x2dc>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_GPIO_Init+0x2dc>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_GPIO_Init+0x2dc>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d0:	4a51      	ldr	r2, [pc, #324]	; (8002318 <HAL_GPIO_Init+0x2e0>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a49      	ldr	r2, [pc, #292]	; (800231c <HAL_GPIO_Init+0x2e4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00d      	beq.n	8002218 <HAL_GPIO_Init+0x1e0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a48      	ldr	r2, [pc, #288]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <HAL_GPIO_Init+0x1dc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a47      	ldr	r2, [pc, #284]	; (8002324 <HAL_GPIO_Init+0x2ec>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_GPIO_Init+0x1d8>
 800220c:	2302      	movs	r3, #2
 800220e:	e004      	b.n	800221a <HAL_GPIO_Init+0x1e2>
 8002210:	2303      	movs	r3, #3
 8002212:	e002      	b.n	800221a <HAL_GPIO_Init+0x1e2>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_GPIO_Init+0x1e2>
 8002218:	2300      	movs	r3, #0
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	f002 0203 	and.w	r2, r2, #3
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	4093      	lsls	r3, r2
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222a:	493b      	ldr	r1, [pc, #236]	; (8002318 <HAL_GPIO_Init+0x2e0>)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4937      	ldr	r1, [pc, #220]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4933      	ldr	r1, [pc, #204]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 800225c:	4013      	ands	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800226c:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	492d      	ldr	r1, [pc, #180]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4929      	ldr	r1, [pc, #164]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002284:	4013      	ands	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4923      	ldr	r1, [pc, #140]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	491f      	ldr	r1, [pc, #124]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	4919      	ldr	r1, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4915      	ldr	r1, [pc, #84]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	3301      	adds	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f aeaf 	bne.w	800204c <HAL_GPIO_Init+0x14>
  }
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	372c      	adds	r7, #44	; 0x2c
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	10320000 	.word	0x10320000
 8002300:	10310000 	.word	0x10310000
 8002304:	10220000 	.word	0x10220000
 8002308:	10210000 	.word	0x10210000
 800230c:	10120000 	.word	0x10120000
 8002310:	10110000 	.word	0x10110000
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	40010400 	.word	0x40010400

0800232c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	807b      	strh	r3, [r7, #2]
 8002366:	4613      	mov	r3, r2
 8002368:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236a:	787b      	ldrb	r3, [r7, #1]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002376:	e003      	b.n	8002380 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	041a      	lsls	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	611a      	str	r2, [r3, #16]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
	...

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e26c      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023c4:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x12c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d168      	bne.n	80024b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e246      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x76>
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xbc>
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002448:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fc1e 	bl	8001ca8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fc1a 	bl	8001ca8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1fa      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe4>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fc0a 	bl	8001ca8 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fc06 	bl	8001ca8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1e6      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x10c>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1ba      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4939      	ldr	r1, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff fbbf 	bl	8001ca8 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff fbbb 	bl	8001ca8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e19b      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff fb9e 	bl	8001ca8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fb9a 	bl	8001ca8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e17a      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03a      	beq.n	8002610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7ff fb7e 	bl	8001ca8 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7ff fb7a 	bl	8001ca8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e15a      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 fad8 	bl	8002b84 <RCC_Delay>
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7ff fb64 	bl	8001ca8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fb60 	bl	8001ca8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d908      	bls.n	8002604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e140      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	42420000 	.word	0x42420000
 8002600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b9e      	ldr	r3, [pc, #632]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e9      	bne.n	80025e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a6 	beq.w	800276a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b97      	ldr	r3, [pc, #604]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b94      	ldr	r3, [pc, #592]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a93      	ldr	r2, [pc, #588]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b91      	ldr	r3, [pc, #580]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b8e      	ldr	r3, [pc, #568]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff fb21 	bl	8001ca8 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7ff fb1d 	bl	8001ca8 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0fd      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002690:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026a6:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a72      	ldr	r2, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x356>
 80026c8:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a66      	ldr	r2, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b64      	ldr	r3, [pc, #400]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a63      	ldr	r2, [pc, #396]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff fad1 	bl	8001ca8 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff facd 	bl	8001ca8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0ab      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x37e>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff fabb 	bl	8001ca8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff fab7 	bl	8001ca8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e095      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a47      	ldr	r2, [pc, #284]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8081 	beq.w	8002876 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b42      	ldr	r3, [pc, #264]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d061      	beq.n	8002844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d146      	bne.n	8002816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff fa8b 	bl	8001ca8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff fa87 	bl	8001ca8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e067      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d108      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	492d      	ldr	r1, [pc, #180]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a19      	ldr	r1, [r3, #32]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	430b      	orrs	r3, r1
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fa5b 	bl	8001ca8 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fa57 	bl	8001ca8 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e037      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
 8002814:	e02f      	b.n	8002876 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_OscConfig+0x4fc>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fa44 	bl	8001ca8 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7ff fa40 	bl	8001ca8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e020      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x498>
 8002842:	e018      	b.n	8002876 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e013      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420060 	.word	0x42420060

0800288c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0d0      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d910      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0207 	bic.w	r2, r3, #7
 80028b6:	4965      	ldr	r1, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d040      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d115      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e073      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e06b      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4936      	ldr	r1, [pc, #216]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7ff f994 	bl	8001ca8 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7ff f990 	bl	8001ca8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e053      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d210      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 0207 	bic.w	r2, r3, #7
 80029c2:	4922      	ldr	r1, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1cc>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1d0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f8f2 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08004dc0 	.word	0x08004dc0
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b490      	push	{r4, r7}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a68:	1d3c      	adds	r4, r7, #4
 8002a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a70:	f240 2301 	movw	r3, #513	; 0x201
 8002a74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x46>
 8002a9e:	e02d      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa2:	623b      	str	r3, [r7, #32]
      break;
 8002aa4:	e02d      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ab8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0c5b      	lsrs	r3, r3, #17
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ade:	fb02 f203 	mul.w	r2, r2, r3
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e004      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	623b      	str	r3, [r7, #32]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	623b      	str	r3, [r7, #32]
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6a3b      	ldr	r3, [r7, #32]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc90      	pop	{r4, r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	08004db0 	.word	0x08004db0
 8002b14:	40021000 	.word	0x40021000
 8002b18:	007a1200 	.word	0x007a1200
 8002b1c:	003d0900 	.word	0x003d0900

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff2 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08004dd0 	.word	0x08004dd0

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08004dd0 	.word	0x08004dd0

08002b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <RCC_Delay+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <RCC_Delay+0x38>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba0:	bf00      	nop
  }
  while (Delay --);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <RCC_Delay+0x1c>
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e041      	b.n	8002c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe feac 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fc1c 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e035      	b.n	8002ce4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_TIM_Base_Start_IT+0x90>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x4e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d004      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x4e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_TIM_Base_Start_IT+0x94>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d111      	bne.n	8002cd2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d010      	beq.n	8002ce2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd0:	e007      	b.n	8002ce2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40000400 	.word	0x40000400

08002cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e041      	b.n	8002d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f839 	bl	8002d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f000 fb80 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_TIM_PWM_Start+0x24>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e022      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d109      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x3e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e015      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x58>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e008      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e059      	b.n	8002ece <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x82>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	e013      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x92>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	e00b      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0xa2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e48:	e003      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd64 	bl	8003928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_TIM_PWM_Start+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_TIM_PWM_Start+0x130>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_TIM_PWM_Start+0xf0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d004      	beq.n	8002e98 <HAL_TIM_PWM_Start+0xf0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_TIM_PWM_Start+0x134>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d111      	bne.n	8002ebc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d010      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	e007      	b.n	8002ecc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40000400 	.word	0x40000400

08002ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa6f 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa62 	bl	80033f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fa71 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0204 	mvn.w	r2, #4
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa45 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa38 	bl	80033f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fa47 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa1b 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa0e 	bl	80033f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa1d 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9f1 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9e4 	bl	80033f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9f3 	bl	8003418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fc26 	bl	80018b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fcd1 	bl	8003a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9b7 	bl	800342a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0220 	mvn.w	r2, #32
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fc9c 	bl	8003a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003106:	2302      	movs	r3, #2
 8003108:	e0ac      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x174>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0c      	cmp	r3, #12
 8003116:	f200 809f 	bhi.w	8003258 <HAL_TIM_PWM_ConfigChannel+0x168>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003155 	.word	0x08003155
 8003124:	08003259 	.word	0x08003259
 8003128:	08003259 	.word	0x08003259
 800312c:	08003259 	.word	0x08003259
 8003130:	08003195 	.word	0x08003195
 8003134:	08003259 	.word	0x08003259
 8003138:	08003259 	.word	0x08003259
 800313c:	08003259 	.word	0x08003259
 8003140:	080031d7 	.word	0x080031d7
 8003144:	08003259 	.word	0x08003259
 8003148:	08003259 	.word	0x08003259
 800314c:	08003259 	.word	0x08003259
 8003150:	08003217 	.word	0x08003217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f9c6 	bl	80034ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0208 	orr.w	r2, r2, #8
 800316e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6999      	ldr	r1, [r3, #24]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	619a      	str	r2, [r3, #24]
      break;
 8003192:	e062      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa0c 	bl	80035b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6999      	ldr	r1, [r3, #24]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	619a      	str	r2, [r3, #24]
      break;
 80031d4:	e041      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa55 	bl	800368c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0208 	orr.w	r2, r2, #8
 80031f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0204 	bic.w	r2, r2, #4
 8003200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69d9      	ldr	r1, [r3, #28]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	61da      	str	r2, [r3, #28]
      break;
 8003214:	e021      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fa9f 	bl	8003760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69d9      	ldr	r1, [r3, #28]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	021a      	lsls	r2, r3, #8
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	61da      	str	r2, [r3, #28]
      break;
 8003256:	e000      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIM_ConfigClockSource+0x18>
 8003280:	2302      	movs	r3, #2
 8003282:	e0b3      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x180>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032bc:	d03e      	beq.n	800333c <HAL_TIM_ConfigClockSource+0xd0>
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	f200 8087 	bhi.w	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	f000 8085 	beq.w	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d87f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032d4:	2b70      	cmp	r3, #112	; 0x70
 80032d6:	d01a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xa2>
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d87b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032dc:	2b60      	cmp	r3, #96	; 0x60
 80032de:	d050      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x116>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d877      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d03c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xf6>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d873      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d058      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x136>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d86f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d064      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x156>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d86b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d060      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x156>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d867      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x156>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d05a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800330c:	e062      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f000 fae4 	bl	80038ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003330:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	609a      	str	r2, [r3, #8]
      break;
 800333a:	e04e      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f000 facd 	bl	80038ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335e:	609a      	str	r2, [r3, #8]
      break;
 8003360:	e03b      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	461a      	mov	r2, r3
 8003370:	f000 fa44 	bl	80037fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2150      	movs	r1, #80	; 0x50
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fa9b 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 8003380:	e02b      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	461a      	mov	r2, r3
 8003390:	f000 fa62 	bl	8003858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2160      	movs	r1, #96	; 0x60
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa8b 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e01b      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 fa24 	bl	80037fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2140      	movs	r1, #64	; 0x40
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fa7b 	bl	80038b6 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e00b      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 fa72 	bl	80038b6 <TIM_ITRx_SetConfig>
        break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033d4:	bf00      	nop
 80033d6:	e000      	b.n	80033da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0xa8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x28>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x28>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <TIM_Base_SetConfig+0xac>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <TIM_Base_SetConfig+0xa8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_Base_SetConfig+0x52>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0x52>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <TIM_Base_SetConfig+0xac>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d108      	bne.n	80034a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <TIM_Base_SetConfig+0xa8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	615a      	str	r2, [r3, #20]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400

080034ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0201 	bic.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 0302 	bic.w	r3, r3, #2
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <TIM_OC1_SetConfig+0xc8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10c      	bne.n	8003562 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0308 	bic.w	r3, r3, #8
 800354e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <TIM_OC1_SetConfig+0xc8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d111      	bne.n	800358e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00

080035b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f023 0210 	bic.w	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0320 	bic.w	r3, r3, #32
 8003602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <TIM_OC2_SetConfig+0xd0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10d      	bne.n	8003634 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <TIM_OC2_SetConfig+0xd0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d113      	bne.n	8003664 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800364a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00

0800368c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <TIM_OC3_SetConfig+0xd0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10d      	bne.n	8003706 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <TIM_OC3_SetConfig+0xd0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	621a      	str	r2, [r3, #32]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40012c00 	.word	0x40012c00

08003760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	031b      	lsls	r3, r3, #12
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a0f      	ldr	r2, [pc, #60]	; (80037f8 <TIM_OC4_SetConfig+0x98>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d109      	bne.n	80037d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00

080037fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 030a 	bic.w	r3, r3, #10
 8003838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f023 0210 	bic.w	r2, r3, #16
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	031b      	lsls	r3, r3, #12
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f043 0307 	orr.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b087      	sub	sp, #28
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	021a      	lsls	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	431a      	orrs	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4313      	orrs	r3, r2
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	609a      	str	r2, [r3, #8]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2201      	movs	r2, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	43db      	mvns	r3, r3
 800394a:	401a      	ands	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	431a      	orrs	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003984:	2302      	movs	r3, #2
 8003986:	e041      	b.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d004      	beq.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d10c      	bne.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400

08003a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e03f      	b.n	8003ad6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd ffd4 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fc25 	bl	80042d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08a      	sub	sp, #40	; 0x28
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d17c      	bne.n	8003bf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_UART_Transmit+0x2c>
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e075      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Transmit+0x3e>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e06e      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fe f8b9 	bl	8001ca8 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d108      	bne.n	8003b60 <HAL_UART_Transmit+0x82>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b70:	e02a      	b.n	8003bc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2180      	movs	r1, #128	; 0x80
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fa11 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e036      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e007      	b.n	8003bba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1cf      	bne.n	8003b72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2140      	movs	r1, #64	; 0x40
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f9e1 	bl	8003fa4 <UART_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_UART_IRQHandler+0x52>
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa99 	bl	8004186 <UART_Receive_IT>
      return;
 8003c54:	e17b      	b.n	8003f4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80b1 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x1bc>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_UART_IRQHandler+0x70>
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80a6 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_UART_IRQHandler+0x90>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_UART_IRQHandler+0xb0>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 0202 	orr.w	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xd0>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f043 0204 	orr.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00f      	beq.n	8003cfe <HAL_UART_IRQHandler+0xfa>
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_UART_IRQHandler+0xee>
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0208 	orr.w	r2, r3, #8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 811e 	beq.w	8003f44 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_UART_IRQHandler+0x11e>
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa32 	bl	8004186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <HAL_UART_IRQHandler+0x146>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d031      	beq.n	8003dae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f974 	bl	8004038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d023      	beq.n	8003da6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d013      	beq.n	8003d9e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	4a76      	ldr	r2, [pc, #472]	; (8003f54 <HAL_UART_IRQHandler+0x350>)
 8003d7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe f8e2 	bl	8001f4c <HAL_DMA_Abort_IT>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	e00e      	b.n	8003dbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8ec 	bl	8003f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	e00a      	b.n	8003dbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8e8 	bl	8003f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e006      	b.n	8003dbc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8e4 	bl	8003f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dba:	e0c3      	b.n	8003f44 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	bf00      	nop
    return;
 8003dbe:	e0c1      	b.n	8003f44 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	f040 80a1 	bne.w	8003f0c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 809b 	beq.w	8003f0c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8095 	beq.w	8003f0c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04e      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e10:	8a3b      	ldrh	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8098 	beq.w	8003f48 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1c:	8a3a      	ldrh	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f080 8092 	bcs.w	8003f48 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8a3a      	ldrh	r2, [r7, #16]
 8003e28:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d02b      	beq.n	8003e8c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e42:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e62:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0210 	bic.w	r2, r2, #16
 8003e80:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe f825 	bl	8001ed6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f876 	bl	8003f8e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ea2:	e051      	b.n	8003f48 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d047      	beq.n	8003f4c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ebc:	8a7b      	ldrh	r3, [r7, #18]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d044      	beq.n	8003f4c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ed0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0210 	bic.w	r2, r2, #16
 8003efe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f00:	8a7b      	ldrh	r3, [r7, #18]
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f842 	bl	8003f8e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f0a:	e01f      	b.n	8003f4c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_UART_IRQHandler+0x324>
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8c9 	bl	80040b8 <UART_Transmit_IT>
    return;
 8003f26:	e012      	b.n	8003f4e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <HAL_UART_IRQHandler+0x34a>
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f90a 	bl	8004156 <UART_EndTransmit_IT>
    return;
 8003f42:	e004      	b.n	8003f4e <HAL_UART_IRQHandler+0x34a>
    return;
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <HAL_UART_IRQHandler+0x34a>
      return;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_IRQHandler+0x34a>
      return;
 8003f4c:	bf00      	nop
  }
}
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08004091 	.word	0x08004091

08003f58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	e02c      	b.n	8004010 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d028      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fc4:	f7fd fe70 	bl	8001ca8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d21d      	bcs.n	8004010 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fe2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e00f      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	429a      	cmp	r2, r3
 800402c:	d0c3      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800404e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	d107      	bne.n	8004078 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0210 	bic.w	r2, r2, #16
 8004076:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7ff ff66 	bl	8003f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b21      	cmp	r3, #33	; 0x21
 80040ca:	d13e      	bne.n	800414a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d114      	bne.n	8004100 <UART_Transmit_IT+0x48>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d110      	bne.n	8004100 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]
 80040fe:	e008      	b.n	8004112 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	1c59      	adds	r1, r3, #1
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6211      	str	r1, [r2, #32]
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4619      	mov	r1, r3
 8004120:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004134:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004144:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff feee 	bl	8003f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b22      	cmp	r3, #34	; 0x22
 8004198:	f040 8099 	bne.w	80042ce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d117      	bne.n	80041d6 <UART_Receive_IT+0x50>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d113      	bne.n	80041d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
 80041d4:	e026      	b.n	8004224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d007      	beq.n	80041fa <UART_Receive_IT+0x74>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <UART_Receive_IT+0x82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e008      	b.n	800421a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004214:	b2da      	uxtb	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004234:	2b00      	cmp	r3, #0
 8004236:	d148      	bne.n	80042ca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0220 	bic.w	r2, r2, #32
 8004246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d123      	bne.n	80042c0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0210 	bic.w	r2, r2, #16
 800428c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b10      	cmp	r3, #16
 800429a:	d10a      	bne.n	80042b2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fe68 	bl	8003f8e <HAL_UARTEx_RxEventCallback>
 80042be:	e002      	b.n	80042c6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fe52 	bl	8003f6a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e002      	b.n	80042d0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004312:	f023 030c 	bic.w	r3, r3, #12
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	430b      	orrs	r3, r1
 800431e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <UART_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7fe fc0c 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	e002      	b.n	800434e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe fbf4 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 800434c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <UART_SetConfig+0x118>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	0119      	lsls	r1, r3, #4
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fbb2 f2f3 	udiv	r2, r2, r3
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <UART_SetConfig+0x118>)
 8004386:	fba3 0302 	umull	r0, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2064      	movs	r0, #100	; 0x64
 800438e:	fb00 f303 	mul.w	r3, r0, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <UART_SetConfig+0x118>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a4:	4419      	add	r1, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <UART_SetConfig+0x118>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2064      	movs	r0, #100	; 0x64
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <UART_SetConfig+0x118>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	440a      	add	r2, r1
 80043e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40013800 	.word	0x40013800
 80043f0:	51eb851f 	.word	0x51eb851f

080043f4 <__errno>:
 80043f4:	4b01      	ldr	r3, [pc, #4]	; (80043fc <__errno+0x8>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	2000000c 	.word	0x2000000c

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	2600      	movs	r6, #0
 8004404:	4d0c      	ldr	r5, [pc, #48]	; (8004438 <__libc_init_array+0x38>)
 8004406:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	f000 fc6c 	bl	8004cec <_init>
 8004414:	2600      	movs	r6, #0
 8004416:	4d0a      	ldr	r5, [pc, #40]	; (8004440 <__libc_init_array+0x40>)
 8004418:	4c0a      	ldr	r4, [pc, #40]	; (8004444 <__libc_init_array+0x44>)
 800441a:	1b64      	subs	r4, r4, r5
 800441c:	10a4      	asrs	r4, r4, #2
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f855 3b04 	ldr.w	r3, [r5], #4
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	08004e0c 	.word	0x08004e0c
 800443c:	08004e0c 	.word	0x08004e0c
 8004440:	08004e0c 	.word	0x08004e0c
 8004444:	08004e10 	.word	0x08004e10

08004448 <malloc>:
 8004448:	4b02      	ldr	r3, [pc, #8]	; (8004454 <malloc+0xc>)
 800444a:	4601      	mov	r1, r0
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f000 b85f 	b.w	8004510 <_malloc_r>
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c

08004458 <free>:
 8004458:	4b02      	ldr	r3, [pc, #8]	; (8004464 <free+0xc>)
 800445a:	4601      	mov	r1, r0
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f000 b80b 	b.w	8004478 <_free_r>
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c

08004468 <memset>:
 8004468:	4603      	mov	r3, r0
 800446a:	4402      	add	r2, r0
 800446c:	4293      	cmp	r3, r2
 800446e:	d100      	bne.n	8004472 <memset+0xa>
 8004470:	4770      	bx	lr
 8004472:	f803 1b01 	strb.w	r1, [r3], #1
 8004476:	e7f9      	b.n	800446c <memset+0x4>

08004478 <_free_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4605      	mov	r5, r0
 800447c:	2900      	cmp	r1, #0
 800447e:	d043      	beq.n	8004508 <_free_r+0x90>
 8004480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004484:	1f0c      	subs	r4, r1, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	bfb8      	it	lt
 800448a:	18e4      	addlt	r4, r4, r3
 800448c:	f000 f8ca 	bl	8004624 <__malloc_lock>
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <_free_r+0x94>)
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	4610      	mov	r0, r2
 8004496:	b933      	cbnz	r3, 80044a6 <_free_r+0x2e>
 8004498:	6063      	str	r3, [r4, #4]
 800449a:	6014      	str	r4, [r2, #0]
 800449c:	4628      	mov	r0, r5
 800449e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044a2:	f000 b8c5 	b.w	8004630 <__malloc_unlock>
 80044a6:	42a3      	cmp	r3, r4
 80044a8:	d90a      	bls.n	80044c0 <_free_r+0x48>
 80044aa:	6821      	ldr	r1, [r4, #0]
 80044ac:	1862      	adds	r2, r4, r1
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bf01      	itttt	eq
 80044b2:	681a      	ldreq	r2, [r3, #0]
 80044b4:	685b      	ldreq	r3, [r3, #4]
 80044b6:	1852      	addeq	r2, r2, r1
 80044b8:	6022      	streq	r2, [r4, #0]
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	6004      	str	r4, [r0, #0]
 80044be:	e7ed      	b.n	800449c <_free_r+0x24>
 80044c0:	461a      	mov	r2, r3
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	b10b      	cbz	r3, 80044ca <_free_r+0x52>
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	d9fa      	bls.n	80044c0 <_free_r+0x48>
 80044ca:	6811      	ldr	r1, [r2, #0]
 80044cc:	1850      	adds	r0, r2, r1
 80044ce:	42a0      	cmp	r0, r4
 80044d0:	d10b      	bne.n	80044ea <_free_r+0x72>
 80044d2:	6820      	ldr	r0, [r4, #0]
 80044d4:	4401      	add	r1, r0
 80044d6:	1850      	adds	r0, r2, r1
 80044d8:	4283      	cmp	r3, r0
 80044da:	6011      	str	r1, [r2, #0]
 80044dc:	d1de      	bne.n	800449c <_free_r+0x24>
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4401      	add	r1, r0
 80044e4:	6011      	str	r1, [r2, #0]
 80044e6:	6053      	str	r3, [r2, #4]
 80044e8:	e7d8      	b.n	800449c <_free_r+0x24>
 80044ea:	d902      	bls.n	80044f2 <_free_r+0x7a>
 80044ec:	230c      	movs	r3, #12
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	e7d4      	b.n	800449c <_free_r+0x24>
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	1821      	adds	r1, r4, r0
 80044f6:	428b      	cmp	r3, r1
 80044f8:	bf01      	itttt	eq
 80044fa:	6819      	ldreq	r1, [r3, #0]
 80044fc:	685b      	ldreq	r3, [r3, #4]
 80044fe:	1809      	addeq	r1, r1, r0
 8004500:	6021      	streq	r1, [r4, #0]
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	6054      	str	r4, [r2, #4]
 8004506:	e7c9      	b.n	800449c <_free_r+0x24>
 8004508:	bd38      	pop	{r3, r4, r5, pc}
 800450a:	bf00      	nop
 800450c:	200000f8 	.word	0x200000f8

08004510 <_malloc_r>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	1ccd      	adds	r5, r1, #3
 8004514:	f025 0503 	bic.w	r5, r5, #3
 8004518:	3508      	adds	r5, #8
 800451a:	2d0c      	cmp	r5, #12
 800451c:	bf38      	it	cc
 800451e:	250c      	movcc	r5, #12
 8004520:	2d00      	cmp	r5, #0
 8004522:	4606      	mov	r6, r0
 8004524:	db01      	blt.n	800452a <_malloc_r+0x1a>
 8004526:	42a9      	cmp	r1, r5
 8004528:	d903      	bls.n	8004532 <_malloc_r+0x22>
 800452a:	230c      	movs	r3, #12
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	2000      	movs	r0, #0
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004532:	f000 f877 	bl	8004624 <__malloc_lock>
 8004536:	4921      	ldr	r1, [pc, #132]	; (80045bc <_malloc_r+0xac>)
 8004538:	680a      	ldr	r2, [r1, #0]
 800453a:	4614      	mov	r4, r2
 800453c:	b99c      	cbnz	r4, 8004566 <_malloc_r+0x56>
 800453e:	4f20      	ldr	r7, [pc, #128]	; (80045c0 <_malloc_r+0xb0>)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b923      	cbnz	r3, 800454e <_malloc_r+0x3e>
 8004544:	4621      	mov	r1, r4
 8004546:	4630      	mov	r0, r6
 8004548:	f000 f83c 	bl	80045c4 <_sbrk_r>
 800454c:	6038      	str	r0, [r7, #0]
 800454e:	4629      	mov	r1, r5
 8004550:	4630      	mov	r0, r6
 8004552:	f000 f837 	bl	80045c4 <_sbrk_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d123      	bne.n	80045a2 <_malloc_r+0x92>
 800455a:	230c      	movs	r3, #12
 800455c:	4630      	mov	r0, r6
 800455e:	6033      	str	r3, [r6, #0]
 8004560:	f000 f866 	bl	8004630 <__malloc_unlock>
 8004564:	e7e3      	b.n	800452e <_malloc_r+0x1e>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	1b5b      	subs	r3, r3, r5
 800456a:	d417      	bmi.n	800459c <_malloc_r+0x8c>
 800456c:	2b0b      	cmp	r3, #11
 800456e:	d903      	bls.n	8004578 <_malloc_r+0x68>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	441c      	add	r4, r3
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	e004      	b.n	8004582 <_malloc_r+0x72>
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	42a2      	cmp	r2, r4
 800457c:	bf0c      	ite	eq
 800457e:	600b      	streq	r3, [r1, #0]
 8004580:	6053      	strne	r3, [r2, #4]
 8004582:	4630      	mov	r0, r6
 8004584:	f000 f854 	bl	8004630 <__malloc_unlock>
 8004588:	f104 000b 	add.w	r0, r4, #11
 800458c:	1d23      	adds	r3, r4, #4
 800458e:	f020 0007 	bic.w	r0, r0, #7
 8004592:	1ac2      	subs	r2, r0, r3
 8004594:	d0cc      	beq.n	8004530 <_malloc_r+0x20>
 8004596:	1a1b      	subs	r3, r3, r0
 8004598:	50a3      	str	r3, [r4, r2]
 800459a:	e7c9      	b.n	8004530 <_malloc_r+0x20>
 800459c:	4622      	mov	r2, r4
 800459e:	6864      	ldr	r4, [r4, #4]
 80045a0:	e7cc      	b.n	800453c <_malloc_r+0x2c>
 80045a2:	1cc4      	adds	r4, r0, #3
 80045a4:	f024 0403 	bic.w	r4, r4, #3
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d0e3      	beq.n	8004574 <_malloc_r+0x64>
 80045ac:	1a21      	subs	r1, r4, r0
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 f808 	bl	80045c4 <_sbrk_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d1dd      	bne.n	8004574 <_malloc_r+0x64>
 80045b8:	e7cf      	b.n	800455a <_malloc_r+0x4a>
 80045ba:	bf00      	nop
 80045bc:	200000f8 	.word	0x200000f8
 80045c0:	200000fc 	.word	0x200000fc

080045c4 <_sbrk_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	2300      	movs	r3, #0
 80045c8:	4d05      	ldr	r5, [pc, #20]	; (80045e0 <_sbrk_r+0x1c>)
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fd fab0 	bl	8001b34 <_sbrk>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_sbrk_r+0x1a>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_sbrk_r+0x1a>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	200001f0 	.word	0x200001f0

080045e4 <siprintf>:
 80045e4:	b40e      	push	{r1, r2, r3}
 80045e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045ea:	b500      	push	{lr}
 80045ec:	b09c      	sub	sp, #112	; 0x70
 80045ee:	ab1d      	add	r3, sp, #116	; 0x74
 80045f0:	9002      	str	r0, [sp, #8]
 80045f2:	9006      	str	r0, [sp, #24]
 80045f4:	9107      	str	r1, [sp, #28]
 80045f6:	9104      	str	r1, [sp, #16]
 80045f8:	4808      	ldr	r0, [pc, #32]	; (800461c <siprintf+0x38>)
 80045fa:	4909      	ldr	r1, [pc, #36]	; (8004620 <siprintf+0x3c>)
 80045fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004600:	9105      	str	r1, [sp, #20]
 8004602:	6800      	ldr	r0, [r0, #0]
 8004604:	a902      	add	r1, sp, #8
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	f000 f874 	bl	80046f4 <_svfiprintf_r>
 800460c:	2200      	movs	r2, #0
 800460e:	9b02      	ldr	r3, [sp, #8]
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	b01c      	add	sp, #112	; 0x70
 8004614:	f85d eb04 	ldr.w	lr, [sp], #4
 8004618:	b003      	add	sp, #12
 800461a:	4770      	bx	lr
 800461c:	2000000c 	.word	0x2000000c
 8004620:	ffff0208 	.word	0xffff0208

08004624 <__malloc_lock>:
 8004624:	4801      	ldr	r0, [pc, #4]	; (800462c <__malloc_lock+0x8>)
 8004626:	f000 bafb 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 800462a:	bf00      	nop
 800462c:	200001f8 	.word	0x200001f8

08004630 <__malloc_unlock>:
 8004630:	4801      	ldr	r0, [pc, #4]	; (8004638 <__malloc_unlock+0x8>)
 8004632:	f000 baf6 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004636:	bf00      	nop
 8004638:	200001f8 	.word	0x200001f8

0800463c <__ssputs_r>:
 800463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	688e      	ldr	r6, [r1, #8]
 8004642:	4682      	mov	sl, r0
 8004644:	429e      	cmp	r6, r3
 8004646:	460c      	mov	r4, r1
 8004648:	4690      	mov	r8, r2
 800464a:	461f      	mov	r7, r3
 800464c:	d838      	bhi.n	80046c0 <__ssputs_r+0x84>
 800464e:	898a      	ldrh	r2, [r1, #12]
 8004650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004654:	d032      	beq.n	80046bc <__ssputs_r+0x80>
 8004656:	6825      	ldr	r5, [r4, #0]
 8004658:	6909      	ldr	r1, [r1, #16]
 800465a:	3301      	adds	r3, #1
 800465c:	eba5 0901 	sub.w	r9, r5, r1
 8004660:	6965      	ldr	r5, [r4, #20]
 8004662:	444b      	add	r3, r9
 8004664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800466c:	106d      	asrs	r5, r5, #1
 800466e:	429d      	cmp	r5, r3
 8004670:	bf38      	it	cc
 8004672:	461d      	movcc	r5, r3
 8004674:	0553      	lsls	r3, r2, #21
 8004676:	d531      	bpl.n	80046dc <__ssputs_r+0xa0>
 8004678:	4629      	mov	r1, r5
 800467a:	f7ff ff49 	bl	8004510 <_malloc_r>
 800467e:	4606      	mov	r6, r0
 8004680:	b950      	cbnz	r0, 8004698 <__ssputs_r+0x5c>
 8004682:	230c      	movs	r3, #12
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	f8ca 3000 	str.w	r3, [sl]
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004698:	464a      	mov	r2, r9
 800469a:	6921      	ldr	r1, [r4, #16]
 800469c:	f000 fad0 	bl	8004c40 <memcpy>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	6126      	str	r6, [r4, #16]
 80046ae:	444e      	add	r6, r9
 80046b0:	6026      	str	r6, [r4, #0]
 80046b2:	463e      	mov	r6, r7
 80046b4:	6165      	str	r5, [r4, #20]
 80046b6:	eba5 0509 	sub.w	r5, r5, r9
 80046ba:	60a5      	str	r5, [r4, #8]
 80046bc:	42be      	cmp	r6, r7
 80046be:	d900      	bls.n	80046c2 <__ssputs_r+0x86>
 80046c0:	463e      	mov	r6, r7
 80046c2:	4632      	mov	r2, r6
 80046c4:	4641      	mov	r1, r8
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	f000 fac8 	bl	8004c5c <memmove>
 80046cc:	68a3      	ldr	r3, [r4, #8]
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	1b9b      	subs	r3, r3, r6
 80046d2:	4432      	add	r2, r6
 80046d4:	2000      	movs	r0, #0
 80046d6:	60a3      	str	r3, [r4, #8]
 80046d8:	6022      	str	r2, [r4, #0]
 80046da:	e7db      	b.n	8004694 <__ssputs_r+0x58>
 80046dc:	462a      	mov	r2, r5
 80046de:	f000 fad7 	bl	8004c90 <_realloc_r>
 80046e2:	4606      	mov	r6, r0
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d1e1      	bne.n	80046ac <__ssputs_r+0x70>
 80046e8:	4650      	mov	r0, sl
 80046ea:	6921      	ldr	r1, [r4, #16]
 80046ec:	f7ff fec4 	bl	8004478 <_free_r>
 80046f0:	e7c7      	b.n	8004682 <__ssputs_r+0x46>
	...

080046f4 <_svfiprintf_r>:
 80046f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f8:	4698      	mov	r8, r3
 80046fa:	898b      	ldrh	r3, [r1, #12]
 80046fc:	4607      	mov	r7, r0
 80046fe:	061b      	lsls	r3, r3, #24
 8004700:	460d      	mov	r5, r1
 8004702:	4614      	mov	r4, r2
 8004704:	b09d      	sub	sp, #116	; 0x74
 8004706:	d50e      	bpl.n	8004726 <_svfiprintf_r+0x32>
 8004708:	690b      	ldr	r3, [r1, #16]
 800470a:	b963      	cbnz	r3, 8004726 <_svfiprintf_r+0x32>
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	f7ff feff 	bl	8004510 <_malloc_r>
 8004712:	6028      	str	r0, [r5, #0]
 8004714:	6128      	str	r0, [r5, #16]
 8004716:	b920      	cbnz	r0, 8004722 <_svfiprintf_r+0x2e>
 8004718:	230c      	movs	r3, #12
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	e0d1      	b.n	80048c6 <_svfiprintf_r+0x1d2>
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	616b      	str	r3, [r5, #20]
 8004726:	2300      	movs	r3, #0
 8004728:	9309      	str	r3, [sp, #36]	; 0x24
 800472a:	2320      	movs	r3, #32
 800472c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004730:	2330      	movs	r3, #48	; 0x30
 8004732:	f04f 0901 	mov.w	r9, #1
 8004736:	f8cd 800c 	str.w	r8, [sp, #12]
 800473a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048e0 <_svfiprintf_r+0x1ec>
 800473e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004742:	4623      	mov	r3, r4
 8004744:	469a      	mov	sl, r3
 8004746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800474a:	b10a      	cbz	r2, 8004750 <_svfiprintf_r+0x5c>
 800474c:	2a25      	cmp	r2, #37	; 0x25
 800474e:	d1f9      	bne.n	8004744 <_svfiprintf_r+0x50>
 8004750:	ebba 0b04 	subs.w	fp, sl, r4
 8004754:	d00b      	beq.n	800476e <_svfiprintf_r+0x7a>
 8004756:	465b      	mov	r3, fp
 8004758:	4622      	mov	r2, r4
 800475a:	4629      	mov	r1, r5
 800475c:	4638      	mov	r0, r7
 800475e:	f7ff ff6d 	bl	800463c <__ssputs_r>
 8004762:	3001      	adds	r0, #1
 8004764:	f000 80aa 	beq.w	80048bc <_svfiprintf_r+0x1c8>
 8004768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476a:	445a      	add	r2, fp
 800476c:	9209      	str	r2, [sp, #36]	; 0x24
 800476e:	f89a 3000 	ldrb.w	r3, [sl]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80a2 	beq.w	80048bc <_svfiprintf_r+0x1c8>
 8004778:	2300      	movs	r3, #0
 800477a:	f04f 32ff 	mov.w	r2, #4294967295
 800477e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004782:	f10a 0a01 	add.w	sl, sl, #1
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	9307      	str	r3, [sp, #28]
 800478a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800478e:	931a      	str	r3, [sp, #104]	; 0x68
 8004790:	4654      	mov	r4, sl
 8004792:	2205      	movs	r2, #5
 8004794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004798:	4851      	ldr	r0, [pc, #324]	; (80048e0 <_svfiprintf_r+0x1ec>)
 800479a:	f000 fa43 	bl	8004c24 <memchr>
 800479e:	9a04      	ldr	r2, [sp, #16]
 80047a0:	b9d8      	cbnz	r0, 80047da <_svfiprintf_r+0xe6>
 80047a2:	06d0      	lsls	r0, r2, #27
 80047a4:	bf44      	itt	mi
 80047a6:	2320      	movmi	r3, #32
 80047a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ac:	0711      	lsls	r1, r2, #28
 80047ae:	bf44      	itt	mi
 80047b0:	232b      	movmi	r3, #43	; 0x2b
 80047b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ba:	2b2a      	cmp	r3, #42	; 0x2a
 80047bc:	d015      	beq.n	80047ea <_svfiprintf_r+0xf6>
 80047be:	4654      	mov	r4, sl
 80047c0:	2000      	movs	r0, #0
 80047c2:	f04f 0c0a 	mov.w	ip, #10
 80047c6:	9a07      	ldr	r2, [sp, #28]
 80047c8:	4621      	mov	r1, r4
 80047ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ce:	3b30      	subs	r3, #48	; 0x30
 80047d0:	2b09      	cmp	r3, #9
 80047d2:	d94e      	bls.n	8004872 <_svfiprintf_r+0x17e>
 80047d4:	b1b0      	cbz	r0, 8004804 <_svfiprintf_r+0x110>
 80047d6:	9207      	str	r2, [sp, #28]
 80047d8:	e014      	b.n	8004804 <_svfiprintf_r+0x110>
 80047da:	eba0 0308 	sub.w	r3, r0, r8
 80047de:	fa09 f303 	lsl.w	r3, r9, r3
 80047e2:	4313      	orrs	r3, r2
 80047e4:	46a2      	mov	sl, r4
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	e7d2      	b.n	8004790 <_svfiprintf_r+0x9c>
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	1d19      	adds	r1, r3, #4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	9103      	str	r1, [sp, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bfbb      	ittet	lt
 80047f6:	425b      	neglt	r3, r3
 80047f8:	f042 0202 	orrlt.w	r2, r2, #2
 80047fc:	9307      	strge	r3, [sp, #28]
 80047fe:	9307      	strlt	r3, [sp, #28]
 8004800:	bfb8      	it	lt
 8004802:	9204      	strlt	r2, [sp, #16]
 8004804:	7823      	ldrb	r3, [r4, #0]
 8004806:	2b2e      	cmp	r3, #46	; 0x2e
 8004808:	d10c      	bne.n	8004824 <_svfiprintf_r+0x130>
 800480a:	7863      	ldrb	r3, [r4, #1]
 800480c:	2b2a      	cmp	r3, #42	; 0x2a
 800480e:	d135      	bne.n	800487c <_svfiprintf_r+0x188>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	3402      	adds	r4, #2
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	9203      	str	r2, [sp, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	bfb8      	it	lt
 800481e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004822:	9305      	str	r3, [sp, #20]
 8004824:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048f0 <_svfiprintf_r+0x1fc>
 8004828:	2203      	movs	r2, #3
 800482a:	4650      	mov	r0, sl
 800482c:	7821      	ldrb	r1, [r4, #0]
 800482e:	f000 f9f9 	bl	8004c24 <memchr>
 8004832:	b140      	cbz	r0, 8004846 <_svfiprintf_r+0x152>
 8004834:	2340      	movs	r3, #64	; 0x40
 8004836:	eba0 000a 	sub.w	r0, r0, sl
 800483a:	fa03 f000 	lsl.w	r0, r3, r0
 800483e:	9b04      	ldr	r3, [sp, #16]
 8004840:	3401      	adds	r4, #1
 8004842:	4303      	orrs	r3, r0
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484a:	2206      	movs	r2, #6
 800484c:	4825      	ldr	r0, [pc, #148]	; (80048e4 <_svfiprintf_r+0x1f0>)
 800484e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004852:	f000 f9e7 	bl	8004c24 <memchr>
 8004856:	2800      	cmp	r0, #0
 8004858:	d038      	beq.n	80048cc <_svfiprintf_r+0x1d8>
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <_svfiprintf_r+0x1f4>)
 800485c:	bb1b      	cbnz	r3, 80048a6 <_svfiprintf_r+0x1b2>
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	3307      	adds	r3, #7
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	3308      	adds	r3, #8
 8004868:	9303      	str	r3, [sp, #12]
 800486a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800486c:	4433      	add	r3, r6
 800486e:	9309      	str	r3, [sp, #36]	; 0x24
 8004870:	e767      	b.n	8004742 <_svfiprintf_r+0x4e>
 8004872:	460c      	mov	r4, r1
 8004874:	2001      	movs	r0, #1
 8004876:	fb0c 3202 	mla	r2, ip, r2, r3
 800487a:	e7a5      	b.n	80047c8 <_svfiprintf_r+0xd4>
 800487c:	2300      	movs	r3, #0
 800487e:	f04f 0c0a 	mov.w	ip, #10
 8004882:	4619      	mov	r1, r3
 8004884:	3401      	adds	r4, #1
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	4620      	mov	r0, r4
 800488a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800488e:	3a30      	subs	r2, #48	; 0x30
 8004890:	2a09      	cmp	r2, #9
 8004892:	d903      	bls.n	800489c <_svfiprintf_r+0x1a8>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0c5      	beq.n	8004824 <_svfiprintf_r+0x130>
 8004898:	9105      	str	r1, [sp, #20]
 800489a:	e7c3      	b.n	8004824 <_svfiprintf_r+0x130>
 800489c:	4604      	mov	r4, r0
 800489e:	2301      	movs	r3, #1
 80048a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80048a4:	e7f0      	b.n	8004888 <_svfiprintf_r+0x194>
 80048a6:	ab03      	add	r3, sp, #12
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	462a      	mov	r2, r5
 80048ac:	4638      	mov	r0, r7
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <_svfiprintf_r+0x1f8>)
 80048b0:	a904      	add	r1, sp, #16
 80048b2:	f3af 8000 	nop.w
 80048b6:	1c42      	adds	r2, r0, #1
 80048b8:	4606      	mov	r6, r0
 80048ba:	d1d6      	bne.n	800486a <_svfiprintf_r+0x176>
 80048bc:	89ab      	ldrh	r3, [r5, #12]
 80048be:	065b      	lsls	r3, r3, #25
 80048c0:	f53f af2c 	bmi.w	800471c <_svfiprintf_r+0x28>
 80048c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048c6:	b01d      	add	sp, #116	; 0x74
 80048c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048cc:	ab03      	add	r3, sp, #12
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	462a      	mov	r2, r5
 80048d2:	4638      	mov	r0, r7
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <_svfiprintf_r+0x1f8>)
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	f000 f87c 	bl	80049d4 <_printf_i>
 80048dc:	e7eb      	b.n	80048b6 <_svfiprintf_r+0x1c2>
 80048de:	bf00      	nop
 80048e0:	08004dd8 	.word	0x08004dd8
 80048e4:	08004de2 	.word	0x08004de2
 80048e8:	00000000 	.word	0x00000000
 80048ec:	0800463d 	.word	0x0800463d
 80048f0:	08004dde 	.word	0x08004dde

080048f4 <_printf_common>:
 80048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	4616      	mov	r6, r2
 80048fa:	4699      	mov	r9, r3
 80048fc:	688a      	ldr	r2, [r1, #8]
 80048fe:	690b      	ldr	r3, [r1, #16]
 8004900:	4607      	mov	r7, r0
 8004902:	4293      	cmp	r3, r2
 8004904:	bfb8      	it	lt
 8004906:	4613      	movlt	r3, r2
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800490e:	460c      	mov	r4, r1
 8004910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004914:	b10a      	cbz	r2, 800491a <_printf_common+0x26>
 8004916:	3301      	adds	r3, #1
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	0699      	lsls	r1, r3, #26
 800491e:	bf42      	ittt	mi
 8004920:	6833      	ldrmi	r3, [r6, #0]
 8004922:	3302      	addmi	r3, #2
 8004924:	6033      	strmi	r3, [r6, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	f015 0506 	ands.w	r5, r5, #6
 800492c:	d106      	bne.n	800493c <_printf_common+0x48>
 800492e:	f104 0a19 	add.w	sl, r4, #25
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	6832      	ldr	r2, [r6, #0]
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	42ab      	cmp	r3, r5
 800493a:	dc28      	bgt.n	800498e <_printf_common+0x9a>
 800493c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004940:	1e13      	subs	r3, r2, #0
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	bf18      	it	ne
 8004946:	2301      	movne	r3, #1
 8004948:	0692      	lsls	r2, r2, #26
 800494a:	d42d      	bmi.n	80049a8 <_printf_common+0xb4>
 800494c:	4649      	mov	r1, r9
 800494e:	4638      	mov	r0, r7
 8004950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d020      	beq.n	800499c <_printf_common+0xa8>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	68e5      	ldr	r5, [r4, #12]
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	2b04      	cmp	r3, #4
 8004964:	bf18      	it	ne
 8004966:	2500      	movne	r5, #0
 8004968:	6832      	ldr	r2, [r6, #0]
 800496a:	f04f 0600 	mov.w	r6, #0
 800496e:	68a3      	ldr	r3, [r4, #8]
 8004970:	bf08      	it	eq
 8004972:	1aad      	subeq	r5, r5, r2
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	bf08      	it	eq
 8004978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800497c:	4293      	cmp	r3, r2
 800497e:	bfc4      	itt	gt
 8004980:	1a9b      	subgt	r3, r3, r2
 8004982:	18ed      	addgt	r5, r5, r3
 8004984:	341a      	adds	r4, #26
 8004986:	42b5      	cmp	r5, r6
 8004988:	d11a      	bne.n	80049c0 <_printf_common+0xcc>
 800498a:	2000      	movs	r0, #0
 800498c:	e008      	b.n	80049a0 <_printf_common+0xac>
 800498e:	2301      	movs	r3, #1
 8004990:	4652      	mov	r2, sl
 8004992:	4649      	mov	r1, r9
 8004994:	4638      	mov	r0, r7
 8004996:	47c0      	blx	r8
 8004998:	3001      	adds	r0, #1
 800499a:	d103      	bne.n	80049a4 <_printf_common+0xb0>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a4:	3501      	adds	r5, #1
 80049a6:	e7c4      	b.n	8004932 <_printf_common+0x3e>
 80049a8:	2030      	movs	r0, #48	; 0x30
 80049aa:	18e1      	adds	r1, r4, r3
 80049ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b6:	4422      	add	r2, r4
 80049b8:	3302      	adds	r3, #2
 80049ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049be:	e7c5      	b.n	800494c <_printf_common+0x58>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4622      	mov	r2, r4
 80049c4:	4649      	mov	r1, r9
 80049c6:	4638      	mov	r0, r7
 80049c8:	47c0      	blx	r8
 80049ca:	3001      	adds	r0, #1
 80049cc:	d0e6      	beq.n	800499c <_printf_common+0xa8>
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7d9      	b.n	8004986 <_printf_common+0x92>
	...

080049d4 <_printf_i>:
 80049d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	460c      	mov	r4, r1
 80049da:	7e27      	ldrb	r7, [r4, #24]
 80049dc:	4691      	mov	r9, r2
 80049de:	2f78      	cmp	r7, #120	; 0x78
 80049e0:	4680      	mov	r8, r0
 80049e2:	469a      	mov	sl, r3
 80049e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ea:	d807      	bhi.n	80049fc <_printf_i+0x28>
 80049ec:	2f62      	cmp	r7, #98	; 0x62
 80049ee:	d80a      	bhi.n	8004a06 <_printf_i+0x32>
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	f000 80d9 	beq.w	8004ba8 <_printf_i+0x1d4>
 80049f6:	2f58      	cmp	r7, #88	; 0x58
 80049f8:	f000 80a4 	beq.w	8004b44 <_printf_i+0x170>
 80049fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a04:	e03a      	b.n	8004a7c <_printf_i+0xa8>
 8004a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0a:	2b15      	cmp	r3, #21
 8004a0c:	d8f6      	bhi.n	80049fc <_printf_i+0x28>
 8004a0e:	a001      	add	r0, pc, #4	; (adr r0, 8004a14 <_printf_i+0x40>)
 8004a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	080049fd 	.word	0x080049fd
 8004a20:	080049fd 	.word	0x080049fd
 8004a24:	080049fd 	.word	0x080049fd
 8004a28:	080049fd 	.word	0x080049fd
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	080049fd 	.word	0x080049fd
 8004a34:	080049fd 	.word	0x080049fd
 8004a38:	080049fd 	.word	0x080049fd
 8004a3c:	080049fd 	.word	0x080049fd
 8004a40:	08004b8f 	.word	0x08004b8f
 8004a44:	08004ab1 	.word	0x08004ab1
 8004a48:	08004b71 	.word	0x08004b71
 8004a4c:	080049fd 	.word	0x080049fd
 8004a50:	080049fd 	.word	0x080049fd
 8004a54:	08004bb1 	.word	0x08004bb1
 8004a58:	080049fd 	.word	0x080049fd
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	080049fd 	.word	0x080049fd
 8004a64:	080049fd 	.word	0x080049fd
 8004a68:	08004b79 	.word	0x08004b79
 8004a6c:	680b      	ldr	r3, [r1, #0]
 8004a6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	600a      	str	r2, [r1, #0]
 8004a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0a4      	b.n	8004bca <_printf_i+0x1f6>
 8004a80:	6825      	ldr	r5, [r4, #0]
 8004a82:	6808      	ldr	r0, [r1, #0]
 8004a84:	062e      	lsls	r6, r5, #24
 8004a86:	f100 0304 	add.w	r3, r0, #4
 8004a8a:	d50a      	bpl.n	8004aa2 <_printf_i+0xce>
 8004a8c:	6805      	ldr	r5, [r0, #0]
 8004a8e:	600b      	str	r3, [r1, #0]
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	da03      	bge.n	8004a9c <_printf_i+0xc8>
 8004a94:	232d      	movs	r3, #45	; 0x2d
 8004a96:	426d      	negs	r5, r5
 8004a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9c:	230a      	movs	r3, #10
 8004a9e:	485e      	ldr	r0, [pc, #376]	; (8004c18 <_printf_i+0x244>)
 8004aa0:	e019      	b.n	8004ad6 <_printf_i+0x102>
 8004aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aa6:	6805      	ldr	r5, [r0, #0]
 8004aa8:	600b      	str	r3, [r1, #0]
 8004aaa:	bf18      	it	ne
 8004aac:	b22d      	sxthne	r5, r5
 8004aae:	e7ef      	b.n	8004a90 <_printf_i+0xbc>
 8004ab0:	680b      	ldr	r3, [r1, #0]
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	1d18      	adds	r0, r3, #4
 8004ab6:	6008      	str	r0, [r1, #0]
 8004ab8:	0628      	lsls	r0, r5, #24
 8004aba:	d501      	bpl.n	8004ac0 <_printf_i+0xec>
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	e002      	b.n	8004ac6 <_printf_i+0xf2>
 8004ac0:	0669      	lsls	r1, r5, #25
 8004ac2:	d5fb      	bpl.n	8004abc <_printf_i+0xe8>
 8004ac4:	881d      	ldrh	r5, [r3, #0]
 8004ac6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ac8:	bf0c      	ite	eq
 8004aca:	2308      	moveq	r3, #8
 8004acc:	230a      	movne	r3, #10
 8004ace:	4852      	ldr	r0, [pc, #328]	; (8004c18 <_printf_i+0x244>)
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ad6:	6866      	ldr	r6, [r4, #4]
 8004ad8:	2e00      	cmp	r6, #0
 8004ada:	bfa8      	it	ge
 8004adc:	6821      	ldrge	r1, [r4, #0]
 8004ade:	60a6      	str	r6, [r4, #8]
 8004ae0:	bfa4      	itt	ge
 8004ae2:	f021 0104 	bicge.w	r1, r1, #4
 8004ae6:	6021      	strge	r1, [r4, #0]
 8004ae8:	b90d      	cbnz	r5, 8004aee <_printf_i+0x11a>
 8004aea:	2e00      	cmp	r6, #0
 8004aec:	d04d      	beq.n	8004b8a <_printf_i+0x1b6>
 8004aee:	4616      	mov	r6, r2
 8004af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004af4:	fb03 5711 	mls	r7, r3, r1, r5
 8004af8:	5dc7      	ldrb	r7, [r0, r7]
 8004afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004afe:	462f      	mov	r7, r5
 8004b00:	42bb      	cmp	r3, r7
 8004b02:	460d      	mov	r5, r1
 8004b04:	d9f4      	bls.n	8004af0 <_printf_i+0x11c>
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d10b      	bne.n	8004b22 <_printf_i+0x14e>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	07df      	lsls	r7, r3, #31
 8004b0e:	d508      	bpl.n	8004b22 <_printf_i+0x14e>
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	6861      	ldr	r1, [r4, #4]
 8004b14:	4299      	cmp	r1, r3
 8004b16:	bfde      	ittt	le
 8004b18:	2330      	movle	r3, #48	; 0x30
 8004b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b22:	1b92      	subs	r2, r2, r6
 8004b24:	6122      	str	r2, [r4, #16]
 8004b26:	464b      	mov	r3, r9
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f8cd a000 	str.w	sl, [sp]
 8004b30:	aa03      	add	r2, sp, #12
 8004b32:	f7ff fedf 	bl	80048f4 <_printf_common>
 8004b36:	3001      	adds	r0, #1
 8004b38:	d14c      	bne.n	8004bd4 <_printf_i+0x200>
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3e:	b004      	add	sp, #16
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	4834      	ldr	r0, [pc, #208]	; (8004c18 <_printf_i+0x244>)
 8004b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b4a:	680e      	ldr	r6, [r1, #0]
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b52:	061f      	lsls	r7, r3, #24
 8004b54:	600e      	str	r6, [r1, #0]
 8004b56:	d514      	bpl.n	8004b82 <_printf_i+0x1ae>
 8004b58:	07d9      	lsls	r1, r3, #31
 8004b5a:	bf44      	itt	mi
 8004b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b60:	6023      	strmi	r3, [r4, #0]
 8004b62:	b91d      	cbnz	r5, 8004b6c <_printf_i+0x198>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f023 0320 	bic.w	r3, r3, #32
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	e7af      	b.n	8004ad0 <_printf_i+0xfc>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f043 0320 	orr.w	r3, r3, #32
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	2378      	movs	r3, #120	; 0x78
 8004b7a:	4828      	ldr	r0, [pc, #160]	; (8004c1c <_printf_i+0x248>)
 8004b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b80:	e7e3      	b.n	8004b4a <_printf_i+0x176>
 8004b82:	065e      	lsls	r6, r3, #25
 8004b84:	bf48      	it	mi
 8004b86:	b2ad      	uxthmi	r5, r5
 8004b88:	e7e6      	b.n	8004b58 <_printf_i+0x184>
 8004b8a:	4616      	mov	r6, r2
 8004b8c:	e7bb      	b.n	8004b06 <_printf_i+0x132>
 8004b8e:	680b      	ldr	r3, [r1, #0]
 8004b90:	6826      	ldr	r6, [r4, #0]
 8004b92:	1d1d      	adds	r5, r3, #4
 8004b94:	6960      	ldr	r0, [r4, #20]
 8004b96:	600d      	str	r5, [r1, #0]
 8004b98:	0635      	lsls	r5, r6, #24
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	d501      	bpl.n	8004ba2 <_printf_i+0x1ce>
 8004b9e:	6018      	str	r0, [r3, #0]
 8004ba0:	e002      	b.n	8004ba8 <_printf_i+0x1d4>
 8004ba2:	0671      	lsls	r1, r6, #25
 8004ba4:	d5fb      	bpl.n	8004b9e <_printf_i+0x1ca>
 8004ba6:	8018      	strh	r0, [r3, #0]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4616      	mov	r6, r2
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	e7ba      	b.n	8004b26 <_printf_i+0x152>
 8004bb0:	680b      	ldr	r3, [r1, #0]
 8004bb2:	1d1a      	adds	r2, r3, #4
 8004bb4:	600a      	str	r2, [r1, #0]
 8004bb6:	681e      	ldr	r6, [r3, #0]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	6862      	ldr	r2, [r4, #4]
 8004bbe:	f000 f831 	bl	8004c24 <memchr>
 8004bc2:	b108      	cbz	r0, 8004bc8 <_printf_i+0x1f4>
 8004bc4:	1b80      	subs	r0, r0, r6
 8004bc6:	6060      	str	r0, [r4, #4]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd2:	e7a8      	b.n	8004b26 <_printf_i+0x152>
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	4640      	mov	r0, r8
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	47d0      	blx	sl
 8004bde:	3001      	adds	r0, #1
 8004be0:	d0ab      	beq.n	8004b3a <_printf_i+0x166>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	079b      	lsls	r3, r3, #30
 8004be6:	d413      	bmi.n	8004c10 <_printf_i+0x23c>
 8004be8:	68e0      	ldr	r0, [r4, #12]
 8004bea:	9b03      	ldr	r3, [sp, #12]
 8004bec:	4298      	cmp	r0, r3
 8004bee:	bfb8      	it	lt
 8004bf0:	4618      	movlt	r0, r3
 8004bf2:	e7a4      	b.n	8004b3e <_printf_i+0x16a>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4632      	mov	r2, r6
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	47d0      	blx	sl
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d09b      	beq.n	8004b3a <_printf_i+0x166>
 8004c02:	3501      	adds	r5, #1
 8004c04:	68e3      	ldr	r3, [r4, #12]
 8004c06:	9903      	ldr	r1, [sp, #12]
 8004c08:	1a5b      	subs	r3, r3, r1
 8004c0a:	42ab      	cmp	r3, r5
 8004c0c:	dcf2      	bgt.n	8004bf4 <_printf_i+0x220>
 8004c0e:	e7eb      	b.n	8004be8 <_printf_i+0x214>
 8004c10:	2500      	movs	r5, #0
 8004c12:	f104 0619 	add.w	r6, r4, #25
 8004c16:	e7f5      	b.n	8004c04 <_printf_i+0x230>
 8004c18:	08004de9 	.word	0x08004de9
 8004c1c:	08004dfa 	.word	0x08004dfa

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <memchr>:
 8004c24:	4603      	mov	r3, r0
 8004c26:	b510      	push	{r4, lr}
 8004c28:	b2c9      	uxtb	r1, r1
 8004c2a:	4402      	add	r2, r0
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	d101      	bne.n	8004c36 <memchr+0x12>
 8004c32:	2000      	movs	r0, #0
 8004c34:	e003      	b.n	8004c3e <memchr+0x1a>
 8004c36:	7804      	ldrb	r4, [r0, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	428c      	cmp	r4, r1
 8004c3c:	d1f6      	bne.n	8004c2c <memchr+0x8>
 8004c3e:	bd10      	pop	{r4, pc}

08004c40 <memcpy>:
 8004c40:	440a      	add	r2, r1
 8004c42:	4291      	cmp	r1, r2
 8004c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c48:	d100      	bne.n	8004c4c <memcpy+0xc>
 8004c4a:	4770      	bx	lr
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c52:	4291      	cmp	r1, r2
 8004c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c58:	d1f9      	bne.n	8004c4e <memcpy+0xe>
 8004c5a:	bd10      	pop	{r4, pc}

08004c5c <memmove>:
 8004c5c:	4288      	cmp	r0, r1
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	eb01 0402 	add.w	r4, r1, r2
 8004c64:	d902      	bls.n	8004c6c <memmove+0x10>
 8004c66:	4284      	cmp	r4, r0
 8004c68:	4623      	mov	r3, r4
 8004c6a:	d807      	bhi.n	8004c7c <memmove+0x20>
 8004c6c:	1e43      	subs	r3, r0, #1
 8004c6e:	42a1      	cmp	r1, r4
 8004c70:	d008      	beq.n	8004c84 <memmove+0x28>
 8004c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c7a:	e7f8      	b.n	8004c6e <memmove+0x12>
 8004c7c:	4601      	mov	r1, r0
 8004c7e:	4402      	add	r2, r0
 8004c80:	428a      	cmp	r2, r1
 8004c82:	d100      	bne.n	8004c86 <memmove+0x2a>
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c8e:	e7f7      	b.n	8004c80 <memmove+0x24>

08004c90 <_realloc_r>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	4607      	mov	r7, r0
 8004c94:	4614      	mov	r4, r2
 8004c96:	460e      	mov	r6, r1
 8004c98:	b921      	cbnz	r1, 8004ca4 <_realloc_r+0x14>
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ca0:	f7ff bc36 	b.w	8004510 <_malloc_r>
 8004ca4:	b922      	cbnz	r2, 8004cb0 <_realloc_r+0x20>
 8004ca6:	f7ff fbe7 	bl	8004478 <_free_r>
 8004caa:	4625      	mov	r5, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb0:	f000 f814 	bl	8004cdc <_malloc_usable_size_r>
 8004cb4:	42a0      	cmp	r0, r4
 8004cb6:	d20f      	bcs.n	8004cd8 <_realloc_r+0x48>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f7ff fc28 	bl	8004510 <_malloc_r>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0f2      	beq.n	8004cac <_realloc_r+0x1c>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4622      	mov	r2, r4
 8004cca:	f7ff ffb9 	bl	8004c40 <memcpy>
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f7ff fbd1 	bl	8004478 <_free_r>
 8004cd6:	e7e9      	b.n	8004cac <_realloc_r+0x1c>
 8004cd8:	4635      	mov	r5, r6
 8004cda:	e7e7      	b.n	8004cac <_realloc_r+0x1c>

08004cdc <_malloc_usable_size_r>:
 8004cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce0:	1f18      	subs	r0, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bfbc      	itt	lt
 8004ce6:	580b      	ldrlt	r3, [r1, r0]
 8004ce8:	18c0      	addlt	r0, r0, r3
 8004cea:	4770      	bx	lr

08004cec <_init>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr

08004cf8 <_fini>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr
